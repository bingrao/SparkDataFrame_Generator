[
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      "=",
      "(",
      "SELECT",
      "MAX",
      "(",
      "population",
      ")",
      "FROM",
      "city",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "population",
      "=",
      "(",
      "select",
      "max",
      "(",
      "population",
      ")",
      "from",
      "city",
      ")",
      ")"
    ],
    "question":"which rivers run through the state with the largest city in the us",
    "question_toks":[
      "which",
      "rivers",
      "run",
      "through",
      "the",
      "state",
      "with",
      "the",
      "largest",
      "city",
      "in",
      "the",
      "us"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      10,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    8,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        1
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        1,
                        [
                          0,
                          [
                            0,
                            8,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse IN (SELECT state_name FROM city WHERE population = (SELECT MAX(population) FROM city))).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT area FROM state WHERE state_name  =  \"new mexico\";",
    "query_toks":[
      "SELECT",
      "area",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "new",
      "mexico",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "area",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how big is new mexico",
    "question_toks":[
      "how",
      "big",
      "is",
      "new",
      "mexico"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"new mexico\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"new mexico\"\")).select(col(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT area FROM state WHERE state_name  =  \"new mexico\";",
    "query_toks":[
      "SELECT",
      "area",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "new",
      "mexico",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "area",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the area of new mexico",
    "question_toks":[
      "what",
      "is",
      "the",
      "area",
      "of",
      "new",
      "mexico"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"new mexico\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"new mexico\"\")).select(col(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT area FROM state WHERE state_name  =  \"new mexico\";",
    "query_toks":[
      "SELECT",
      "area",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "new",
      "mexico",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "area",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how large is new mexico",
    "question_toks":[
      "how",
      "large",
      "is",
      "new",
      "mexico"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"new mexico\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"new mexico\"\")).select(col(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT area FROM state WHERE state_name  =  \"new mexico\";",
    "query_toks":[
      "SELECT",
      "area",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "new",
      "mexico",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "area",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the area of the new mexico state",
    "question_toks":[
      "what",
      "is",
      "the",
      "area",
      "of",
      "the",
      "new",
      "mexico",
      "state"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"new mexico\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"new mexico\"\")).select(col(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT area FROM state WHERE state_name  =  \"new mexico\";",
    "query_toks":[
      "SELECT",
      "area",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "new",
      "mexico",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "area",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the size of new mexico",
    "question_toks":[
      "what",
      "is",
      "the",
      "size",
      "of",
      "new",
      "mexico"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"new mexico\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"new mexico\"\")).select(col(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT area FROM state WHERE state_name  =  \"new mexico\";",
    "query_toks":[
      "SELECT",
      "area",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "new",
      "mexico",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "area",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the area of new mexico in square kilometers",
    "question_toks":[
      "what",
      "is",
      "the",
      "area",
      "of",
      "new",
      "mexico",
      "in",
      "square",
      "kilometers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"new mexico\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"new mexico\"\")).select(col(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many people live in california",
    "question_toks":[
      "how",
      "many",
      "people",
      "live",
      "in",
      "california"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many people reside in california",
    "question_toks":[
      "how",
      "many",
      "people",
      "reside",
      "in",
      "california"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many residents live in california",
    "question_toks":[
      "how",
      "many",
      "residents",
      "live",
      "in",
      "california"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how much population does california have",
    "question_toks":[
      "how",
      "much",
      "population",
      "does",
      "california",
      "have"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the population of california",
    "question_toks":[
      "what",
      "are",
      "the",
      "population",
      "of",
      "california"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the population of california",
    "question_toks":[
      "what",
      "is",
      "the",
      "population",
      "of",
      "california"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many people are in the state of california",
    "question_toks":[
      "how",
      "many",
      "people",
      "are",
      "in",
      "the",
      "state",
      "of",
      "california"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what can you tell me about the population of california",
    "question_toks":[
      "what",
      "can",
      "you",
      "tell",
      "me",
      "about",
      "the",
      "population",
      "of",
      "california"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many people are there in california",
    "question_toks":[
      "how",
      "many",
      "people",
      "are",
      "there",
      "in",
      "california"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many citizens in california",
    "question_toks":[
      "how",
      "many",
      "citizens",
      "in",
      "california"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many people stay in california",
    "question_toks":[
      "how",
      "many",
      "people",
      "stay",
      "in",
      "california"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many citizens live in california",
    "question_toks":[
      "how",
      "many",
      "citizens",
      "live",
      "in",
      "california"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"give me the cities in texas",
    "question_toks":[
      "give",
      "me",
      "the",
      "cities",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"tell me what cities are in texas",
    "question_toks":[
      "tell",
      "me",
      "what",
      "cities",
      "are",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what cities are located in texas",
    "question_toks":[
      "what",
      "cities",
      "are",
      "located",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the cities in texas",
    "question_toks":[
      "what",
      "are",
      "the",
      "cities",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what cities in texas",
    "question_toks":[
      "what",
      "cities",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"give me the cities which are in texas",
    "question_toks":[
      "give",
      "me",
      "the",
      "cities",
      "which",
      "are",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT area FROM state WHERE capital  =  \"albany\";",
    "query_toks":[
      "SELECT",
      "area",
      "FROM",
      "state",
      "WHERE",
      "capital",
      "=",
      "``",
      "albany",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "area",
      "from",
      "state",
      "where",
      "capital",
      "=",
      "value"
    ],
    "question":"what is the area of the state with the capital albany",
    "question_toks":[
      "what",
      "is",
      "the",
      "area",
      "of",
      "the",
      "state",
      "with",
      "the",
      "capital",
      "albany"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"albany\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"capital\") === col(\"\"albany\"\")).select(col(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lake_name FROM lake WHERE state_name  =  \"california\";",
    "query_toks":[
      "SELECT",
      "lake_name",
      "FROM",
      "lake",
      "WHERE",
      "state_name",
      "=",
      "``",
      "california",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lake_name",
      "from",
      "lake",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"give me the lakes in california",
    "question_toks":[
      "give",
      "me",
      "the",
      "lakes",
      "in",
      "california"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"california\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"lake.filter(col(\"state_name\") === col(\"\"california\"\")).select(col(\"lake_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lake_name FROM lake WHERE area  >  750 AND state_name  =  \"michigan\";",
    "query_toks":[
      "SELECT",
      "lake_name",
      "FROM",
      "lake",
      "WHERE",
      "area",
      ">",
      "750",
      "AND",
      "state_name",
      "=",
      "``",
      "michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lake_name",
      "from",
      "lake",
      "where",
      "area",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"name the major lakes in michigan",
    "question_toks":[
      "name",
      "the",
      "major",
      "lakes",
      "in",
      "michigan"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          750.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"lake.filter(col(\"area\") > 750 && col(\"state_name\") === col(\"\"michigan\"\")).select(col(\"lake_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state;",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state"
    ],
    "question":"what are the states",
    "question_toks":[
      "what",
      "are",
      "the",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state;",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state"
    ],
    "question":"list the states",
    "question_toks":[
      "list",
      "the",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state;",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state"
    ],
    "question":"give me all the states of usa",
    "question_toks":[
      "give",
      "me",
      "all",
      "the",
      "states",
      "of",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"which states do ohio river flow through",
    "question_toks":[
      "which",
      "states",
      "do",
      "ohio",
      "river",
      "flow",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"what states does the ohio river run through",
    "question_toks":[
      "what",
      "states",
      "does",
      "the",
      "ohio",
      "river",
      "run",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"what states border the ohio river",
    "question_toks":[
      "what",
      "states",
      "border",
      "the",
      "ohio",
      "river"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"which states border the ohio river",
    "question_toks":[
      "which",
      "states",
      "border",
      "the",
      "ohio",
      "river"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"what states does the ohio run through",
    "question_toks":[
      "what",
      "states",
      "does",
      "the",
      "ohio",
      "run",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"where is the ohio river",
    "question_toks":[
      "where",
      "is",
      "the",
      "ohio",
      "river"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"which states does the ohio river run through",
    "question_toks":[
      "which",
      "states",
      "does",
      "the",
      "ohio",
      "river",
      "run",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"which states does the ohio run through",
    "question_toks":[
      "which",
      "states",
      "does",
      "the",
      "ohio",
      "run",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"which states does the ohio river pass through",
    "question_toks":[
      "which",
      "states",
      "does",
      "the",
      "ohio",
      "river",
      "pass",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"what are the states that the ohio run through",
    "question_toks":[
      "what",
      "are",
      "the",
      "states",
      "that",
      "the",
      "ohio",
      "run",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"which state has the ohio river",
    "question_toks":[
      "which",
      "state",
      "has",
      "the",
      "ohio",
      "river"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"what states have rivers named ohio",
    "question_toks":[
      "what",
      "states",
      "have",
      "rivers",
      "named",
      "ohio"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"through which states does the ohio flow",
    "question_toks":[
      "through",
      "which",
      "states",
      "does",
      "the",
      "ohio",
      "flow"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"what states are next to the ohio",
    "question_toks":[
      "what",
      "states",
      "are",
      "next",
      "to",
      "the",
      "ohio"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"through which states does the ohio run",
    "question_toks":[
      "through",
      "which",
      "states",
      "does",
      "the",
      "ohio",
      "run"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"what states does the ohio river go through",
    "question_toks":[
      "what",
      "states",
      "does",
      "the",
      "ohio",
      "river",
      "go",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"ohio\"\")).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lowest_elevation FROM highlow WHERE state_name  =  \"pennsylvania\";",
    "query_toks":[
      "SELECT",
      "lowest_elevation",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "pennsylvania",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lowest_elevation",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the lowest elevation in pennsylvania",
    "question_toks":[
      "what",
      "is",
      "the",
      "lowest",
      "elevation",
      "in",
      "pennsylvania"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"pennsylvania\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"pennsylvania\"\")).select(col(\"lowest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point  ,  state_name FROM highlow WHERE lowest_elevation  =  0;",
    "query_toks":[
      "SELECT",
      "highest_point",
      ",",
      "state_name",
      "FROM",
      "highlow",
      "WHERE",
      "lowest_elevation",
      "=",
      "0",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      ",",
      "state_name",
      "from",
      "highlow",
      "where",
      "lowest_elevation",
      "=",
      "value"
    ],
    "question":"what is the highest point in each state whose lowest point is sea level",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "each",
      "state",
      "whose",
      "lowest",
      "point",
      "is",
      "sea",
      "level"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          0.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"lowest_elevation\") === 0).select(col(\"highest_point\"),col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "idaho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"how many rivers are in idaho",
    "question_toks":[
      "how",
      "many",
      "rivers",
      "are",
      "in",
      "idaho"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"idaho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"idaho\"\")).agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "idaho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"give me the number of rivers in idaho",
    "question_toks":[
      "give",
      "me",
      "the",
      "number",
      "of",
      "rivers",
      "in",
      "idaho"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"idaho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"idaho\"\")).agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "idaho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"how many rivers does idaho have",
    "question_toks":[
      "how",
      "many",
      "rivers",
      "does",
      "idaho",
      "have"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"idaho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"idaho\"\")).agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "idaho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"how many rivers are there in idaho",
    "question_toks":[
      "how",
      "many",
      "rivers",
      "are",
      "there",
      "in",
      "idaho"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"idaho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"idaho\"\")).agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "idaho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"how many rivers run through idaho",
    "question_toks":[
      "how",
      "many",
      "rivers",
      "run",
      "through",
      "idaho"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"idaho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"idaho\"\")).agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "idaho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"how many rivers are found in idaho",
    "question_toks":[
      "how",
      "many",
      "rivers",
      "are",
      "found",
      "in",
      "idaho"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"idaho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"idaho\"\")).agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "idaho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"how many rivers in idaho",
    "question_toks":[
      "how",
      "many",
      "rivers",
      "in",
      "idaho"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"idaho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"idaho\"\")).agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what states neighbor kentucky",
    "question_toks":[
      "what",
      "states",
      "neighbor",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"which states border kentucky",
    "question_toks":[
      "which",
      "states",
      "border",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what states border kentucky",
    "question_toks":[
      "what",
      "states",
      "border",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"give me the states that border kentucky",
    "question_toks":[
      "give",
      "me",
      "the",
      "states",
      "that",
      "border",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what state borders kentucky",
    "question_toks":[
      "what",
      "state",
      "borders",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what states are next to kentucky",
    "question_toks":[
      "what",
      "states",
      "are",
      "next",
      "to",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what states surround kentucky",
    "question_toks":[
      "what",
      "states",
      "surround",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"which state borders kentucky",
    "question_toks":[
      "which",
      "state",
      "borders",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the neighboring states for kentucky",
    "question_toks":[
      "what",
      "are",
      "the",
      "neighboring",
      "states",
      "for",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"which states adjoin kentucky",
    "question_toks":[
      "which",
      "states",
      "adjoin",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"states bordering kentucky",
    "question_toks":[
      "states",
      "bordering",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"which state border kentucky",
    "question_toks":[
      "which",
      "state",
      "border",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the adjacent state of kentucky",
    "question_toks":[
      "what",
      "is",
      "the",
      "adjacent",
      "state",
      "of",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"name all the rivers in illinois",
    "question_toks":[
      "name",
      "all",
      "the",
      "rivers",
      "in",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"rivers in illinois",
    "question_toks":[
      "rivers",
      "in",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"what are all the rivers in illinois",
    "question_toks":[
      "what",
      "are",
      "all",
      "the",
      "rivers",
      "in",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"what are the rivers in illinois",
    "question_toks":[
      "what",
      "are",
      "the",
      "rivers",
      "in",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"what rivers are in illinois",
    "question_toks":[
      "what",
      "rivers",
      "are",
      "in",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"what rivers are there in illinois",
    "question_toks":[
      "what",
      "rivers",
      "are",
      "there",
      "in",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"what rivers run through illinois",
    "question_toks":[
      "what",
      "rivers",
      "run",
      "through",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"what rivers flow through illinois",
    "question_toks":[
      "what",
      "rivers",
      "flow",
      "through",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"what river flows through illinois",
    "question_toks":[
      "what",
      "river",
      "flows",
      "through",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"what are the rivers in the state of illinois",
    "question_toks":[
      "what",
      "are",
      "the",
      "rivers",
      "in",
      "the",
      "state",
      "of",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"name the rivers in illinois",
    "question_toks":[
      "name",
      "the",
      "rivers",
      "in",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"what are the rivers of illinois",
    "question_toks":[
      "what",
      "are",
      "the",
      "rivers",
      "of",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"which rivers are in illinois",
    "question_toks":[
      "which",
      "rivers",
      "are",
      "in",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"which rivers flow through illinois",
    "question_toks":[
      "which",
      "rivers",
      "flow",
      "through",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"what is the river that cross over illinois",
    "question_toks":[
      "what",
      "is",
      "the",
      "river",
      "that",
      "cross",
      "over",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value"
    ],
    "question":"what river runs through illinois",
    "question_toks":[
      "what",
      "river",
      "runs",
      "through",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"what state is springfield in",
    "question_toks":[
      "what",
      "state",
      "is",
      "springfield",
      "in"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"where is springfield",
    "question_toks":[
      "where",
      "is",
      "springfield"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"springfield is in what state",
    "question_toks":[
      "springfield",
      "is",
      "in",
      "what",
      "state"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"what states have cities named springfield",
    "question_toks":[
      "what",
      "states",
      "have",
      "cities",
      "named",
      "springfield"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"which states have cities named springfield",
    "question_toks":[
      "which",
      "states",
      "have",
      "cities",
      "named",
      "springfield"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"which state is springfield in",
    "question_toks":[
      "which",
      "state",
      "is",
      "springfield",
      "in"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"what states have a city named springfield",
    "question_toks":[
      "what",
      "states",
      "have",
      "a",
      "city",
      "named",
      "springfield"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"what state has the city springfield",
    "question_toks":[
      "what",
      "state",
      "has",
      "the",
      "city",
      "springfield"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"what states have towns named springfield",
    "question_toks":[
      "what",
      "states",
      "have",
      "towns",
      "named",
      "springfield"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"what state is springfield located in",
    "question_toks":[
      "what",
      "state",
      "is",
      "springfield",
      "located",
      "in"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"in which state is springfield",
    "question_toks":[
      "in",
      "which",
      "state",
      "is",
      "springfield"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"which state is the city springfield located in",
    "question_toks":[
      "which",
      "state",
      "is",
      "the",
      "city",
      "springfield",
      "located",
      "in"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"what states in the united states have a city of springfield",
    "question_toks":[
      "what",
      "states",
      "in",
      "the",
      "united",
      "states",
      "have",
      "a",
      "city",
      "of",
      "springfield"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"how many people live in boulder",
    "question_toks":[
      "how",
      "many",
      "people",
      "live",
      "in",
      "boulder"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"what is the population of boulder",
    "question_toks":[
      "what",
      "is",
      "the",
      "population",
      "of",
      "boulder"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"how many people lived in boulder",
    "question_toks":[
      "how",
      "many",
      "people",
      "lived",
      "in",
      "boulder"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"number of people in boulder",
    "question_toks":[
      "number",
      "of",
      "people",
      "in",
      "boulder"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"what is the population of boulder city",
    "question_toks":[
      "what",
      "is",
      "the",
      "population",
      "of",
      "boulder",
      "city"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"how big is the city of boulder",
    "question_toks":[
      "how",
      "big",
      "is",
      "the",
      "city",
      "of",
      "boulder"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"population of boulder",
    "question_toks":[
      "population",
      "of",
      "boulder"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"what is the population in boulder",
    "question_toks":[
      "what",
      "is",
      "the",
      "population",
      "in",
      "boulder"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"people in boulder",
    "question_toks":[
      "people",
      "in",
      "boulder"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"how many people in boulder",
    "question_toks":[
      "how",
      "many",
      "people",
      "in",
      "boulder"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"how many inhabitants does boulder have",
    "question_toks":[
      "how",
      "many",
      "inhabitants",
      "does",
      "boulder",
      "have"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"number of citizens in boulder",
    "question_toks":[
      "number",
      "of",
      "citizens",
      "in",
      "boulder"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"boulder\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "boulder",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"how many citizens in boulder",
    "question_toks":[
      "how",
      "many",
      "citizens",
      "in",
      "boulder"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"boulder\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"boulder\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
    "query_toks":[
      "SELECT",
      "highest_elevation",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "delaware",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_elevation",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the highest elevation in delaware",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "elevation",
      "in",
      "delaware"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"delaware\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"delaware\"\")).select(col(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
    "query_toks":[
      "SELECT",
      "highest_elevation",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "delaware",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_elevation",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how high is the highest point of delaware",
    "question_toks":[
      "how",
      "high",
      "is",
      "the",
      "highest",
      "point",
      "of",
      "delaware"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"delaware\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"delaware\"\")).select(col(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
    "query_toks":[
      "SELECT",
      "highest_elevation",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "delaware",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_elevation",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how tall is the highest point in delaware",
    "question_toks":[
      "how",
      "tall",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "delaware"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"delaware\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"delaware\"\")).select(col(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
    "query_toks":[
      "SELECT",
      "highest_elevation",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "delaware",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_elevation",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the highest point in delaware in meters",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "delaware",
      "in",
      "meters"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"delaware\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"delaware\"\")).select(col(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
    "query_toks":[
      "SELECT",
      "highest_elevation",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "delaware",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_elevation",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how high is the highest point in delaware",
    "question_toks":[
      "how",
      "high",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "delaware"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"delaware\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"delaware\"\")).select(col(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the highest points of states surrounding mississippi",
    "question_toks":[
      "what",
      "are",
      "the",
      "highest",
      "points",
      "of",
      "states",
      "surrounding",
      "mississippi"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(state_name IN (SELECT border FROM border_info WHERE state_name = \"mississippi\")).select(col(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the high points of states surrounding mississippi",
    "question_toks":[
      "what",
      "are",
      "the",
      "high",
      "points",
      "of",
      "states",
      "surrounding",
      "mississippi"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(state_name IN (SELECT border FROM border_info WHERE state_name = \"mississippi\")).select(col(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "colorado",
      "''",
      ")",
      "ORDER",
      "BY",
      "highest_elevation",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")",
      "order",
      "by",
      "highest_elevation",
      "desc",
      "limit",
      "value"
    ],
    "question":"what is the highest point in states bordering colorado",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "states",
      "bordering",
      "colorado"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"colorado\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(state_name IN (SELECT border FROM border_info WHERE state_name = \"colorado\")).select(col(\"highest_point\")).orderBy(desc(\"highest_elevation\")).limit(1)"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "colorado",
      "''",
      ")",
      "ORDER",
      "BY",
      "highest_elevation",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")",
      "order",
      "by",
      "highest_elevation",
      "desc",
      "limit",
      "value"
    ],
    "question":"what is the highest point in the states bordering colorado",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "the",
      "states",
      "bordering",
      "colorado"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"colorado\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(state_name IN (SELECT border FROM border_info WHERE state_name = \"colorado\")).select(col(\"highest_point\")).orderBy(desc(\"highest_elevation\")).limit(1)"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"where is the highest point in texas",
    "question_toks":[
      "where",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the highest point in texas",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the high point of texas",
    "question_toks":[
      "what",
      "is",
      "the",
      "high",
      "point",
      "of",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the highest mountain in texas",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "mountain",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"could you tell me what is the highest point in the state of texas",
    "question_toks":[
      "could",
      "you",
      "tell",
      "me",
      "what",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "the",
      "state",
      "of",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "border_info",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "state_name",
      "not",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "border_info",
      ")"
    ],
    "question":"what states have no bordering state",
    "question_toks":[
      "what",
      "states",
      "have",
      "no",
      "bordering",
      "state"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name NOT IN (SELECT state_name FROM border_info)).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "border_info",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "state_name",
      "not",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "border_info",
      ")"
    ],
    "question":"name the states which have no surrounding states",
    "question_toks":[
      "name",
      "the",
      "states",
      "which",
      "have",
      "no",
      "surrounding",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name NOT IN (SELECT state_name FROM border_info)).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "border_info",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "state_name",
      "not",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "border_info",
      ")"
    ],
    "question":"which states border no other states",
    "question_toks":[
      "which",
      "states",
      "border",
      "no",
      "other",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name NOT IN (SELECT state_name FROM border_info)).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";",
    "query_toks":[
      "SELECT",
      "highest_elevation",
      "FROM",
      "highlow",
      "WHERE",
      "highest_point",
      "=",
      "``",
      "guadalupe",
      "peak",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_elevation",
      "from",
      "highlow",
      "where",
      "highest_point",
      "=",
      "value"
    ],
    "question":"how high is guadalupe peak",
    "question_toks":[
      "how",
      "high",
      "is",
      "guadalupe",
      "peak"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"guadalupe peak\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"highest_point\") === col(\"\"guadalupe peak\"\")).select(col(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";",
    "query_toks":[
      "SELECT",
      "highest_elevation",
      "FROM",
      "highlow",
      "WHERE",
      "highest_point",
      "=",
      "``",
      "guadalupe",
      "peak",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_elevation",
      "from",
      "highlow",
      "where",
      "highest_point",
      "=",
      "value"
    ],
    "question":"how tall is guadalupe peak",
    "question_toks":[
      "how",
      "tall",
      "is",
      "guadalupe",
      "peak"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"guadalupe peak\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"highest_point\") === col(\"\"guadalupe peak\"\")).select(col(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";",
    "query_toks":[
      "SELECT",
      "highest_elevation",
      "FROM",
      "highlow",
      "WHERE",
      "highest_point",
      "=",
      "``",
      "guadalupe",
      "peak",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_elevation",
      "from",
      "highlow",
      "where",
      "highest_point",
      "=",
      "value"
    ],
    "question":"what is the maximum elevation of guadalupe peak",
    "question_toks":[
      "what",
      "is",
      "the",
      "maximum",
      "elevation",
      "of",
      "guadalupe",
      "peak"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"guadalupe peak\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"highest_point\") === col(\"\"guadalupe peak\"\")).select(col(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT MAX ( highest_elevation ) FROM highlow;",
    "query_toks":[
      "SELECT",
      "MAX",
      "(",
      "highest_elevation",
      ")",
      "FROM",
      "highlow",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "highest_elevation",
      ")",
      "from",
      "highlow"
    ],
    "question":"how high is the highest point in america",
    "question_toks":[
      "how",
      "high",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "america"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"highlow.agg(MAX(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT MAX ( highest_elevation ) FROM highlow;",
    "query_toks":[
      "SELECT",
      "MAX",
      "(",
      "highest_elevation",
      ")",
      "FROM",
      "highlow",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "highest_elevation",
      ")",
      "from",
      "highlow"
    ],
    "question":"what is the highest elevation in the united states",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "elevation",
      "in",
      "the",
      "united",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"highlow.agg(MAX(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT MAX ( highest_elevation ) FROM highlow;",
    "query_toks":[
      "SELECT",
      "MAX",
      "(",
      "highest_elevation",
      ")",
      "FROM",
      "highlow",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "highest_elevation",
      ")",
      "from",
      "highlow"
    ],
    "question":"what is the elevation of the highest point in the usa",
    "question_toks":[
      "what",
      "is",
      "the",
      "elevation",
      "of",
      "the",
      "highest",
      "point",
      "in",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"highlow.agg(MAX(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT MAX ( highest_elevation ) FROM highlow;",
    "query_toks":[
      "SELECT",
      "MAX",
      "(",
      "highest_elevation",
      ")",
      "FROM",
      "highlow",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "highest_elevation",
      ")",
      "from",
      "highlow"
    ],
    "question":"what is the height of the highest point in the usa",
    "question_toks":[
      "what",
      "is",
      "the",
      "height",
      "of",
      "the",
      "highest",
      "point",
      "in",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"highlow.agg(MAX(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
    "query_toks":[
      "SELECT",
      "LENGTH",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "rio",
      "grande",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "length",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"how long is the rio grande river",
    "question_toks":[
      "how",
      "long",
      "is",
      "the",
      "rio",
      "grande",
      "river"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"rio grande\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"rio grande\"\")).select(col(\"LENGTH\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
    "query_toks":[
      "SELECT",
      "LENGTH",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "rio",
      "grande",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "length",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"what is the length of the rio grande river",
    "question_toks":[
      "what",
      "is",
      "the",
      "length",
      "of",
      "the",
      "rio",
      "grande",
      "river"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"rio grande\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"rio grande\"\")).select(col(\"LENGTH\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
    "query_toks":[
      "SELECT",
      "LENGTH",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "rio",
      "grande",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "length",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"what length is the rio grande",
    "question_toks":[
      "what",
      "length",
      "is",
      "the",
      "rio",
      "grande"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"rio grande\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"rio grande\"\")).select(col(\"LENGTH\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
    "query_toks":[
      "SELECT",
      "LENGTH",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "rio",
      "grande",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "length",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"how long is the rio grande",
    "question_toks":[
      "how",
      "long",
      "is",
      "the",
      "rio",
      "grande"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"rio grande\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"rio grande\"\")).select(col(\"LENGTH\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
    "query_toks":[
      "SELECT",
      "LENGTH",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "rio",
      "grande",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "length",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"how long is the rio grande river in miles",
    "question_toks":[
      "how",
      "long",
      "is",
      "the",
      "rio",
      "grande",
      "river",
      "in",
      "miles"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"rio grande\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"rio grande\"\")).select(col(\"LENGTH\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
    "query_toks":[
      "SELECT",
      "LENGTH",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "rio",
      "grande",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "length",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"how long is rio grande",
    "question_toks":[
      "how",
      "long",
      "is",
      "rio",
      "grande"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"rio grande\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"rio grande\"\")).select(col(\"LENGTH\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( capital ) FROM state WHERE state_name  =  \"rhode island\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "capital",
      ")",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "rhode",
      "island",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "capital",
      ")",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many capitals does rhode island have",
    "question_toks":[
      "how",
      "many",
      "capitals",
      "does",
      "rhode",
      "island",
      "have"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"rhode island\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"rhode island\"\")).agg(COUNT(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city"
    ],
    "question":"how many cities are there in the united states",
    "question_toks":[
      "how",
      "many",
      "cities",
      "are",
      "there",
      "in",
      "the",
      "united",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"city.agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city"
    ],
    "question":"how many cities does the usa have",
    "question_toks":[
      "how",
      "many",
      "cities",
      "does",
      "the",
      "usa",
      "have"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"city.agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city"
    ],
    "question":"how many cities are there in the us",
    "question_toks":[
      "how",
      "many",
      "cities",
      "are",
      "there",
      "in",
      "the",
      "us"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"city.agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city"
    ],
    "question":"how many cities are there in usa",
    "question_toks":[
      "how",
      "many",
      "cities",
      "are",
      "there",
      "in",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"city.agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city"
    ],
    "question":"how many cities are there in us",
    "question_toks":[
      "how",
      "many",
      "cities",
      "are",
      "there",
      "in",
      "us"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"city.agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city WHERE population  >  150000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value"
    ],
    "question":"how many major cities are there",
    "question_toks":[
      "how",
      "many",
      "major",
      "cities",
      "are",
      "there"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000).agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"colorado\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "colorado",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"how many colorado rivers are there",
    "question_toks":[
      "how",
      "many",
      "colorado",
      "rivers",
      "are",
      "there"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"colorado\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"colorado\"\")).agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"colorado\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "colorado",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"how many rivers are called colorado",
    "question_toks":[
      "how",
      "many",
      "rivers",
      "are",
      "called",
      "colorado"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"colorado\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"colorado\"\")).agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "seattle",
      "''",
      "AND",
      "state_name",
      "=",
      "``",
      "washington",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the population of seattle washington",
    "question_toks":[
      "what",
      "is",
      "the",
      "population",
      "of",
      "seattle",
      "washington"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"seattle\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"washington\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"seattle\"\") && col(\"state_name\") === col(\"\"washington\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "seattle",
      "''",
      "AND",
      "state_name",
      "=",
      "``",
      "washington",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many people live in seattle washington",
    "question_toks":[
      "how",
      "many",
      "people",
      "live",
      "in",
      "seattle",
      "washington"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"seattle\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"washington\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"seattle\"\") && col(\"state_name\") === col(\"\"washington\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT SUM ( population ) FROM state;",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "population",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "state"
    ],
    "question":"how many people live in the united states",
    "question_toks":[
      "how",
      "many",
      "people",
      "live",
      "in",
      "the",
      "united",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(SUM(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT SUM ( population ) FROM state;",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "population",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "state"
    ],
    "question":"what is the combined population of all 50 states",
    "question_toks":[
      "what",
      "is",
      "the",
      "combined",
      "population",
      "of",
      "all",
      "50",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(SUM(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( state_name ) FROM state;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "state_name",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "state_name",
      ")",
      "from",
      "state"
    ],
    "question":"how many states are in the usa",
    "question_toks":[
      "how",
      "many",
      "states",
      "are",
      "in",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(COUNT(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( state_name ) FROM state;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "state_name",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "state_name",
      ")",
      "from",
      "state"
    ],
    "question":"how many states are there",
    "question_toks":[
      "how",
      "many",
      "states",
      "are",
      "there"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(COUNT(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( state_name ) FROM state;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "state_name",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "state_name",
      ")",
      "from",
      "state"
    ],
    "question":"how many states are there in the usa",
    "question_toks":[
      "how",
      "many",
      "states",
      "are",
      "there",
      "in",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(COUNT(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( state_name ) FROM state;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "state_name",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "state_name",
      ")",
      "from",
      "state"
    ],
    "question":"how many states does usa have",
    "question_toks":[
      "how",
      "many",
      "states",
      "does",
      "usa",
      "have"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(COUNT(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( state_name ) FROM state;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "state_name",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "state_name",
      ")",
      "from",
      "state"
    ],
    "question":"how many states are in the united states",
    "question_toks":[
      "how",
      "many",
      "states",
      "are",
      "in",
      "the",
      "united",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(COUNT(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( state_name ) FROM state;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "state_name",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "state_name",
      ")",
      "from",
      "state"
    ],
    "question":"how many states are there in united states",
    "question_toks":[
      "how",
      "many",
      "states",
      "are",
      "there",
      "in",
      "united",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(COUNT(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "border",
      ")",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "border",
      ")",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many states border kentucky",
    "question_toks":[
      "how",
      "many",
      "states",
      "border",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).agg(COUNT(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "border",
      ")",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "border",
      ")",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many states does kentucky border",
    "question_toks":[
      "how",
      "many",
      "states",
      "does",
      "kentucky",
      "border"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).agg(COUNT(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "border",
      ")",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "border",
      ")",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"kentucky borders how many states",
    "question_toks":[
      "kentucky",
      "borders",
      "how",
      "many",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).agg(COUNT(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "border",
      ")",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "border",
      ")",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"number of states bordering kentucky",
    "question_toks":[
      "number",
      "of",
      "states",
      "bordering",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).agg(COUNT(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "border",
      ")",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "kentucky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "border",
      ")",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the number of neighboring states for kentucky",
    "question_toks":[
      "what",
      "is",
      "the",
      "number",
      "of",
      "neighboring",
      "states",
      "for",
      "kentucky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"kentucky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"state_name\") === col(\"\"kentucky\"\")).agg(COUNT(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "border",
      ")",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "population",
      "=",
      "(",
      "SELECT",
      "MAX",
      "(",
      "population",
      ")",
      "FROM",
      "state",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "border",
      ")",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "population",
      "=",
      "(",
      "select",
      "max",
      "(",
      "population",
      ")",
      "from",
      "state",
      ")",
      ")"
    ],
    "question":"how many states border the state with the largest population",
    "question_toks":[
      "how",
      "many",
      "states",
      "border",
      "the",
      "state",
      "with",
      "the",
      "largest",
      "population"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    2,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        1,
                        [
                          0,
                          [
                            0,
                            2,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(state_name IN (SELECT state_name FROM state WHERE population = (SELECT MAX(population) FROM state))).agg(COUNT(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "state_name",
      ")",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "state_name",
      ")",
      "from",
      "state",
      "where",
      "state_name",
      "not",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      ")"
    ],
    "question":"how many states do not have rivers",
    "question_toks":[
      "how",
      "many",
      "states",
      "do",
      "not",
      "have",
      "rivers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                1,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name NOT IN (SELECT traverse FROM river)).agg(COUNT(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      ">",
      "750",
      "AND",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "length",
      ">",
      "value",
      "and",
      "traverse",
      "=",
      "value"
    ],
    "question":"name the major rivers in illinois",
    "question_toks":[
      "name",
      "the",
      "major",
      "rivers",
      "in",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          750.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"LENGTH\") > 750 && col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      ">",
      "750",
      "AND",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "length",
      ">",
      "value",
      "and",
      "traverse",
      "=",
      "value"
    ],
    "question":"what are the major rivers in illinois",
    "question_toks":[
      "what",
      "are",
      "the",
      "major",
      "rivers",
      "in",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          750.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"LENGTH\") > 750 && col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      ">",
      "750",
      "AND",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "length",
      ">",
      "value",
      "and",
      "traverse",
      "=",
      "value"
    ],
    "question":"what are major rivers in illinois",
    "question_toks":[
      "what",
      "are",
      "major",
      "rivers",
      "in",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          750.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"LENGTH\") > 750 && col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      ">",
      "750",
      "AND",
      "traverse",
      "=",
      "``",
      "illinois",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "length",
      ">",
      "value",
      "and",
      "traverse",
      "=",
      "value"
    ],
    "question":"what major rivers run through illinois",
    "question_toks":[
      "what",
      "major",
      "rivers",
      "run",
      "through",
      "illinois"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          750.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"illinois\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"LENGTH\") > 750 && col(\"traverse\") === col(\"\"illinois\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT capital FROM state WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "capital",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "capital",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the capital city in texas",
    "question_toks":[
      "what",
      "are",
      "the",
      "capital",
      "city",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT capital FROM state WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "capital",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "capital",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the capital of texas",
    "question_toks":[
      "what",
      "is",
      "the",
      "capital",
      "of",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT capital FROM state WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "capital",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "capital",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the capital of the texas state",
    "question_toks":[
      "what",
      "is",
      "the",
      "capital",
      "of",
      "the",
      "texas",
      "state"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT capital FROM state WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "capital",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "capital",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is capital of texas",
    "question_toks":[
      "what",
      "is",
      "capital",
      "of",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT capital FROM state WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "capital",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "capital",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the capital of the state texas",
    "question_toks":[
      "what",
      "is",
      "the",
      "capital",
      "of",
      "the",
      "state",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT capital FROM state WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "capital",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "capital",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"can you tell me the capital of texas",
    "question_toks":[
      "can",
      "you",
      "tell",
      "me",
      "the",
      "capital",
      "of",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"texas\"\")).select(col(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "t2.capital",
      "FROM",
      "state",
      "AS",
      "t2",
      "JOIN",
      "border_info",
      "AS",
      "t1",
      "ON",
      "t2.state_name",
      "=",
      "t1.border",
      "WHERE",
      "t1.state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "capital",
      "from",
      "state",
      "as",
      "t2",
      "join",
      "border_info",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "state_name",
      "=",
      "t1",
      ".",
      "border",
      "where",
      "t1",
      ".",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the capitals of states that border texas",
    "question_toks":[
      "what",
      "are",
      "the",
      "capitals",
      "of",
      "states",
      "that",
      "border",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.join(border_info, state(\"state_name\") === border_info(\"border\"), inner).filter(border_info(\"state_name\") === col(\"\"texas\"\")).select(state(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "t2.capital",
      "FROM",
      "state",
      "AS",
      "t2",
      "JOIN",
      "border_info",
      "AS",
      "t1",
      "ON",
      "t2.state_name",
      "=",
      "t1.border",
      "WHERE",
      "t1.state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "capital",
      "from",
      "state",
      "as",
      "t2",
      "join",
      "border_info",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "state_name",
      "=",
      "t1",
      ".",
      "border",
      "where",
      "t1",
      ".",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the capital cities of the states which border texas",
    "question_toks":[
      "what",
      "are",
      "the",
      "capital",
      "cities",
      "of",
      "the",
      "states",
      "which",
      "border",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.join(border_info, state(\"state_name\") === border_info(\"border\"), inner).filter(border_info(\"state_name\") === col(\"\"texas\"\")).select(state(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "t2.capital",
      "FROM",
      "state",
      "AS",
      "t2",
      "JOIN",
      "border_info",
      "AS",
      "t1",
      "ON",
      "t2.state_name",
      "=",
      "t1.border",
      "WHERE",
      "t1.state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "capital",
      "from",
      "state",
      "as",
      "t2",
      "join",
      "border_info",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "state_name",
      "=",
      "t1",
      ".",
      "border",
      "where",
      "t1",
      ".",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the capitals of the states that border texas",
    "question_toks":[
      "what",
      "are",
      "the",
      "capitals",
      "of",
      "the",
      "states",
      "that",
      "border",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.join(border_info, state(\"state_name\") === border_info(\"border\"), inner).filter(border_info(\"state_name\") === col(\"\"texas\"\")).select(state(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "t2.capital",
      "FROM",
      "state",
      "AS",
      "t2",
      "JOIN",
      "border_info",
      "AS",
      "t1",
      "ON",
      "t2.state_name",
      "=",
      "t1.border",
      "WHERE",
      "t1.state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "capital",
      "from",
      "state",
      "as",
      "t2",
      "join",
      "border_info",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "state_name",
      "=",
      "t1",
      ".",
      "border",
      "where",
      "t1",
      ".",
      "state_name",
      "=",
      "value"
    ],
    "question":"which capitals are in the states that border texas",
    "question_toks":[
      "which",
      "capitals",
      "are",
      "in",
      "the",
      "states",
      "that",
      "border",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.join(border_info, state(\"state_name\") === border_info(\"border\"), inner).filter(border_info(\"state_name\") === col(\"\"texas\"\")).select(state(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the cities in states through which the mississippi runs",
    "question_toks":[
      "what",
      "are",
      "the",
      "cities",
      "in",
      "states",
      "through",
      "which",
      "the",
      "mississippi",
      "runs"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) );",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "highlow",
      "WHERE",
      "highest_elevation",
      "=",
      "(",
      "SELECT",
      "MAX",
      "(",
      "highest_elevation",
      ")",
      "FROM",
      "highlow",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "highlow",
      "where",
      "highest_elevation",
      "=",
      "(",
      "select",
      "max",
      "(",
      "highest_elevation",
      ")",
      "from",
      "highlow",
      ")",
      ")"
    ],
    "question":"what are the cities of the state with the highest point",
    "question_toks":[
      "what",
      "are",
      "the",
      "cities",
      "of",
      "the",
      "state",
      "with",
      "the",
      "highest",
      "point"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  3
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    14,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        3
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        1,
                        [
                          0,
                          [
                            0,
                            14,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(state_name IN (SELECT state_name FROM highlow WHERE highest_elevation = (SELECT MAX(highest_elevation) FROM highlow))).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow;",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow"
    ],
    "question":"what are the highest points of all the states",
    "question_toks":[
      "what",
      "are",
      "the",
      "highest",
      "points",
      "of",
      "all",
      "the",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"highlow.select(col(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "kansas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the major cities in kansas",
    "question_toks":[
      "what",
      "are",
      "the",
      "major",
      "cities",
      "in",
      "kansas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"kansas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"kansas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "kansas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the major cities in the state of kansas",
    "question_toks":[
      "what",
      "are",
      "the",
      "major",
      "cities",
      "in",
      "the",
      "state",
      "of",
      "kansas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"kansas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"kansas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "kansas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"what major cities are located in kansas",
    "question_toks":[
      "what",
      "major",
      "cities",
      "are",
      "located",
      "in",
      "kansas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"kansas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"kansas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "kansas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"show major cities in kansas",
    "question_toks":[
      "show",
      "major",
      "cities",
      "in",
      "kansas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"kansas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"kansas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "kansas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the names of the major cities in kansas",
    "question_toks":[
      "what",
      "are",
      "the",
      "names",
      "of",
      "the",
      "major",
      "cities",
      "in",
      "kansas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"kansas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"kansas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "kansas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the major cities of kansas",
    "question_toks":[
      "what",
      "are",
      "the",
      "major",
      "cities",
      "of",
      "kansas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"kansas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"kansas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "kansas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the major cities in kansas",
    "question_toks":[
      "what",
      "is",
      "the",
      "major",
      "cities",
      "in",
      "kansas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"kansas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"kansas\"\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      ">",
      "750",
      "AND",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "length",
      ">",
      "value",
      "and",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the major cities in states through which the mississippi runs",
    "question_toks":[
      "what",
      "are",
      "the",
      "major",
      "cities",
      "in",
      "states",
      "through",
      "which",
      "the",
      "mississippi",
      "runs"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          8,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                3,
                [
                  0,
                  [
                    0,
                    27,
                    false
                  ],
                  null
                ],
                750.0,
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && state_name IN (SELECT traverse FROM river WHERE LENGTH > 750 AND river_name = \"mississippi\")).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE population  >  150000;",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value"
    ],
    "question":"what are the major cities in the usa",
    "question_toks":[
      "what",
      "are",
      "the",
      "major",
      "cities",
      "in",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE population  >  150000;",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value"
    ],
    "question":"what are the major cities of the united states",
    "question_toks":[
      "what",
      "are",
      "the",
      "major",
      "cities",
      "of",
      "the",
      "united",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE population  >  150000;",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value"
    ],
    "question":"what are the major cities of the us",
    "question_toks":[
      "what",
      "are",
      "the",
      "major",
      "cities",
      "of",
      "the",
      "us"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT density FROM state;",
    "query_toks":[
      "SELECT",
      "density",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "density",
      "from",
      "state"
    ],
    "question":"what are the population densities of each us state",
    "question_toks":[
      "what",
      "are",
      "the",
      "population",
      "densities",
      "of",
      "each",
      "us",
      "state"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.select(col(\"density\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the populations of states through which the mississippi river run",
    "question_toks":[
      "what",
      "are",
      "the",
      "populations",
      "of",
      "states",
      "through",
      "which",
      "the",
      "mississippi",
      "river",
      "run"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the populations of states through which the mississippi runs",
    "question_toks":[
      "what",
      "are",
      "the",
      "populations",
      "of",
      "states",
      "through",
      "which",
      "the",
      "mississippi",
      "runs"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the populations of the states through which the mississippi runs",
    "question_toks":[
      "what",
      "are",
      "the",
      "populations",
      "of",
      "the",
      "states",
      "through",
      "which",
      "the",
      "mississippi",
      "runs"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the populations of states through which the mississippi river runs",
    "question_toks":[
      "what",
      "are",
      "the",
      "populations",
      "of",
      "states",
      "through",
      "which",
      "the",
      "mississippi",
      "river",
      "runs"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the populations of the states through which the mississippi run",
    "question_toks":[
      "what",
      "are",
      "the",
      "populations",
      "of",
      "the",
      "states",
      "through",
      "which",
      "the",
      "mississippi",
      "run"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the populations of the states through which the mississippi river run",
    "question_toks":[
      "what",
      "are",
      "the",
      "populations",
      "of",
      "the",
      "states",
      "through",
      "which",
      "the",
      "mississippi",
      "river",
      "run"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the populations of states through which the mississippi run",
    "question_toks":[
      "what",
      "are",
      "the",
      "populations",
      "of",
      "states",
      "through",
      "which",
      "the",
      "mississippi",
      "run"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the populations of the states through which the mississippi river runs",
    "question_toks":[
      "what",
      "are",
      "the",
      "populations",
      "of",
      "the",
      "states",
      "through",
      "which",
      "the",
      "mississippi",
      "river",
      "runs"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "t2.population",
      "FROM",
      "state",
      "AS",
      "t2",
      "JOIN",
      "border_info",
      "AS",
      "t1",
      "ON",
      "t2.state_name",
      "=",
      "t1.border",
      "WHERE",
      "t1.state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "population",
      "from",
      "state",
      "as",
      "t2",
      "join",
      "border_info",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "state_name",
      "=",
      "t1",
      ".",
      "border",
      "where",
      "t1",
      ".",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the populations of states which border texas",
    "question_toks":[
      "what",
      "are",
      "the",
      "populations",
      "of",
      "states",
      "which",
      "border",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.join(border_info, state(\"state_name\") === border_info(\"border\"), inner).filter(border_info(\"state_name\") === col(\"\"texas\"\")).select(state(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "wisconsin",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the populations of the major cities of wisconsin",
    "question_toks":[
      "what",
      "are",
      "the",
      "populations",
      "of",
      "the",
      "major",
      "cities",
      "of",
      "wisconsin"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"wisconsin\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"wisconsin\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "wisconsin",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"what are the populations of all the major cities in wisconsin",
    "question_toks":[
      "what",
      "are",
      "the",
      "populations",
      "of",
      "all",
      "the",
      "major",
      "cities",
      "in",
      "wisconsin"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"wisconsin\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"wisconsin\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";",
    "query_toks":[
      "SELECT",
      "population",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "wisconsin",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the population of the major cities in wisconsin",
    "question_toks":[
      "what",
      "is",
      "the",
      "population",
      "of",
      "the",
      "major",
      "cities",
      "in",
      "wisconsin"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"wisconsin\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"wisconsin\"\")).select(col(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name  =  t1.state_name WHERE t1.city_name  =  \"durham\";",
    "query_toks":[
      "SELECT",
      "t2.capital",
      "FROM",
      "state",
      "AS",
      "t2",
      "JOIN",
      "city",
      "AS",
      "t1",
      "ON",
      "t2.state_name",
      "=",
      "t1.state_name",
      "WHERE",
      "t1.city_name",
      "=",
      "``",
      "durham",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "capital",
      "from",
      "state",
      "as",
      "t2",
      "join",
      "city",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "state_name",
      "=",
      "t1",
      ".",
      "state_name",
      "where",
      "t1",
      ".",
      "city_name",
      "=",
      "value"
    ],
    "question":"what is the capital of states that have cities named durham",
    "question_toks":[
      "what",
      "is",
      "the",
      "capital",
      "of",
      "states",
      "that",
      "have",
      "cities",
      "named",
      "durham"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"durham\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.join(city, state(\"state_name\") === city(\"state_name\"), inner).filter(city(\"city_name\") === col(\"\"durham\"\")).select(state(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
    "query_toks":[
      "SELECT",
      "capital",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      "=",
      "(",
      "SELECT",
      "MAX",
      "(",
      "LENGTH",
      ")",
      "FROM",
      "river",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "capital",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "length",
      "=",
      "(",
      "select",
      "max",
      "(",
      "length",
      ")",
      "from",
      "river",
      ")",
      ")"
    ],
    "question":"what is the capital of the state with the longest river",
    "question_toks":[
      "what",
      "is",
      "the",
      "capital",
      "of",
      "the",
      "state",
      "with",
      "the",
      "longest",
      "river"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    27,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        6
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        1,
                        [
                          0,
                          [
                            0,
                            27,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT traverse FROM river WHERE LENGTH = (SELECT MAX(LENGTH) FROM river))).select(col(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT SUM ( area ) FROM state;",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "area",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "area",
      ")",
      "from",
      "state"
    ],
    "question":"what is the combined area of all 50 states",
    "question_toks":[
      "what",
      "is",
      "the",
      "combined",
      "area",
      "of",
      "all",
      "50",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(SUM(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT SUM ( area ) FROM state;",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "area",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "area",
      ")",
      "from",
      "state"
    ],
    "question":"what is the area of all the states combined",
    "question_toks":[
      "what",
      "is",
      "the",
      "area",
      "of",
      "all",
      "the",
      "states",
      "combined"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(SUM(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT SUM ( area ) FROM state;",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "area",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "area",
      ")",
      "from",
      "state"
    ],
    "question":"how many square kilometers in the us",
    "question_toks":[
      "how",
      "many",
      "square",
      "kilometers",
      "in",
      "the",
      "us"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(SUM(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT SUM ( area ) FROM state;",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "area",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "area",
      ")",
      "from",
      "state"
    ],
    "question":"what is the total area of the usa",
    "question_toks":[
      "what",
      "is",
      "the",
      "total",
      "area",
      "of",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(SUM(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT density FROM state WHERE state_name  =  \"wyoming\";",
    "query_toks":[
      "SELECT",
      "density",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "wyoming",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "density",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the density of the wyoming",
    "question_toks":[
      "what",
      "is",
      "the",
      "density",
      "of",
      "the",
      "wyoming"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"wyoming\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"wyoming\"\")).select(col(\"density\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT density FROM state WHERE state_name  =  \"wyoming\";",
    "query_toks":[
      "SELECT",
      "density",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "wyoming",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "density",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the population density of wyoming",
    "question_toks":[
      "what",
      "is",
      "the",
      "population",
      "density",
      "of",
      "wyoming"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"wyoming\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"wyoming\"\")).select(col(\"density\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT density FROM state WHERE state_name  =  \"wyoming\";",
    "query_toks":[
      "SELECT",
      "density",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "wyoming",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "density",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the density of wyoming",
    "question_toks":[
      "what",
      "is",
      "the",
      "density",
      "of",
      "wyoming"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"wyoming\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"wyoming\"\")).select(col(\"density\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "capital",
      "=",
      "``",
      "des",
      "moines",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "capital",
      "=",
      "value",
      ")"
    ],
    "question":"what is the highest point in the state with capital des moines",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "the",
      "state",
      "with",
      "capital",
      "des",
      "moines"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    5,
                    false
                  ],
                  null
                ],
                "\"des moines\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(state_name IN (SELECT state_name FROM state WHERE capital = \"des moines\")).select(col(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "capital",
      "=",
      "``",
      "des",
      "moines",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "capital",
      "=",
      "value",
      ")"
    ],
    "question":"what is the highest point in the state with the capital des moines",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "the",
      "state",
      "with",
      "the",
      "capital",
      "des",
      "moines"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    5,
                    false
                  ],
                  null
                ],
                "\"des moines\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(state_name IN (SELECT state_name FROM state WHERE capital = \"des moines\")).select(col(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) );",
    "query_toks":[
      "SELECT",
      "highest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "density",
      "=",
      "(",
      "SELECT",
      "MIN",
      "(",
      "density",
      ")",
      "FROM",
      "state",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "density",
      "=",
      "(",
      "select",
      "min",
      "(",
      "density",
      ")",
      "from",
      "state",
      ")",
      ")"
    ],
    "question":"what is the highest point of the state with the smallest population density",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "point",
      "of",
      "the",
      "state",
      "with",
      "the",
      "smallest",
      "population",
      "density"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    6,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        2,
                        [
                          0,
                          [
                            0,
                            6,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(state_name IN (SELECT state_name FROM state WHERE density = (SELECT MIN(density) FROM state))).select(col(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) AND area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) ) ORDER BY population DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      "AND",
      "area",
      "=",
      "(",
      "SELECT",
      "MIN",
      "(",
      "area",
      ")",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ")",
      ")",
      "ORDER",
      "BY",
      "population",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")",
      "and",
      "area",
      "=",
      "(",
      "select",
      "min",
      "(",
      "area",
      ")",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")",
      ")",
      ")",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question":"what is the largest city in smallest state through which the mississippi runs",
    "question_toks":[
      "what",
      "is",
      "the",
      "largest",
      "city",
      "in",
      "smallest",
      "state",
      "through",
      "which",
      "the",
      "mississippi",
      "runs"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                8,
                [
                  0,
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        6
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        0,
                        [
                          0,
                          [
                            0,
                            29,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          26,
                          false
                        ],
                        null
                      ],
                      "\"mississippi\"",
                      null
                    ]
                  ]
                },
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        2,
                        [
                          0,
                          [
                            0,
                            3,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    [
                      false,
                      8,
                      [
                        0,
                        [
                          0,
                          1,
                          false
                        ],
                        null
                      ],
                      {
                        "except":null,
                        "from":{
                          "conds":[
                            
                          ],
                          "table_units":[
                            [
                              "table_unit",
                              6
                            ]
                          ]
                        },
                        "groupBy":[
                          
                        ],
                        "having":[
                          
                        ],
                        "intersect":null,
                        "limit":null,
                        "orderBy":[
                          
                        ],
                        "select":[
                          false,
                          [
                            [
                              0,
                              [
                                0,
                                [
                                  0,
                                  29,
                                  false
                                ],
                                null
                              ]
                            ]
                          ]
                        ],
                        "union":null,
                        "where":[
                          [
                            false,
                            2,
                            [
                              0,
                              [
                                0,
                                26,
                                false
                              ],
                              null
                            ],
                            "\"mississippi\"",
                            null
                          ]
                        ]
                      },
                      null
                    ]
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(state_name IN (SELECT state_name FROM state WHERE state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\") AND area = (SELECT MIN(area) FROM state WHERE state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")))).select(col(\"city_name\")).orderBy(desc(\"population\")).limit(1)"
  },
  {
    "db_id":"geo",
    "query":"SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
    "query_toks":[
      "SELECT",
      "lowest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "iowa",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lowest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the lowest point in iowa",
    "question_toks":[
      "what",
      "is",
      "the",
      "lowest",
      "point",
      "in",
      "iowa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"iowa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"iowa\"\")).select(col(\"lowest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
    "query_toks":[
      "SELECT",
      "lowest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "iowa",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lowest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the lowest point in iowa in meters",
    "question_toks":[
      "what",
      "is",
      "the",
      "lowest",
      "point",
      "in",
      "iowa",
      "in",
      "meters"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"iowa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"iowa\"\")).select(col(\"lowest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
    "query_toks":[
      "SELECT",
      "lowest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "iowa",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lowest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the lowest point in the state of iowa",
    "question_toks":[
      "what",
      "is",
      "the",
      "lowest",
      "point",
      "in",
      "the",
      "state",
      "of",
      "iowa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"iowa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"iowa\"\")).select(col(\"lowest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
    "query_toks":[
      "SELECT",
      "lowest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "iowa",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lowest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"where is the lowest point in iowa",
    "question_toks":[
      "where",
      "is",
      "the",
      "lowest",
      "point",
      "in",
      "iowa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"iowa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"iowa\"\")).select(col(\"lowest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
    "query_toks":[
      "SELECT",
      "lowest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "iowa",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lowest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the lowest point of iowa",
    "question_toks":[
      "what",
      "is",
      "the",
      "lowest",
      "point",
      "of",
      "iowa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"iowa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"iowa\"\")).select(col(\"lowest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
    "query_toks":[
      "SELECT",
      "lowest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "iowa",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lowest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"where is the lowest spot in iowa",
    "question_toks":[
      "where",
      "is",
      "the",
      "lowest",
      "spot",
      "in",
      "iowa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"iowa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"iowa\"\")).select(col(\"lowest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
    "query_toks":[
      "SELECT",
      "lowest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      "ORDER",
      "BY",
      "lowest_elevation",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lowest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")",
      "order",
      "by",
      "lowest_elevation",
      "limit",
      "value"
    ],
    "question":"what is the lowest point of all states through which the mississippi river runs through",
    "question_toks":[
      "what",
      "is",
      "the",
      "lowest",
      "point",
      "of",
      "all",
      "states",
      "through",
      "which",
      "the",
      "mississippi",
      "river",
      "runs",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"lowest_point\")).orderBy(col(\"lowest_elevation\")).limit(1)"
  },
  {
    "db_id":"geo",
    "query":"SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
    "query_toks":[
      "SELECT",
      "lowest_point",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      "ORDER",
      "BY",
      "lowest_elevation",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lowest_point",
      "from",
      "highlow",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")",
      "order",
      "by",
      "lowest_elevation",
      "limit",
      "value"
    ],
    "question":"which is the lowest point of the states that the mississippi runs through",
    "question_toks":[
      "which",
      "is",
      "the",
      "lowest",
      "point",
      "of",
      "the",
      "states",
      "that",
      "the",
      "mississippi",
      "runs",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"lowest_point\")).orderBy(col(\"lowest_elevation\")).limit(1)"
  },
  {
    "db_id":"geo",
    "query":"SELECT SUM ( LENGTH ) FROM river;",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "LENGTH",
      ")",
      "FROM",
      "river",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "length",
      ")",
      "from",
      "river"
    ],
    "question":"what is the total length of all rivers in the usa",
    "question_toks":[
      "what",
      "is",
      "the",
      "total",
      "length",
      "of",
      "all",
      "rivers",
      "in",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"river.agg(SUM(\"LENGTH\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "alabama",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")"
    ],
    "question":"what rivers are in states that border alabama",
    "question_toks":[
      "what",
      "rivers",
      "are",
      "in",
      "states",
      "that",
      "border",
      "alabama"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"alabama\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse IN (SELECT border FROM border_info WHERE state_name = \"alabama\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "alabama",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")"
    ],
    "question":"which rivers run through states bordering alabama",
    "question_toks":[
      "which",
      "rivers",
      "run",
      "through",
      "states",
      "bordering",
      "alabama"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"alabama\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse IN (SELECT border FROM border_info WHERE state_name = \"alabama\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "alabama",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")"
    ],
    "question":"what rivers flow through states that alabama borders",
    "question_toks":[
      "what",
      "rivers",
      "flow",
      "through",
      "states",
      "that",
      "alabama",
      "borders"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"alabama\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse IN (SELECT border FROM border_info WHERE state_name = \"alabama\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "oklahoma",
      "''",
      ")",
      "ORDER",
      "BY",
      "population",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question":"what state bordering oklahoma has the largest population",
    "question_toks":[
      "what",
      "state",
      "bordering",
      "oklahoma",
      "has",
      "the",
      "largest",
      "population"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"oklahoma\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT border FROM border_info WHERE state_name = \"oklahoma\")).select(col(\"state_name\")).orderBy(desc(\"population\")).limit(1)"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "oklahoma",
      "''",
      ")",
      "ORDER",
      "BY",
      "population",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question":"which of the states bordering oklahoma has the largest population",
    "question_toks":[
      "which",
      "of",
      "the",
      "states",
      "bordering",
      "oklahoma",
      "has",
      "the",
      "largest",
      "population"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"oklahoma\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT border FROM border_info WHERE state_name = \"oklahoma\")).select(col(\"state_name\")).orderBy(desc(\"population\")).limit(1)"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "oklahoma",
      "''",
      ")",
      "ORDER",
      "BY",
      "population",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question":"what state that borders oklahoma has the highest population",
    "question_toks":[
      "what",
      "state",
      "that",
      "borders",
      "oklahoma",
      "has",
      "the",
      "highest",
      "population"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"oklahoma\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT border FROM border_info WHERE state_name = \"oklahoma\")).select(col(\"state_name\")).orderBy(desc(\"population\")).limit(1)"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "oklahoma",
      "''",
      ")",
      "ORDER",
      "BY",
      "population",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question":"what is the most populated state bordering oklahoma",
    "question_toks":[
      "what",
      "is",
      "the",
      "most",
      "populated",
      "state",
      "bordering",
      "oklahoma"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"oklahoma\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT border FROM border_info WHERE state_name = \"oklahoma\")).select(col(\"state_name\")).orderBy(desc(\"population\")).limit(1)"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "colorado",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")"
    ],
    "question":"what states border states that border colorado",
    "question_toks":[
      "what",
      "states",
      "border",
      "states",
      "that",
      "border",
      "colorado"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"colorado\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(state_name IN (SELECT border FROM border_info WHERE state_name = \"colorado\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"what states border states that the mississippi runs through",
    "question_toks":[
      "what",
      "states",
      "border",
      "states",
      "that",
      "the",
      "mississippi",
      "runs",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"which states border states through which the mississippi traverses",
    "question_toks":[
      "which",
      "states",
      "border",
      "states",
      "through",
      "which",
      "the",
      "mississippi",
      "traverses"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"what states border states which the mississippi runs through",
    "question_toks":[
      "what",
      "states",
      "border",
      "states",
      "which",
      "the",
      "mississippi",
      "runs",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "border_info",
      "WHERE",
      "border",
      "=",
      "``",
      "texas",
      "''",
      "AND",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      ">",
      "750",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "border_info",
      "where",
      "border",
      "=",
      "value",
      "and",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "length",
      ">",
      "value",
      ")"
    ],
    "question":"what states border texas and have a major river",
    "question_toks":[
      "what",
      "states",
      "border",
      "texas",
      "and",
      "have",
      "a",
      "major",
      "river"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ],
        "and",
        [
          false,
          8,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                3,
                [
                  0,
                  [
                    0,
                    27,
                    false
                  ],
                  null
                ],
                750.0,
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(col(\"border\") === col(\"\"texas\"\") && state_name IN (SELECT traverse FROM river WHERE LENGTH > 750)).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river WHERE LENGTH  >  750;",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      ">",
      "750",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "length",
      ">",
      "value"
    ],
    "question":"what states contain at least one major rivers",
    "question_toks":[
      "what",
      "states",
      "contain",
      "at",
      "least",
      "one",
      "major",
      "rivers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          750.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"LENGTH\") > 750).select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM mountain;",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "mountain",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "mountain"
    ],
    "question":"where are mountains",
    "question_toks":[
      "where",
      "are",
      "mountains"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"mountain.select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
    "query_toks":[
      "SELECT",
      "density",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      "=",
      "(",
      "SELECT",
      "MAX",
      "(",
      "LENGTH",
      ")",
      "FROM",
      "river",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "density",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "length",
      "=",
      "(",
      "select",
      "max",
      "(",
      "length",
      ")",
      "from",
      "river",
      ")",
      ")"
    ],
    "question":"which is the density of the state that the largest river in the united states runs through",
    "question_toks":[
      "which",
      "is",
      "the",
      "density",
      "of",
      "the",
      "state",
      "that",
      "the",
      "largest",
      "river",
      "in",
      "the",
      "united",
      "states",
      "runs",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    27,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        6
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        1,
                        [
                          0,
                          [
                            0,
                            27,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT traverse FROM river WHERE LENGTH = (SELECT MAX(LENGTH) FROM river))).select(col(\"density\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "tennessee",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "river_name",
      "not",
      "in",
      "(",
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value",
      ")"
    ],
    "question":"which rivers do not run through tennessee",
    "question_toks":[
      "which",
      "rivers",
      "do",
      "not",
      "run",
      "through",
      "tennessee"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          true,
          8,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    29,
                    false
                  ],
                  null
                ],
                "\"tennessee\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(river_name NOT IN (SELECT river_name FROM river WHERE traverse = \"tennessee\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "=",
      "``",
      "tennessee",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "river_name",
      "not",
      "in",
      "(",
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "=",
      "value",
      ")"
    ],
    "question":"what rivers do not run through tennessee",
    "question_toks":[
      "what",
      "rivers",
      "do",
      "not",
      "run",
      "through",
      "tennessee"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          true,
          8,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    29,
                    false
                  ],
                  null
                ],
                "\"tennessee\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(river_name NOT IN (SELECT river_name FROM river WHERE traverse = \"tennessee\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE country_name != \"usa\";",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "country_name",
      "!",
      "=",
      "``",
      "usa",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "country_name",
      "!",
      "=",
      "value"
    ],
    "question":"which rivers do not run through usa",
    "question_toks":[
      "which",
      "rivers",
      "do",
      "not",
      "run",
      "through",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ],
          "\"usa\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"country_name\") =!= col(\"\"usa\"\")).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "capital",
      "=",
      "``",
      "atlanta",
      "''",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "capital",
      "=",
      "value",
      ")",
      ")"
    ],
    "question":"which rivers run through states that border the state with the capital atlanta",
    "question_toks":[
      "which",
      "rivers",
      "run",
      "through",
      "states",
      "that",
      "border",
      "the",
      "state",
      "with",
      "the",
      "capital",
      "atlanta"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                8,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        0,
                        [
                          0,
                          [
                            0,
                            1,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          5,
                          false
                        ],
                        null
                      ],
                      "\"atlanta\"",
                      null
                    ]
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse IN (SELECT border FROM border_info WHERE state_name IN (SELECT state_name FROM state WHERE capital = \"atlanta\"))).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "capital",
      "=",
      "``",
      "atlanta",
      "''",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "capital",
      "=",
      "value",
      ")",
      ")"
    ],
    "question":"what rivers run through the states that border the state with the capital atlanta",
    "question_toks":[
      "what",
      "rivers",
      "run",
      "through",
      "the",
      "states",
      "that",
      "border",
      "the",
      "state",
      "with",
      "the",
      "capital",
      "atlanta"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                8,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        0,
                        [
                          0,
                          [
                            0,
                            1,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          5,
                          false
                        ],
                        null
                      ],
                      "\"atlanta\"",
                      null
                    ]
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse IN (SELECT border FROM border_info WHERE state_name IN (SELECT state_name FROM state WHERE capital = \"atlanta\"))).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "mountain",
      "WHERE",
      "mountain_name",
      "=",
      "``",
      "whitney",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "mountain",
      "where",
      "mountain_name",
      "=",
      "value"
    ],
    "question":"which state is mount whitney in",
    "question_toks":[
      "which",
      "state",
      "is",
      "mount",
      "whitney",
      "in"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"whitney\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"mountain.filter(col(\"mountain_name\") === col(\"\"whitney\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "mountain",
      "WHERE",
      "mountain_name",
      "=",
      "``",
      "whitney",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "mountain",
      "where",
      "mountain_name",
      "=",
      "value"
    ],
    "question":"in what state is mount whitney",
    "question_toks":[
      "in",
      "what",
      "state",
      "is",
      "mount",
      "whitney"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"whitney\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"mountain.filter(col(\"mountain_name\") === col(\"\"whitney\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "mountain",
      "WHERE",
      "mountain_name",
      "=",
      "``",
      "whitney",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "mountain",
      "where",
      "mountain_name",
      "=",
      "value"
    ],
    "question":"where is mount whitney",
    "question_toks":[
      "where",
      "is",
      "mount",
      "whitney"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"whitney\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"mountain.filter(col(\"mountain_name\") === col(\"\"whitney\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "mountain",
      "WHERE",
      "mountain_name",
      "=",
      "``",
      "whitney",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "mountain",
      "where",
      "mountain_name",
      "=",
      "value"
    ],
    "question":"where is mount whitney located",
    "question_toks":[
      "where",
      "is",
      "mount",
      "whitney",
      "located"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"whitney\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"mountain.filter(col(\"mountain_name\") === col(\"\"whitney\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river;",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river"
    ],
    "question":"which states have a river",
    "question_toks":[
      "which",
      "states",
      "have",
      "a",
      "river"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"river.select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT traverse FROM river;",
    "query_toks":[
      "SELECT",
      "traverse",
      "FROM",
      "river",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "traverse",
      "from",
      "river"
    ],
    "question":"what states have rivers running through them",
    "question_toks":[
      "what",
      "states",
      "have",
      "rivers",
      "running",
      "through",
      "them"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"river.select(col(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM city WHERE city_name  =  \"austin\" AND population  >  150000;",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "austin",
      "''",
      "AND",
      "population",
      ">",
      "150000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value",
      "and",
      "population",
      ">",
      "value"
    ],
    "question":"which states have a major city named austin",
    "question_toks":[
      "which",
      "states",
      "have",
      "a",
      "major",
      "city",
      "named",
      "austin"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"austin\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"austin\"\") && col(\"population\") > 150000).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  \"albany\" );",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "capital",
      "=",
      "``",
      "albany",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river",
      "where",
      "traverse",
      "not",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "capital",
      "=",
      "value",
      ")"
    ],
    "question":"how many rivers do not traverse the state with the capital albany",
    "question_toks":[
      "how",
      "many",
      "rivers",
      "do",
      "not",
      "traverse",
      "the",
      "state",
      "with",
      "the",
      "capital",
      "albany"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          true,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    5,
                    false
                  ],
                  null
                ],
                "\"albany\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse NOT IN (SELECT state_name FROM state WHERE capital = \"albany\")).agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );",
    "query_toks":[
      "SELECT",
      "capital",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "capital",
      "from",
      "state",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")",
      ")"
    ],
    "question":"what is the capital of the state that borders the state that borders texas",
    "question_toks":[
      "what",
      "is",
      "the",
      "capital",
      "of",
      "the",
      "state",
      "that",
      "borders",
      "the",
      "state",
      "that",
      "borders",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                8,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        2
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        0,
                        [
                          0,
                          [
                            0,
                            12,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          11,
                          false
                        ],
                        null
                      ],
                      "\"texas\"",
                      null
                    ]
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name IN (SELECT border FROM border_info WHERE state_name IN (SELECT border FROM border_info WHERE state_name = \"texas\"))).select(col(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE capital  =  \"salem\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "capital",
      "=",
      "``",
      "salem",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "capital",
      "=",
      "value"
    ],
    "question":"what state is salem the capital of",
    "question_toks":[
      "what",
      "state",
      "is",
      "salem",
      "the",
      "capital",
      "of"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"salem\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"capital\") === col(\"\"salem\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE capital  =  \"salem\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "capital",
      "=",
      "``",
      "salem",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "capital",
      "=",
      "value"
    ],
    "question":"what states capital is salem",
    "question_toks":[
      "what",
      "states",
      "capital",
      "is",
      "salem"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"salem\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"capital\") === col(\"\"salem\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE capital  =  \"salem\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "capital",
      "=",
      "``",
      "salem",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "capital",
      "=",
      "value"
    ],
    "question":"salem is the capital of which state",
    "question_toks":[
      "salem",
      "is",
      "the",
      "capital",
      "of",
      "which",
      "state"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"salem\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"capital\") === col(\"\"salem\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE capital  =  \"salem\";",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "capital",
      "=",
      "``",
      "salem",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "capital",
      "=",
      "value"
    ],
    "question":"what state has the capital salem",
    "question_toks":[
      "what",
      "state",
      "has",
      "the",
      "capital",
      "salem"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"salem\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"capital\") === col(\"\"salem\"\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "population",
      "=",
      "(",
      "SELECT",
      "MAX",
      "(",
      "population",
      ")",
      "FROM",
      "state",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "population",
      "=",
      "(",
      "select",
      "max",
      "(",
      "population",
      ")",
      "from",
      "state",
      ")",
      ")"
    ],
    "question":"what rivers flow through the state with the largest population",
    "question_toks":[
      "what",
      "rivers",
      "flow",
      "through",
      "the",
      "state",
      "with",
      "the",
      "largest",
      "population"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    2,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        1,
                        [
                          0,
                          [
                            0,
                            2,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse IN (SELECT state_name FROM state WHERE population = (SELECT MAX(population) FROM state))).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river"
    ],
    "question":"how many rivers are there in us",
    "question_toks":[
      "how",
      "many",
      "rivers",
      "are",
      "there",
      "in",
      "us"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"river.agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT DISTINCT capital FROM state;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "capital",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "capital",
      "from",
      "state"
    ],
    "question":"name the 50 capitals in the usa",
    "question_toks":[
      "name",
      "the",
      "50",
      "capitals",
      "in",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.select(col(\"capital\")).distinct"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "state_name",
      ")",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "state_name",
      ")",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"how many states have a city named springfield",
    "question_toks":[
      "how",
      "many",
      "states",
      "have",
      "a",
      "city",
      "named",
      "springfield"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).agg(COUNT(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "state_name",
      ")",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "state_name",
      ")",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"how many states have a city called springfield",
    "question_toks":[
      "how",
      "many",
      "states",
      "have",
      "a",
      "city",
      "called",
      "springfield"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).agg(COUNT(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "state_name",
      ")",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "state_name",
      ")",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"how many states have cities named springfield",
    "question_toks":[
      "how",
      "many",
      "states",
      "have",
      "cities",
      "named",
      "springfield"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).agg(COUNT(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "state_name",
      ")",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "springfield",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "state_name",
      ")",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"how many states have cities or towns named springfield",
    "question_toks":[
      "how",
      "many",
      "states",
      "have",
      "cities",
      "or",
      "towns",
      "named",
      "springfield"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"springfield\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"springfield\"\")).agg(COUNT(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "population",
      "=",
      "(",
      "SELECT",
      "MIN",
      "(",
      "population",
      ")",
      "FROM",
      "state",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "population",
      "=",
      "(",
      "select",
      "min",
      "(",
      "population",
      ")",
      "from",
      "state",
      ")",
      ")"
    ],
    "question":"what state borders the state with the smallest population",
    "question_toks":[
      "what",
      "state",
      "borders",
      "the",
      "state",
      "with",
      "the",
      "smallest",
      "population"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    2,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        2,
                        [
                          0,
                          [
                            0,
                            2,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(state_name IN (SELECT state_name FROM state WHERE population = (SELECT MIN(population) FROM state))).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
    "query_toks":[
      "SELECT",
      "lake_name",
      "FROM",
      "lake",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lake_name",
      "from",
      "lake",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")"
    ],
    "question":"what are the lakes in states bordering texas",
    "question_toks":[
      "what",
      "are",
      "the",
      "lakes",
      "in",
      "states",
      "bordering",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"texas\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"lake.filter(state_name IN (SELECT border FROM border_info WHERE state_name = \"texas\")).select(col(\"lake_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many major cities are in texas",
    "question_toks":[
      "how",
      "many",
      "major",
      "cities",
      "are",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"texas\"\")).agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many big cities are in texas",
    "question_toks":[
      "how",
      "many",
      "big",
      "cities",
      "are",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"texas\"\")).agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many major cities are there in texas",
    "question_toks":[
      "how",
      "many",
      "major",
      "cities",
      "are",
      "there",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && col(\"state_name\") === col(\"\"texas\"\")).agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT highest_elevation FROM highlow;",
    "query_toks":[
      "SELECT",
      "highest_elevation",
      "FROM",
      "highlow",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "highest_elevation",
      "from",
      "highlow"
    ],
    "question":"how high are the highest points of all the states",
    "question_toks":[
      "how",
      "high",
      "are",
      "the",
      "highest",
      "points",
      "of",
      "all",
      "the",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"highlow.select(col(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "traverse",
      ")",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "missouri",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "traverse",
      ")",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"how many states does the missouri run through",
    "question_toks":[
      "how",
      "many",
      "states",
      "does",
      "the",
      "missouri",
      "run",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"missouri\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"missouri\"\")).agg(COUNT(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "traverse",
      ")",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "missouri",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "traverse",
      ")",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"how many states does the missouri river flow through",
    "question_toks":[
      "how",
      "many",
      "states",
      "does",
      "the",
      "missouri",
      "river",
      "flow",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"missouri\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"missouri\"\")).agg(COUNT(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "traverse",
      ")",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "missouri",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "traverse",
      ")",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value"
    ],
    "question":"how many states does the missouri river run through",
    "question_toks":[
      "how",
      "many",
      "states",
      "does",
      "the",
      "missouri",
      "river",
      "run",
      "through"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"missouri\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"missouri\"\")).agg(COUNT(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT population / area FROM state WHERE state_name  =  \"pennsylvania\";",
    "query_toks":[
      "SELECT",
      "population",
      "/",
      "area",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "pennsylvania",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "population",
      "/",
      "area",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the average population per square km in pennsylvania",
    "question_toks":[
      "what",
      "is",
      "the",
      "average",
      "population",
      "per",
      "square",
      "km",
      "in",
      "pennsylvania"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              4,
              [
                0,
                2,
                false
              ],
              [
                0,
                3,
                false
              ]
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"pennsylvania\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"pennsylvania\"\")).select(col(\"population\") / col(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"florida\" ) );",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "florida",
      "''",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")",
      ")"
    ],
    "question":"what states border states that border states that border florida",
    "question_toks":[
      "what",
      "states",
      "border",
      "states",
      "that",
      "border",
      "states",
      "that",
      "border",
      "florida"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                8,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        2
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        0,
                        [
                          0,
                          [
                            0,
                            12,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          11,
                          false
                        ],
                        null
                      ],
                      "\"florida\"",
                      null
                    ]
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(state_name IN (SELECT border FROM border_info WHERE state_name IN (SELECT border FROM border_info WHERE state_name = \"florida\"))).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( DISTINCT state_name ) FROM border_info;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "state_name",
      ")",
      "FROM",
      "border_info",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "state_name",
      ")",
      "from",
      "border_info"
    ],
    "question":"how many states border at least one other state",
    "question_toks":[
      "how",
      "many",
      "states",
      "border",
      "at",
      "least",
      "one",
      "other",
      "state"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"border_info.agg(COUNT(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT MAX ( DISTINCT highest_elevation ) FROM highlow WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "MAX",
      "(",
      "DISTINCT",
      "highest_elevation",
      ")",
      "FROM",
      "highlow",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "distinct",
      "highest_elevation",
      ")",
      "from",
      "highlow",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the height of the highest mountain in texas",
    "question_toks":[
      "what",
      "is",
      "the",
      "height",
      "of",
      "the",
      "highest",
      "mountain",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"state_name\") === col(\"\"texas\"\")).agg(MAX(\"highest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "border",
      ")",
      "FROM",
      "border_info",
      "WHERE",
      "border",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "new",
      "mexico",
      "''",
      ")",
      "AND",
      "state_name",
      "=",
      "``",
      "colorado",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "border",
      ")",
      "from",
      "border_info",
      "where",
      "border",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")",
      "and",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many states border colorado and border new mexico",
    "question_toks":[
      "how",
      "many",
      "states",
      "border",
      "colorado",
      "and",
      "border",
      "new",
      "mexico"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"new mexico\"",
                null
              ]
            ]
          },
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"colorado\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(border IN (SELECT border FROM border_info WHERE state_name = \"new mexico\") && col(\"state_name\") === col(\"\"colorado\"\")).agg(COUNT(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"nebraska\" );",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "nebraska",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")"
    ],
    "question":"how many major cities are in states bordering nebraska",
    "question_toks":[
      "how",
      "many",
      "major",
      "cities",
      "are",
      "in",
      "states",
      "bordering",
      "nebraska"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          8,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"nebraska\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && state_name IN (SELECT border FROM border_info WHERE state_name = \"nebraska\")).agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t2.population",
      ")",
      "FROM",
      "state",
      "AS",
      "t2",
      "JOIN",
      "border_info",
      "AS",
      "t1",
      "ON",
      "t2.state_name",
      "=",
      "t1.border",
      "WHERE",
      "t1.state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t2",
      ".",
      "population",
      ")",
      "from",
      "state",
      "as",
      "t2",
      "join",
      "border_info",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "state_name",
      "=",
      "t1",
      ".",
      "border",
      "where",
      "t1",
      ".",
      "state_name",
      "=",
      "value"
    ],
    "question":"what is the total population of the states that border texas",
    "question_toks":[
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "the",
      "states",
      "that",
      "border",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.join(border_info, state(\"state_name\") === border_info(\"border\"), inner).filter(border_info(\"state_name\") === col(\"\"texas\"\")).agg(SUM(state(\"population\")))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lake_name FROM lake WHERE area  >  750;",
    "query_toks":[
      "SELECT",
      "lake_name",
      "FROM",
      "lake",
      "WHERE",
      "area",
      ">",
      "750",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lake_name",
      "from",
      "lake",
      "where",
      "area",
      ">",
      "value"
    ],
    "question":"what are the major lakes in united states",
    "question_toks":[
      "what",
      "are",
      "the",
      "major",
      "lakes",
      "in",
      "united",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          750.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"lake.filter(col(\"area\") > 750).select(col(\"lake_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lake_name FROM lake WHERE area  >  750;",
    "query_toks":[
      "SELECT",
      "lake_name",
      "FROM",
      "lake",
      "WHERE",
      "area",
      ">",
      "750",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lake_name",
      "from",
      "lake",
      "where",
      "area",
      ">",
      "value"
    ],
    "question":"show me all the major lakes in the us",
    "question_toks":[
      "show",
      "me",
      "all",
      "the",
      "major",
      "lakes",
      "in",
      "the",
      "us"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          750.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"lake.filter(col(\"area\") > 750).select(col(\"lake_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lake_name FROM lake;",
    "query_toks":[
      "SELECT",
      "lake_name",
      "FROM",
      "lake",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lake_name",
      "from",
      "lake"
    ],
    "question":"name all the lakes of us",
    "question_toks":[
      "name",
      "all",
      "the",
      "lakes",
      "of",
      "us"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"lake.select(col(\"lake_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river WHERE LENGTH  >  750 AND traverse  =  \"ohio\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      ">",
      "750",
      "AND",
      "traverse",
      "=",
      "``",
      "ohio",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river",
      "where",
      "length",
      ">",
      "value",
      "and",
      "traverse",
      "=",
      "value"
    ],
    "question":"how many major rivers cross ohio",
    "question_toks":[
      "how",
      "many",
      "major",
      "rivers",
      "cross",
      "ohio"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          750.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"ohio\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"LENGTH\") > 750 && col(\"traverse\") === col(\"\"ohio\"\")).agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  >  750;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "traverse",
      ")",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      ">",
      "750",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "traverse",
      ")",
      "from",
      "river",
      "where",
      "length",
      ">",
      "value"
    ],
    "question":"how many states are next to major rivers",
    "question_toks":[
      "how",
      "many",
      "states",
      "are",
      "next",
      "to",
      "major",
      "rivers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          750.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"LENGTH\") > 750).agg(COUNT(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT mountain_altitude FROM mountain WHERE mountain_name  =  \"mckinley\";",
    "query_toks":[
      "SELECT",
      "mountain_altitude",
      "FROM",
      "mountain",
      "WHERE",
      "mountain_name",
      "=",
      "``",
      "mckinley",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "mountain_altitude",
      "from",
      "mountain",
      "where",
      "mountain_name",
      "=",
      "value"
    ],
    "question":"what is the height of mount mckinley",
    "question_toks":[
      "what",
      "is",
      "the",
      "height",
      "of",
      "mount",
      "mckinley"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"mckinley\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"mountain.filter(col(\"mountain_name\") === col(\"\"mckinley\"\")).select(col(\"mountain_altitude\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );",
    "query_toks":[
      "SELECT",
      "t2.highest_point",
      "FROM",
      "state",
      "AS",
      "t1",
      "JOIN",
      "highlow",
      "AS",
      "t2",
      "ON",
      "t1.state_name",
      "=",
      "t2.state_name",
      "WHERE",
      "t1.state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "population",
      "=",
      "(",
      "SELECT",
      "MIN",
      "(",
      "population",
      ")",
      "FROM",
      "state",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "highest_point",
      "from",
      "state",
      "as",
      "t1",
      "join",
      "highlow",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "state_name",
      "=",
      "t2",
      ".",
      "state_name",
      "where",
      "t1",
      ".",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "population",
      "=",
      "(",
      "select",
      "min",
      "(",
      "population",
      ")",
      "from",
      "state",
      ")",
      ")"
    ],
    "question":"what is the highest point in the state with the smallest population",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "the",
      "state",
      "with",
      "the",
      "smallest",
      "population"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    2,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        2,
                        [
                          0,
                          [
                            0,
                            2,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.join(highlow, state(\"state_name\") === highlow(\"state_name\"), inner).filter(t1.state_name IN (SELECT state_name FROM state WHERE population = (SELECT MIN(population) FROM state))).select(highlow(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "highlow",
      "WHERE",
      "lowest_elevation",
      "=",
      "(",
      "SELECT",
      "MIN",
      "(",
      "lowest_elevation",
      ")",
      "FROM",
      "highlow",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "highlow",
      "where",
      "lowest_elevation",
      "=",
      "(",
      "select",
      "min",
      "(",
      "lowest_elevation",
      ")",
      "from",
      "highlow",
      ")",
      ")"
    ],
    "question":"which rivers run through the state with the lowest elevation in the usa",
    "question_toks":[
      "which",
      "rivers",
      "run",
      "through",
      "the",
      "state",
      "with",
      "the",
      "lowest",
      "elevation",
      "in",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  3
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    17,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        3
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        2,
                        [
                          0,
                          [
                            0,
                            17,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse IN (SELECT state_name FROM highlow WHERE lowest_elevation = (SELECT MIN(lowest_elevation) FROM highlow))).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "highlow",
      "WHERE",
      "lowest_elevation",
      "=",
      "(",
      "SELECT",
      "MIN",
      "(",
      "lowest_elevation",
      ")",
      "FROM",
      "highlow",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "highlow",
      "where",
      "lowest_elevation",
      "=",
      "(",
      "select",
      "min",
      "(",
      "lowest_elevation",
      ")",
      "from",
      "highlow",
      ")",
      ")"
    ],
    "question":"what rivers run through the state with the lowest point in the usa",
    "question_toks":[
      "what",
      "rivers",
      "run",
      "through",
      "the",
      "state",
      "with",
      "the",
      "lowest",
      "point",
      "in",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  3
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    17,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        3
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        2,
                        [
                          0,
                          [
                            0,
                            17,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse IN (SELECT state_name FROM highlow WHERE lowest_elevation = (SELECT MIN(lowest_elevation) FROM highlow))).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT mountain_name FROM mountain WHERE state_name  =  \"alaska\";",
    "query_toks":[
      "SELECT",
      "mountain_name",
      "FROM",
      "mountain",
      "WHERE",
      "state_name",
      "=",
      "``",
      "alaska",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "mountain_name",
      "from",
      "mountain",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"what mountains are in alaska",
    "question_toks":[
      "what",
      "mountains",
      "are",
      "in",
      "alaska"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"alaska\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"mountain.filter(col(\"state_name\") === col(\"\"alaska\"\")).select(col(\"mountain_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( traverse ) FROM river WHERE LENGTH  >  750;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "traverse",
      ")",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      ">",
      "750",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "traverse",
      ")",
      "from",
      "river",
      "where",
      "length",
      ">",
      "value"
    ],
    "question":"how many states have major rivers",
    "question_toks":[
      "how",
      "many",
      "states",
      "have",
      "major",
      "rivers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          750.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"LENGTH\") > 750).agg(COUNT(\"traverse\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "river_name",
      ")",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "colorado",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "river_name",
      ")",
      "from",
      "river",
      "where",
      "traverse",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")"
    ],
    "question":"how many rivers run through the states bordering colorado",
    "question_toks":[
      "how",
      "many",
      "rivers",
      "run",
      "through",
      "the",
      "states",
      "bordering",
      "colorado"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"colorado\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse IN (SELECT border FROM border_info WHERE state_name = \"colorado\")).agg(COUNT(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "state_name",
      "not",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      ")"
    ],
    "question":"what state has no rivers",
    "question_toks":[
      "what",
      "state",
      "has",
      "no",
      "rivers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name NOT IN (SELECT traverse FROM river)).select(col(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many cities are in texas",
    "question_toks":[
      "how",
      "many",
      "cities",
      "are",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"state_name\") === col(\"\"texas\"\")).agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"how many cities does texas have",
    "question_toks":[
      "how",
      "many",
      "cities",
      "does",
      "texas",
      "have"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"state_name\") === col(\"\"texas\"\")).agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT area FROM state;",
    "query_toks":[
      "SELECT",
      "area",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "area",
      "from",
      "state"
    ],
    "question":"what is the area of the states",
    "question_toks":[
      "what",
      "is",
      "the",
      "area",
      "of",
      "the",
      "states"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.select(col(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "population",
      "=",
      "(",
      "SELECT",
      "MAX",
      "(",
      "population",
      ")",
      "FROM",
      "state",
      ")",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "population",
      "=",
      "(",
      "select",
      "max",
      "(",
      "population",
      ")",
      "from",
      "state",
      ")",
      ")",
      ")"
    ],
    "question":"what rivers flow through states that border the state with the largest population",
    "question_toks":[
      "what",
      "rivers",
      "flow",
      "through",
      "states",
      "that",
      "border",
      "the",
      "state",
      "with",
      "the",
      "largest",
      "population"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                8,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        0,
                        [
                          0,
                          [
                            0,
                            1,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          2,
                          false
                        ],
                        null
                      ],
                      {
                        "except":null,
                        "from":{
                          "conds":[
                            
                          ],
                          "table_units":[
                            [
                              "table_unit",
                              0
                            ]
                          ]
                        },
                        "groupBy":[
                          
                        ],
                        "having":[
                          
                        ],
                        "intersect":null,
                        "limit":null,
                        "orderBy":[
                          
                        ],
                        "select":[
                          false,
                          [
                            [
                              1,
                              [
                                0,
                                [
                                  0,
                                  2,
                                  false
                                ],
                                null
                              ]
                            ]
                          ]
                        ],
                        "union":null,
                        "where":[
                          
                        ]
                      },
                      null
                    ]
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse IN (SELECT border FROM border_info WHERE state_name IN (SELECT state_name FROM state WHERE population = (SELECT MAX(population) FROM state)))).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
    "query_toks":[
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      "=",
      "(",
      "SELECT",
      "MAX",
      "(",
      "LENGTH",
      ")",
      "FROM",
      "river",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "length",
      "=",
      "(",
      "select",
      "max",
      "(",
      "length",
      ")",
      "from",
      "river",
      ")",
      ")"
    ],
    "question":"which states border the longest river in the usa",
    "question_toks":[
      "which",
      "states",
      "border",
      "the",
      "longest",
      "river",
      "in",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    27,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        6
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        1,
                        [
                          0,
                          [
                            0,
                            27,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(state_name IN (SELECT traverse FROM river WHERE LENGTH = (SELECT MAX(LENGTH) FROM river))).select(col(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "border",
      ")",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "mississippi",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "border",
      ")",
      "from",
      "border_info",
      "where",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      ")"
    ],
    "question":"how many states border the mississippi river",
    "question_toks":[
      "how",
      "many",
      "states",
      "border",
      "the",
      "mississippi",
      "river"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                "\"mississippi\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.filter(state_name IN (SELECT traverse FROM river WHERE river_name = \"mississippi\")).agg(COUNT(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2 ON t1.capital  =  t2.highest_point;",
    "query_toks":[
      "SELECT",
      "t1.state_name",
      "FROM",
      "state",
      "AS",
      "t1",
      "JOIN",
      "highlow",
      "AS",
      "t2",
      "ON",
      "t1.capital",
      "=",
      "t2.highest_point",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "state_name",
      "from",
      "state",
      "as",
      "t1",
      "join",
      "highlow",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "capital",
      "=",
      "t2",
      ".",
      "highest_point"
    ],
    "question":"what states have a capital that is the highest point in the state",
    "question_toks":[
      "what",
      "states",
      "have",
      "a",
      "capital",
      "that",
      "is",
      "the",
      "highest",
      "point",
      "in",
      "the",
      "state"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.join(highlow, state(\"capital\") === highlow(\"highest_point\"), inner).select(state(\"state_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
    "query_toks":[
      "SELECT",
      "t2.lowest_point",
      "FROM",
      "state",
      "AS",
      "t1",
      "JOIN",
      "highlow",
      "AS",
      "t2",
      "ON",
      "t1.state_name",
      "=",
      "t2.state_name",
      "WHERE",
      "t1.state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "area",
      "=",
      "(",
      "SELECT",
      "MAX",
      "(",
      "area",
      ")",
      "FROM",
      "state",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "lowest_point",
      "from",
      "state",
      "as",
      "t1",
      "join",
      "highlow",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "state_name",
      "=",
      "t2",
      ".",
      "state_name",
      "where",
      "t1",
      ".",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "area",
      "=",
      "(",
      "select",
      "max",
      "(",
      "area",
      ")",
      "from",
      "state",
      ")",
      ")"
    ],
    "question":"what is the lowest point of the state with the largest area",
    "question_toks":[
      "what",
      "is",
      "the",
      "lowest",
      "point",
      "of",
      "the",
      "state",
      "with",
      "the",
      "largest",
      "area"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        1,
                        [
                          0,
                          [
                            0,
                            3,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.join(highlow, state(\"state_name\") === highlow(\"state_name\"), inner).filter(t1.state_name IN (SELECT state_name FROM state WHERE area = (SELECT MAX(area) FROM state))).select(highlow(\"lowest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
    "query_toks":[
      "SELECT",
      "t1.border",
      "FROM",
      "border_info",
      "AS",
      "t2",
      "JOIN",
      "border_info",
      "AS",
      "t1",
      "ON",
      "t2.border",
      "=",
      "t1.state_name",
      "WHERE",
      "t2.state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "population",
      "=",
      "(",
      "SELECT",
      "MAX",
      "(",
      "population",
      ")",
      "FROM",
      "state",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "border",
      "from",
      "border_info",
      "as",
      "t2",
      "join",
      "border_info",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "border",
      "=",
      "t1",
      ".",
      "state_name",
      "where",
      "t2",
      ".",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "population",
      "=",
      "(",
      "select",
      "max",
      "(",
      "population",
      ")",
      "from",
      "state",
      ")",
      ")"
    ],
    "question":"what states border states that border the state with the largest population",
    "question_toks":[
      "what",
      "states",
      "border",
      "states",
      "that",
      "border",
      "the",
      "state",
      "with",
      "the",
      "largest",
      "population"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    2,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        1,
                        [
                          0,
                          [
                            0,
                            2,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.join(border_info, border_info(\"border\") === border_info(\"state_name\"), inner).filter(t2.state_name IN (SELECT state_name FROM state WHERE population = (SELECT MAX(population) FROM state))).select(border_info(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT MAX ( area ) FROM state;",
    "query_toks":[
      "SELECT",
      "MAX",
      "(",
      "area",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "area",
      ")",
      "from",
      "state"
    ],
    "question":"what is the size of the largest state in the usa",
    "question_toks":[
      "what",
      "is",
      "the",
      "size",
      "of",
      "the",
      "largest",
      "state",
      "in",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(MAX(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT MAX ( area ) FROM state;",
    "query_toks":[
      "SELECT",
      "MAX",
      "(",
      "area",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "max",
      "(",
      "area",
      ")",
      "from",
      "state"
    ],
    "question":"what is the area of the largest state",
    "question_toks":[
      "what",
      "is",
      "the",
      "area",
      "of",
      "the",
      "largest",
      "state"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(MAX(\"area\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name WHERE t1.population  <=  150000;",
    "query_toks":[
      "SELECT",
      "t2.capital",
      "FROM",
      "state",
      "AS",
      "t2",
      "JOIN",
      "city",
      "AS",
      "t1",
      "ON",
      "t2.capital",
      "=",
      "t1.city_name",
      "WHERE",
      "t1.population",
      "<",
      "=",
      "150000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "capital",
      "from",
      "state",
      "as",
      "t2",
      "join",
      "city",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "capital",
      "=",
      "t1",
      ".",
      "city_name",
      "where",
      "t1",
      ".",
      "population",
      "<",
      "=",
      "value"
    ],
    "question":"which capitals are not major cities",
    "question_toks":[
      "which",
      "capitals",
      "are",
      "not",
      "major",
      "cities"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          6,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"state.join(city, state(\"capital\") === city(\"city_name\"), inner).filter(city(\"population\") <= 150000).select(state(\"capital\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city;",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city"
    ],
    "question":"give me the cities in usa",
    "question_toks":[
      "give",
      "me",
      "the",
      "cities",
      "in",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"city.select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
    "query_toks":[
      "SELECT",
      "t2.highest_point",
      "FROM",
      "state",
      "AS",
      "t1",
      "JOIN",
      "highlow",
      "AS",
      "t2",
      "ON",
      "t1.state_name",
      "=",
      "t2.state_name",
      "WHERE",
      "t1.state_name",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "area",
      "=",
      "(",
      "SELECT",
      "MAX",
      "(",
      "area",
      ")",
      "FROM",
      "state",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "highest_point",
      "from",
      "state",
      "as",
      "t1",
      "join",
      "highlow",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "state_name",
      "=",
      "t2",
      ".",
      "state_name",
      "where",
      "t1",
      ".",
      "state_name",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "area",
      "=",
      "(",
      "select",
      "max",
      "(",
      "area",
      ")",
      "from",
      "state",
      ")",
      ")"
    ],
    "question":"what is the highest point of the state with the largest area",
    "question_toks":[
      "what",
      "is",
      "the",
      "highest",
      "point",
      "of",
      "the",
      "state",
      "with",
      "the",
      "largest",
      "area"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        1,
                        [
                          0,
                          [
                            0,
                            3,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.join(highlow, state(\"state_name\") === highlow(\"state_name\"), inner).filter(t1.state_name IN (SELECT state_name FROM state WHERE area = (SELECT MAX(area) FROM state))).select(highlow(\"highest_point\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT country_name FROM state WHERE state_name  =  \"massachusetts\";",
    "query_toks":[
      "SELECT",
      "country_name",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "=",
      "``",
      "massachusetts",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "country_name",
      "from",
      "state",
      "where",
      "state_name",
      "=",
      "value"
    ],
    "question":"where is massachusetts",
    "question_toks":[
      "where",
      "is",
      "massachusetts"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"massachusetts\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"state_name\") === col(\"\"massachusetts\"\")).select(col(\"country_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river;",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river"
    ],
    "question":"what are the major rivers in the us",
    "question_toks":[
      "what",
      "are",
      "the",
      "major",
      "rivers",
      "in",
      "the",
      "us"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"river.select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT COUNT ( city_name ) FROM city WHERE city_name  =  \"austin\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "city_name",
      ")",
      "FROM",
      "city",
      "WHERE",
      "city_name",
      "=",
      "``",
      "austin",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "city_name",
      ")",
      "from",
      "city",
      "where",
      "city_name",
      "=",
      "value"
    ],
    "question":"how many cities named austin are there in the usa",
    "question_toks":[
      "how",
      "many",
      "cities",
      "named",
      "austin",
      "are",
      "there",
      "in",
      "the",
      "usa"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"austin\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"city_name\") === col(\"\"austin\"\")).agg(COUNT(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT LENGTH FROM river WHERE river_name  =  \"colorado\" AND traverse  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "LENGTH",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "=",
      "``",
      "colorado",
      "''",
      "AND",
      "traverse",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "length",
      "from",
      "river",
      "where",
      "river_name",
      "=",
      "value",
      "and",
      "traverse",
      "=",
      "value"
    ],
    "question":"what is the length of the colorado river in texas",
    "question_toks":[
      "what",
      "is",
      "the",
      "length",
      "of",
      "the",
      "colorado",
      "river",
      "in",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"colorado\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(col(\"river_name\") === col(\"\"colorado\"\") && col(\"traverse\") === col(\"\"texas\"\")).select(col(\"LENGTH\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT density FROM state WHERE capital  =  \"austin\";",
    "query_toks":[
      "SELECT",
      "density",
      "FROM",
      "state",
      "WHERE",
      "capital",
      "=",
      "``",
      "austin",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "density",
      "from",
      "state",
      "where",
      "capital",
      "=",
      "value"
    ],
    "question":"what is the population density in the state with capital austin",
    "question_toks":[
      "what",
      "is",
      "the",
      "population",
      "density",
      "in",
      "the",
      "state",
      "with",
      "capital",
      "austin"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"austin\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(col(\"capital\") === col(\"\"austin\"\")).select(col(\"density\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT lowest_elevation FROM highlow WHERE lowest_point  =  \"death valley\";",
    "query_toks":[
      "SELECT",
      "lowest_elevation",
      "FROM",
      "highlow",
      "WHERE",
      "lowest_point",
      "=",
      "``",
      "death",
      "valley",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "lowest_elevation",
      "from",
      "highlow",
      "where",
      "lowest_point",
      "=",
      "value"
    ],
    "question":"what is the elevation of death valley",
    "question_toks":[
      "what",
      "is",
      "the",
      "elevation",
      "of",
      "death",
      "valley"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"death valley\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"highlow.filter(col(\"lowest_point\") === col(\"\"death valley\"\")).select(col(\"lowest_elevation\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT AVG ( population ) FROM state;",
    "query_toks":[
      "SELECT",
      "AVG",
      "(",
      "population",
      ")",
      "FROM",
      "state",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "population",
      ")",
      "from",
      "state"
    ],
    "question":"what is the average population of the us by state",
    "question_toks":[
      "what",
      "is",
      "the",
      "average",
      "population",
      "of",
      "the",
      "us",
      "by",
      "state"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"state.agg(AVG(\"population\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
    "query_toks":[
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "traverse",
      "IN",
      "(",
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "area",
      "=",
      "(",
      "SELECT",
      "MAX",
      "(",
      "area",
      ")",
      "FROM",
      "state",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "traverse",
      "in",
      "(",
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "area",
      "=",
      "(",
      "select",
      "max",
      "(",
      "area",
      ")",
      "from",
      "state",
      ")",
      ")"
    ],
    "question":"what rivers flow through the largest state",
    "question_toks":[
      "what",
      "rivers",
      "flow",
      "through",
      "the",
      "largest",
      "state"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        0
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        1,
                        [
                          0,
                          [
                            0,
                            3,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"river.filter(traverse IN (SELECT state_name FROM state WHERE area = (SELECT MAX(area) FROM state))).select(col(\"river_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name JOIN border_info AS t3 ON t3.border  =  t2.state_name JOIN border_info AS t4 ON t4.border  =  t3.state_name WHERE t4.state_name  =  \"texas\";",
    "query_toks":[
      "SELECT",
      "t1.border",
      "FROM",
      "border_info",
      "AS",
      "t2",
      "JOIN",
      "border_info",
      "AS",
      "t1",
      "ON",
      "t2.border",
      "=",
      "t1.state_name",
      "JOIN",
      "border_info",
      "AS",
      "t3",
      "ON",
      "t3.border",
      "=",
      "t2.state_name",
      "JOIN",
      "border_info",
      "AS",
      "t4",
      "ON",
      "t4.border",
      "=",
      "t3.state_name",
      "WHERE",
      "t4.state_name",
      "=",
      "``",
      "texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "border",
      "from",
      "border_info",
      "as",
      "t2",
      "join",
      "border_info",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "border",
      "=",
      "t1",
      ".",
      "state_name",
      "join",
      "border_info",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "border",
      "=",
      "t2",
      ".",
      "state_name",
      "join",
      "border_info",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "border",
      "=",
      "t3",
      ".",
      "state_name",
      "where",
      "t4",
      ".",
      "state_name",
      "=",
      "value"
    ],
    "question":"what states border states that border states that border states that border texas",
    "question_toks":[
      "what",
      "states",
      "border",
      "states",
      "that",
      "border",
      "states",
      "that",
      "border",
      "states",
      "that",
      "border",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"border_info.join(border_info, border_info(\"border\") === border_info(\"state_name\"), inner).join(border_info, border_info(\"border\") === border_info(\"state_name\"), inner).join(border_info, border_info(\"border\") === border_info(\"state_name\"), inner).filter(border_info(\"state_name\") === col(\"\"texas\"\")).select(border_info(\"border\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );",
    "query_toks":[
      "SELECT",
      "city_name",
      "FROM",
      "city",
      "WHERE",
      "population",
      ">",
      "150000",
      "AND",
      "state_name",
      "IN",
      "(",
      "SELECT",
      "traverse",
      "FROM",
      "river",
      "WHERE",
      "river_name",
      "IN",
      "(",
      "SELECT",
      "river_name",
      "FROM",
      "river",
      "WHERE",
      "LENGTH",
      ">",
      "750",
      "AND",
      "traverse",
      "=",
      "``",
      "virginia",
      "''",
      ")",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city_name",
      "from",
      "city",
      "where",
      "population",
      ">",
      "value",
      "and",
      "state_name",
      "in",
      "(",
      "select",
      "traverse",
      "from",
      "river",
      "where",
      "river_name",
      "in",
      "(",
      "select",
      "river_name",
      "from",
      "river",
      "where",
      "length",
      ">",
      "value",
      "and",
      "traverse",
      "=",
      "value",
      ")",
      ")"
    ],
    "question":"what are the major cities in the states through which the major river in virginia runs",
    "question_toks":[
      "what",
      "are",
      "the",
      "major",
      "cities",
      "in",
      "the",
      "states",
      "through",
      "which",
      "the",
      "major",
      "river",
      "in",
      "virginia",
      "runs"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          150000.0,
          null
        ],
        "and",
        [
          false,
          8,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  6
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      29,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                8,
                [
                  0,
                  [
                    0,
                    26,
                    false
                  ],
                  null
                ],
                {
                  "except":null,
                  "from":{
                    "conds":[
                      
                    ],
                    "table_units":[
                      [
                        "table_unit",
                        6
                      ]
                    ]
                  },
                  "groupBy":[
                    
                  ],
                  "having":[
                    
                  ],
                  "intersect":null,
                  "limit":null,
                  "orderBy":[
                    
                  ],
                  "select":[
                    false,
                    [
                      [
                        0,
                        [
                          0,
                          [
                            0,
                            26,
                            false
                          ],
                          null
                        ]
                      ]
                    ]
                  ],
                  "union":null,
                  "where":[
                    [
                      false,
                      3,
                      [
                        0,
                        [
                          0,
                          27,
                          false
                        ],
                        null
                      ],
                      750.0,
                      null
                    ],
                    "and",
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          29,
                          false
                        ],
                        null
                      ],
                      "\"virginia\"",
                      null
                    ]
                  ]
                },
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"city.filter(col(\"population\") > 150000 && state_name IN (SELECT traverse FROM river WHERE river_name IN (SELECT river_name FROM river WHERE LENGTH > 750 AND traverse = \"virginia\"))).select(col(\"city_name\"))"
  },
  {
    "db_id":"geo",
    "query":"SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
    "query_toks":[
      "SELECT",
      "state_name",
      "FROM",
      "state",
      "WHERE",
      "state_name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "border",
      "FROM",
      "border_info",
      "WHERE",
      "state_name",
      "=",
      "``",
      "texas",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state_name",
      "from",
      "state",
      "where",
      "state_name",
      "not",
      "in",
      "(",
      "select",
      "border",
      "from",
      "border_info",
      "where",
      "state_name",
      "=",
      "value",
      ")"
    ],
    "question":"which states does not border texas",
    "question_toks":[
      "which",
      "states",
      "does",
      "not",
      "border",
      "texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    11,
                    false
                  ],
                  null
                ],
                "\"texas\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"state.filter(state_name NOT IN (SELECT border FROM border_info WHERE state_name = \"texas\")).select(col(\"state_name\"))"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"papers that are coauthored by Peter Mertens and Dina Barbian",
    "question_toks":[
      "papers",
      "that",
      "are",
      "coauthored",
      "by",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"papers written by Peter Mertens and Dina Barbian",
    "question_toks":[
      "papers",
      "written",
      "by",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"what are the papers that have Peter Mertens and Dina Barbian as co-authors",
    "question_toks":[
      "what",
      "are",
      "the",
      "papers",
      "that",
      "have",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian",
      "as",
      "co-authors"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What papers have Peter Mertens and Dina Barbian written ?",
    "question_toks":[
      "What",
      "papers",
      "have",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian",
      "written",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"what paper did Peter Mertens and Dina Barbian write together ?",
    "question_toks":[
      "what",
      "paper",
      "did",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian",
      "write",
      "together",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Has Peter Mertens and Dina Barbian written a paper together ?",
    "question_toks":[
      "Has",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian",
      "written",
      "a",
      "paper",
      "together",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Papers by Peter Mertens and Dina Barbian",
    "question_toks":[
      "Papers",
      "by",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"papers by authors Peter Mertens and Dina Barbian",
    "question_toks":[
      "papers",
      "by",
      "authors",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What papers were written by authors Peter Mertens and Dina Barbian",
    "question_toks":[
      "What",
      "papers",
      "were",
      "written",
      "by",
      "authors",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"papers by Peter Mertens and Dina Barbian",
    "question_toks":[
      "papers",
      "by",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"papers written by authors Peter Mertens and Dina Barbian",
    "question_toks":[
      "papers",
      "written",
      "by",
      "authors",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"When did Peter Mertens and Dina Barbian collaborate ?",
    "question_toks":[
      "When",
      "did",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian",
      "collaborate",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"what are the collaborations of Peter Mertens and Dina Barbian ?",
    "question_toks":[
      "what",
      "are",
      "the",
      "collaborations",
      "of",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Have Peter Mertens and Dina Barbian written a paper together ?",
    "question_toks":[
      "Have",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian",
      "written",
      "a",
      "paper",
      "together",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Peter Mertens and Dina Barbian as co-authors",
    "question_toks":[
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian",
      "as",
      "co-authors"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Does Peter Mertens ever collaborated with Dina Barbian ?",
    "question_toks":[
      "Does",
      "Peter",
      "Mertens",
      "ever",
      "collaborated",
      "with",
      "Dina",
      "Barbian",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Which papers have Peter Mertens and Dina Barbian as co-authors ?",
    "question_toks":[
      "Which",
      "papers",
      "have",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian",
      "as",
      "co-authors",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"papers coauthored by Peter Mertens and Dina Barbian",
    "question_toks":[
      "papers",
      "coauthored",
      "by",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What papers have been written by Peter Mertens and Dina Barbian ?",
    "question_toks":[
      "What",
      "papers",
      "have",
      "been",
      "written",
      "by",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What papers have been written by both Peter Mertens and Dina Barbian ?",
    "question_toks":[
      "What",
      "papers",
      "have",
      "been",
      "written",
      "by",
      "both",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Dina",
      "Barbian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What papers have been written by Peter Mertens and Dina Barbian .",
    "question_toks":[
      "What",
      "papers",
      "have",
      "been",
      "written",
      "by",
      "Peter",
      "Mertens",
      "and",
      "Dina",
      "Barbian",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dina Barbian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\") && author(\"authorname\") === col(\"\"Dina Barbian\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t4.citedpaperid",
      ")",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "noah",
      "a",
      "smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t4",
      ".",
      "citedpaperid",
      ")",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many citation noah a smith has ?",
    "question_toks":[
      "How",
      "many",
      "citation",
      "noah",
      "a",
      "smith",
      "has",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"noah a smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citedpaperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"noah a smith\"\")).agg(COUNT(cite(\"citedpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t4.citedpaperid",
      ")",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "noah",
      "a",
      "smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t4",
      ".",
      "citedpaperid",
      ")",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"noah a smith citation count",
    "question_toks":[
      "noah",
      "a",
      "smith",
      "citation",
      "count"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"noah a smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citedpaperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"noah a smith\"\")).agg(COUNT(cite(\"citedpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t4.citedpaperid",
      ")",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "noah",
      "a",
      "smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t4",
      ".",
      "citedpaperid",
      ")",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"how many citations does noah a smith have ?",
    "question_toks":[
      "how",
      "many",
      "citations",
      "does",
      "noah",
      "a",
      "smith",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"noah a smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citedpaperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"noah a smith\"\")).agg(COUNT(cite(\"citedpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t4.citedpaperid",
      ")",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "noah",
      "a",
      "smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t4",
      ".",
      "citedpaperid",
      ")",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many citations does noah a smith have ?",
    "question_toks":[
      "How",
      "many",
      "citations",
      "does",
      "noah",
      "a",
      "smith",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"noah a smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citedpaperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"noah a smith\"\")).agg(COUNT(cite(\"citedpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t4.citedpaperid",
      ")",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "noah",
      "a",
      "smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t4",
      ".",
      "citedpaperid",
      ")",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"number of citations of noah a smith",
    "question_toks":[
      "number",
      "of",
      "citations",
      "of",
      "noah",
      "a",
      "smith"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"noah a smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citedpaperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"noah a smith\"\")).agg(COUNT(cite(\"citedpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t4.citedpaperid",
      ")",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "noah",
      "a",
      "smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t4",
      ".",
      "citedpaperid",
      ")",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many citations does noah a smith have",
    "question_toks":[
      "How",
      "many",
      "citations",
      "does",
      "noah",
      "a",
      "smith",
      "have"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"noah a smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citedpaperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"noah a smith\"\")).agg(COUNT(cite(\"citedpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t4.citedpaperid",
      ")",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "noah",
      "a",
      "smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t4",
      ".",
      "citedpaperid",
      ")",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many times was noah a smith cited ?",
    "question_toks":[
      "How",
      "many",
      "times",
      "was",
      "noah",
      "a",
      "smith",
      "cited",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"noah a smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citedpaperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"noah a smith\"\")).agg(COUNT(cite(\"citedpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t4.citedpaperid",
      ")",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "noah",
      "a",
      "smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t4",
      ".",
      "citedpaperid",
      ")",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many citations does noah a smith has ?",
    "question_toks":[
      "How",
      "many",
      "citations",
      "does",
      "noah",
      "a",
      "smith",
      "has",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"noah a smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citedpaperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"noah a smith\"\")).agg(COUNT(cite(\"citedpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"chi papers",
    "question_toks":[
      "chi",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers at chi",
    "question_toks":[
      "papers",
      "at",
      "chi"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers in chi",
    "question_toks":[
      "papers",
      "in",
      "chi"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"chi",
    "question_toks":[
      "chi"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Papers about chi",
    "question_toks":[
      "Papers",
      "about",
      "chi"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Show me chi papers .",
    "question_toks":[
      "Show",
      "me",
      "chi",
      "papers",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"what papers did chi publish ?",
    "question_toks":[
      "what",
      "papers",
      "did",
      "chi",
      "publish",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"list papers published in chi",
    "question_toks":[
      "list",
      "papers",
      "published",
      "in",
      "chi"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Papers on chi",
    "question_toks":[
      "Papers",
      "on",
      "chi"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What papers has sharon goldwater written ?",
    "question_toks":[
      "What",
      "papers",
      "has",
      "sharon",
      "goldwater",
      "written",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What papers has written by sharon goldwater ?",
    "question_toks":[
      "What",
      "papers",
      "has",
      "written",
      "by",
      "sharon",
      "goldwater",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"papers by sharon goldwater",
    "question_toks":[
      "papers",
      "by",
      "sharon",
      "goldwater"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"what did sharon goldwater write ?",
    "question_toks":[
      "what",
      "did",
      "sharon",
      "goldwater",
      "write",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"papers where sharon goldwater is an author",
    "question_toks":[
      "papers",
      "where",
      "sharon",
      "goldwater",
      "is",
      "an",
      "author"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Papers authored by sharon goldwater",
    "question_toks":[
      "Papers",
      "authored",
      "by",
      "sharon",
      "goldwater"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"sharon goldwater papers",
    "question_toks":[
      "sharon",
      "goldwater",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Papers by sharon goldwater",
    "question_toks":[
      "Papers",
      "by",
      "sharon",
      "goldwater"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Papers written by sharon goldwater",
    "question_toks":[
      "Papers",
      "written",
      "by",
      "sharon",
      "goldwater"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"which papers has sharon goldwater written ?",
    "question_toks":[
      "which",
      "papers",
      "has",
      "sharon",
      "goldwater",
      "written",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"papers written by sharon goldwater",
    "question_toks":[
      "papers",
      "written",
      "by",
      "sharon",
      "goldwater"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What has sharon goldwater published ?",
    "question_toks":[
      "What",
      "has",
      "sharon",
      "goldwater",
      "published",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Does sharon goldwater have any papers published ?",
    "question_toks":[
      "Does",
      "sharon",
      "goldwater",
      "have",
      "any",
      "papers",
      "published",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"sharon goldwater 's papers",
    "question_toks":[
      "sharon",
      "goldwater",
      "'s",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"show me papers by sharon goldwater .",
    "question_toks":[
      "show",
      "me",
      "papers",
      "by",
      "sharon",
      "goldwater",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What papers are authored by sharon goldwater ?",
    "question_toks":[
      "What",
      "papers",
      "are",
      "authored",
      "by",
      "sharon",
      "goldwater",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "sharon",
      "goldwater",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"papers by sharon goldwater ?",
    "question_toks":[
      "papers",
      "by",
      "sharon",
      "goldwater",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sharon goldwater\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sharon goldwater\"\")).select(writes(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "oren",
      "etzioni",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"What was oren etzioni 's latest paper ?",
    "question_toks":[
      "What",
      "was",
      "oren",
      "etzioni",
      "'s",
      "latest",
      "paper",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"oren etzioni\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"oren etzioni\"\")).select(writes(\"paperid\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "oren",
      "etzioni",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"Latest paper by oren etzioni",
    "question_toks":[
      "Latest",
      "paper",
      "by",
      "oren",
      "etzioni"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"oren etzioni\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"oren etzioni\"\")).select(writes(\"paperid\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "oren",
      "etzioni",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"What is the latest paper by oren etzioni ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "latest",
      "paper",
      "by",
      "oren",
      "etzioni",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"oren etzioni\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"oren etzioni\"\")).select(writes(\"paperid\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "oren",
      "etzioni",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"What is oren etzioni 's latest paper ?",
    "question_toks":[
      "What",
      "is",
      "oren",
      "etzioni",
      "'s",
      "latest",
      "paper",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"oren etzioni\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"oren etzioni\"\")).select(writes(\"paperid\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "oren",
      "etzioni",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"What are the latest papers by oren etzioni ?",
    "question_toks":[
      "What",
      "are",
      "the",
      "latest",
      "papers",
      "by",
      "oren",
      "etzioni",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"oren etzioni\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"oren etzioni\"\")).select(writes(\"paperid\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "oren",
      "etzioni",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"most recent papers by oren etzioni",
    "question_toks":[
      "most",
      "recent",
      "papers",
      "by",
      "oren",
      "etzioni"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"oren etzioni\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"oren etzioni\"\")).select(writes(\"paperid\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "monte",
      "carlo",
      "simulation",
      "''",
      "AND",
      "t3.year",
      ">",
      "2011",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"are there any monte carlo simulation papers since 2011 ?",
    "question_toks":[
      "are",
      "there",
      "any",
      "monte",
      "carlo",
      "simulation",
      "papers",
      "since",
      "2011",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"monte carlo simulation\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2011.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"monte carlo simulation\"\") && paper(\"year\") > 2011).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "monte",
      "carlo",
      "simulation",
      "''",
      "AND",
      "t3.year",
      ">",
      "2011",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"monte carlo simulation papers later than 2011",
    "question_toks":[
      "monte",
      "carlo",
      "simulation",
      "papers",
      "later",
      "than",
      "2011"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"monte carlo simulation\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2011.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"monte carlo simulation\"\") && paper(\"year\") > 2011).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "monte",
      "carlo",
      "simulation",
      "''",
      "AND",
      "t3.year",
      ">",
      "2011",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"monte carlo simulation later than 2011",
    "question_toks":[
      "monte",
      "carlo",
      "simulation",
      "later",
      "than",
      "2011"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"monte carlo simulation\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2011.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"monte carlo simulation\"\") && paper(\"year\") > 2011).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "monte",
      "carlo",
      "simulation",
      "''",
      "AND",
      "t3.year",
      ">",
      "2011",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"monte carlo simulation papers published after 2011",
    "question_toks":[
      "monte",
      "carlo",
      "simulation",
      "papers",
      "published",
      "after",
      "2011"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"monte carlo simulation\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2011.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"monte carlo simulation\"\") && paper(\"year\") > 2011).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "monte",
      "carlo",
      "simulation",
      "''",
      "AND",
      "t3.year",
      ">",
      "2011",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"monte carlo simulation papers since 2011",
    "question_toks":[
      "monte",
      "carlo",
      "simulation",
      "papers",
      "since",
      "2011"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"monte carlo simulation\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2011.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"monte carlo simulation\"\") && paper(\"year\") > 2011).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ras bodik\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "ras",
      "bodik",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"does ras bodik publish a lot ?",
    "question_toks":[
      "does",
      "ras",
      "bodik",
      "publish",
      "a",
      "lot",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"ras bodik\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"ras bodik\"\")).agg(COUNT(paper(\"paperid\")))"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "David",
      "M.",
      "Blei",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "AISTATS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers did David M. Blei publish at AISTATS ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "did",
      "David",
      "M.",
      "Blei",
      "publish",
      "at",
      "AISTATS",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"David M. Blei\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"AISTATS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"David M. Blei\"\") && venue(\"venuename\") === col(\"\"AISTATS\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "David",
      "M.",
      "Blei",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "AISTATS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers does David M. Blei have in AISTATS ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "does",
      "David",
      "M.",
      "Blei",
      "have",
      "in",
      "AISTATS",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"David M. Blei\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"AISTATS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"David M. Blei\"\") && venue(\"venuename\") === col(\"\"AISTATS\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "David",
      "M.",
      "Blei",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "AISTATS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers has David M. Blei published in AISTATS ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "has",
      "David",
      "M.",
      "Blei",
      "published",
      "in",
      "AISTATS",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"David M. Blei\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"AISTATS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"David M. Blei\"\") && venue(\"venuename\") === col(\"\"AISTATS\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "David",
      "M.",
      "Blei",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "AISTATS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many papers does David M. Blei have at AISTATS",
    "question_toks":[
      "how",
      "many",
      "papers",
      "does",
      "David",
      "M.",
      "Blei",
      "have",
      "at",
      "AISTATS"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"David M. Blei\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"AISTATS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"David M. Blei\"\") && venue(\"venuename\") === col(\"\"AISTATS\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "David",
      "M.",
      "Blei",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "AISTATS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many papers does David M. Blei have in AISTATS ?",
    "question_toks":[
      "how",
      "many",
      "papers",
      "does",
      "David",
      "M.",
      "Blei",
      "have",
      "in",
      "AISTATS",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"David M. Blei\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"AISTATS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"David M. Blei\"\") && venue(\"venuename\") === col(\"\"AISTATS\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "David",
      "M.",
      "Blei",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "AISTATS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many David M. Blei papers are in AISTATS ?",
    "question_toks":[
      "how",
      "many",
      "David",
      "M.",
      "Blei",
      "papers",
      "are",
      "in",
      "AISTATS",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"David M. Blei\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"AISTATS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"David M. Blei\"\") && venue(\"venuename\") === col(\"\"AISTATS\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "David",
      "M.",
      "Blei",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "AISTATS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers David M. Blei has in AISTATS ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "David",
      "M.",
      "Blei",
      "has",
      "in",
      "AISTATS",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"David M. Blei\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"AISTATS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"David M. Blei\"\") && venue(\"venuename\") === col(\"\"AISTATS\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "David",
      "M.",
      "Blei",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "AISTATS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers does David M. Blei have in AISTATS",
    "question_toks":[
      "How",
      "many",
      "papers",
      "does",
      "David",
      "M.",
      "Blei",
      "have",
      "in",
      "AISTATS"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"David M. Blei\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"AISTATS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"David M. Blei\"\") && venue(\"venuename\") === col(\"\"AISTATS\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "paperid",
      "FROM",
      "paper",
      "WHERE",
      "title",
      "=",
      "``",
      "machine",
      "networks",
      "for",
      "one",
      "shot",
      "learning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "paperid",
      "from",
      "paper",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"List all academic papers on machine networks for one shot learning",
    "question_toks":[
      "List",
      "all",
      "academic",
      "papers",
      "on",
      "machine",
      "networks",
      "for",
      "one",
      "shot",
      "learning"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"machine networks for one shot learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.filter(col(\"title\") === col(\"\"machine networks for one shot learning\"\")).select(col(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "paperid",
      "FROM",
      "paper",
      "WHERE",
      "title",
      "=",
      "``",
      "machine",
      "networks",
      "for",
      "one",
      "shot",
      "learning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "paperid",
      "from",
      "paper",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"machine networks for one shot learning",
    "question_toks":[
      "machine",
      "networks",
      "for",
      "one",
      "shot",
      "learning"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"machine networks for one shot learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.filter(col(\"title\") === col(\"\"machine networks for one shot learning\"\")).select(col(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "RGB-D",
      "Object",
      "Dataset",
      "''",
      "AND",
      "t3.title",
      "=",
      "``",
      "Class",
      "consistent",
      "multi-modal",
      "fusion",
      "with",
      "binary",
      "features",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "CVPR",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "title",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?",
    "question_toks":[
      "What",
      "papers",
      "were",
      "published",
      "at",
      "CVPR",
      "in",
      "2016",
      "about",
      "Class",
      "consistent",
      "multi-modal",
      "fusion",
      "with",
      "binary",
      "features",
      "applied",
      "to",
      "RGB-D",
      "Object",
      "Dataset",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"RGB-D Object Dataset\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Class consistent multi-modal fusion with binary features\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"CVPR\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(dataset(\"datasetname\") === col(\"\"RGB-D Object Dataset\"\") && paper(\"title\") === col(\"\"Class consistent multi-modal fusion with binary features\"\") && paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"CVPR\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "RGB-D",
      "Object",
      "Dataset",
      "''",
      "AND",
      "t3.title",
      "=",
      "``",
      "Class",
      "consistent",
      "multi-modal",
      "fusion",
      "with",
      "binary",
      "features",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "CVPR",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "title",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?",
    "question_toks":[
      "What",
      "papers",
      "were",
      "published",
      "at",
      "CVPR",
      "'16",
      "about",
      "Class",
      "consistent",
      "multi-modal",
      "fusion",
      "with",
      "binary",
      "features",
      "applied",
      "to",
      "RGB-D",
      "Object",
      "Dataset",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"RGB-D Object Dataset\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Class consistent multi-modal fusion with binary features\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"CVPR\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(dataset(\"datasetname\") === col(\"\"RGB-D Object Dataset\"\") && paper(\"title\") === col(\"\"Class consistent multi-modal fusion with binary features\"\") && paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"CVPR\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"How many papers are in deep learning ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "are",
      "in",
      "deep",
      "learning",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"How many papers are about deep learning ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "are",
      "about",
      "deep",
      "learning",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"how many papers about deep learning ?",
    "question_toks":[
      "how",
      "many",
      "papers",
      "about",
      "deep",
      "learning",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"How many papers are related to deep learning ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "are",
      "related",
      "to",
      "deep",
      "learning",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christopher",
      "D.",
      "Manning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many papers has Christopher D. Manning written ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "has",
      "Christopher",
      "D.",
      "Manning",
      "written",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christopher D. Manning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christopher D. Manning\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christopher",
      "D.",
      "Manning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many papers does Christopher D. Manning have ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "does",
      "Christopher",
      "D.",
      "Manning",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christopher D. Manning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christopher D. Manning\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christopher",
      "D.",
      "Manning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many papers has Christopher D. Manning ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "has",
      "Christopher",
      "D.",
      "Manning",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christopher D. Manning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christopher D. Manning\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christopher",
      "D.",
      "Manning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many papers has Christopher D. Manning published ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "has",
      "Christopher",
      "D.",
      "Manning",
      "published",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christopher D. Manning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christopher D. Manning\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christopher",
      "D.",
      "Manning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"how many papers has Christopher D. Manning written ?",
    "question_toks":[
      "how",
      "many",
      "papers",
      "has",
      "Christopher",
      "D.",
      "Manning",
      "written",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christopher D. Manning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christopher D. Manning\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christopher",
      "D.",
      "Manning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Has Christopher D. Manning published any papers ?",
    "question_toks":[
      "Has",
      "Christopher",
      "D.",
      "Manning",
      "published",
      "any",
      "papers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christopher D. Manning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christopher D. Manning\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christopher",
      "D.",
      "Manning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"how many papers has Christopher D. Manning published ?",
    "question_toks":[
      "how",
      "many",
      "papers",
      "has",
      "Christopher",
      "D.",
      "Manning",
      "published",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christopher D. Manning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christopher D. Manning\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christopher",
      "D.",
      "Manning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"how many papers does Christopher D. Manning have ?",
    "question_toks":[
      "how",
      "many",
      "papers",
      "does",
      "Christopher",
      "D.",
      "Manning",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christopher D. Manning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christopher D. Manning\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christopher",
      "D.",
      "Manning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many paper does Christopher D. Manning have ?",
    "question_toks":[
      "How",
      "many",
      "paper",
      "does",
      "Christopher",
      "D.",
      "Manning",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christopher D. Manning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christopher D. Manning\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christopher",
      "D.",
      "Manning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many publications does Christopher D. Manning have ?",
    "question_toks":[
      "How",
      "many",
      "publications",
      "does",
      "Christopher",
      "D.",
      "Manning",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christopher D. Manning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christopher D. Manning\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christopher",
      "D.",
      "Manning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many papers does Christopher D. Manning have",
    "question_toks":[
      "How",
      "many",
      "papers",
      "does",
      "Christopher",
      "D.",
      "Manning",
      "have"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christopher D. Manning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christopher D. Manning\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christopher",
      "D.",
      "Manning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"number of papers written by Christopher D. Manning",
    "question_toks":[
      "number",
      "of",
      "papers",
      "written",
      "by",
      "Christopher",
      "D.",
      "Manning"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christopher D. Manning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christopher D. Manning\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"what kind of papers does Luke Zettlemoyer publish",
    "question_toks":[
      "what",
      "kind",
      "of",
      "papers",
      "does",
      "Luke",
      "Zettlemoyer",
      "publish"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Keyphrases used by Luke Zettlemoyer",
    "question_toks":[
      "Keyphrases",
      "used",
      "by",
      "Luke",
      "Zettlemoyer"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What keywords are in papers by Luke Zettlemoyer ?",
    "question_toks":[
      "What",
      "keywords",
      "are",
      "in",
      "papers",
      "by",
      "Luke",
      "Zettlemoyer",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"keywords used by Luke Zettlemoyer",
    "question_toks":[
      "keywords",
      "used",
      "by",
      "Luke",
      "Zettlemoyer"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"what keywords are used by Luke Zettlemoyer",
    "question_toks":[
      "what",
      "keywords",
      "are",
      "used",
      "by",
      "Luke",
      "Zettlemoyer"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"keyphrases used by Luke Zettlemoyer",
    "question_toks":[
      "keyphrases",
      "used",
      "by",
      "Luke",
      "Zettlemoyer"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"keyphrases by Luke Zettlemoyer",
    "question_toks":[
      "keyphrases",
      "by",
      "Luke",
      "Zettlemoyer"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"give me the keywords used by Luke Zettlemoyer",
    "question_toks":[
      "give",
      "me",
      "the",
      "keywords",
      "used",
      "by",
      "Luke",
      "Zettlemoyer"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What topic does Luke Zettlemoyer write about ?",
    "question_toks":[
      "What",
      "topic",
      "does",
      "Luke",
      "Zettlemoyer",
      "write",
      "about",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"what topics does Luke Zettlemoyer publish in",
    "question_toks":[
      "what",
      "topics",
      "does",
      "Luke",
      "Zettlemoyer",
      "publish",
      "in"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"keywords in the papers written by Luke Zettlemoyer",
    "question_toks":[
      "keywords",
      "in",
      "the",
      "papers",
      "written",
      "by",
      "Luke",
      "Zettlemoyer"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"keyphrases used by Luke Zettlemoyer .",
    "question_toks":[
      "keyphrases",
      "used",
      "by",
      "Luke",
      "Zettlemoyer",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "Luke",
      "Zettlemoyer",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"topics used by Luke Zettlemoyer",
    "question_toks":[
      "topics",
      "used",
      "by",
      "Luke",
      "Zettlemoyer"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke Zettlemoyer\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Daniella",
      "Coelho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What conference does Daniella Coelho publish in ?",
    "question_toks":[
      "What",
      "conference",
      "does",
      "Daniella",
      "Coelho",
      "publish",
      "in",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Daniella Coelho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Daniella Coelho\"\")).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Daniella",
      "Coelho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"conferences that Daniella Coelho has published in",
    "question_toks":[
      "conferences",
      "that",
      "Daniella",
      "Coelho",
      "has",
      "published",
      "in"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Daniella Coelho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Daniella Coelho\"\")).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Daniella",
      "Coelho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"In which conferences does Daniella Coelho typically publish ?",
    "question_toks":[
      "In",
      "which",
      "conferences",
      "does",
      "Daniella",
      "Coelho",
      "typically",
      "publish",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Daniella Coelho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Daniella Coelho\"\")).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Daniella",
      "Coelho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"in what conferences does Daniella Coelho publish ?",
    "question_toks":[
      "in",
      "what",
      "conferences",
      "does",
      "Daniella",
      "Coelho",
      "publish",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Daniella Coelho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Daniella Coelho\"\")).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Daniella",
      "Coelho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What conferences does Daniella Coelho publish in ?",
    "question_toks":[
      "What",
      "conferences",
      "does",
      "Daniella",
      "Coelho",
      "publish",
      "in",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Daniella Coelho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Daniella Coelho\"\")).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Daniella",
      "Coelho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"At which conferences does Daniella Coelho publish ?",
    "question_toks":[
      "At",
      "which",
      "conferences",
      "does",
      "Daniella",
      "Coelho",
      "publish",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Daniella Coelho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Daniella Coelho\"\")).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Daniella",
      "Coelho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What conferences does Daniella Coelho submit to ?",
    "question_toks":[
      "What",
      "conferences",
      "does",
      "Daniella",
      "Coelho",
      "submit",
      "to",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Daniella Coelho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Daniella Coelho\"\")).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "paperid",
      ")",
      "FROM",
      "paper",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "paperid",
      ")",
      "from",
      "paper"
    ],
    "question":"How many papers are there ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "are",
      "there",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"paper.agg(COUNT(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t1",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t1.paperid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Ed",
      "Desmond",
      "''",
      "AND",
      "t4.keyphrasename",
      "=",
      "``",
      "Semantic",
      "Parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t1",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t1",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "by",
      "Ed",
      "Desmond",
      "contain",
      "the",
      "keyphrases",
      "Semantic",
      "Parsing",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Ed Desmond\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Semantic Parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(writes, writes(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Ed Desmond\"\") && keyphrase(\"keyphrasename\") === col(\"\"Semantic Parsing\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t1",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t1.paperid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Ed",
      "Desmond",
      "''",
      "AND",
      "t4.keyphrasename",
      "=",
      "``",
      "Semantic",
      "Parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t1",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t1",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"How many papers does Ed Desmond have in Semantic Parsing area ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "does",
      "Ed",
      "Desmond",
      "have",
      "in",
      "Semantic",
      "Parsing",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Ed Desmond\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Semantic Parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(writes, writes(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Ed Desmond\"\") && keyphrase(\"keyphrasename\") === col(\"\"Semantic Parsing\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t1",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t1.paperid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Ed",
      "Desmond",
      "''",
      "AND",
      "t4.keyphrasename",
      "=",
      "``",
      "Semantic",
      "Parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t1",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t1",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"How many Semantic Parsing papers has Ed Desmond written ?",
    "question_toks":[
      "How",
      "many",
      "Semantic",
      "Parsing",
      "papers",
      "has",
      "Ed",
      "Desmond",
      "written",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Ed Desmond\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Semantic Parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(writes, writes(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Ed Desmond\"\") && keyphrase(\"keyphrasename\") === col(\"\"Semantic Parsing\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t1",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t1.paperid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Ed",
      "Desmond",
      "''",
      "AND",
      "t4.keyphrasename",
      "=",
      "``",
      "Semantic",
      "Parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t1",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t1",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"How many paper has Ed Desmond written about Semantic Parsing ?",
    "question_toks":[
      "How",
      "many",
      "paper",
      "has",
      "Ed",
      "Desmond",
      "written",
      "about",
      "Semantic",
      "Parsing",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Ed Desmond\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Semantic Parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(writes, writes(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Ed Desmond\"\") && keyphrase(\"keyphrasename\") === col(\"\"Semantic Parsing\"\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "li",
      "dong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What conferences did li dong submit to in 2016 ?",
    "question_toks":[
      "What",
      "conferences",
      "did",
      "li",
      "dong",
      "submit",
      "to",
      "in",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"li dong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"li dong\"\") && paper(\"year\") === 2016).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "li",
      "dong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Where did li dong publish in 2016",
    "question_toks":[
      "Where",
      "did",
      "li",
      "dong",
      "publish",
      "in",
      "2016"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"li dong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"li dong\"\") && paper(\"year\") === 2016).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "li",
      "dong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What conferences did li dong publish in in 2016 ?",
    "question_toks":[
      "What",
      "conferences",
      "did",
      "li",
      "dong",
      "publish",
      "in",
      "in",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"li dong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"li dong\"\") && paper(\"year\") === 2016).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "li",
      "dong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Where did li dong publish in 2016 ?",
    "question_toks":[
      "Where",
      "did",
      "li",
      "dong",
      "publish",
      "in",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"li dong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"li dong\"\") && paper(\"year\") === 2016).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"acl papers in 2012 on Parsing",
    "question_toks":[
      "acl",
      "papers",
      "in",
      "2012",
      "on",
      "Parsing"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"What papers were published in acl in 2012 about Parsing ?",
    "question_toks":[
      "What",
      "papers",
      "were",
      "published",
      "in",
      "acl",
      "in",
      "2012",
      "about",
      "Parsing",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers on Parsing appeared at acl last year",
    "question_toks":[
      "papers",
      "on",
      "Parsing",
      "appeared",
      "at",
      "acl",
      "last",
      "year"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Parsing papers from acl 2012",
    "question_toks":[
      "Parsing",
      "papers",
      "from",
      "acl",
      "2012"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers about Parsing in acl 2012",
    "question_toks":[
      "papers",
      "about",
      "Parsing",
      "in",
      "acl",
      "2012"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"acl papers in 2012 in Parsing",
    "question_toks":[
      "acl",
      "papers",
      "in",
      "2012",
      "in",
      "Parsing"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"acl papers in 2012 about Parsing",
    "question_toks":[
      "acl",
      "papers",
      "in",
      "2012",
      "about",
      "Parsing"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"What papers were published at acl in 2012 were about Parsing ?",
    "question_toks":[
      "What",
      "papers",
      "were",
      "published",
      "at",
      "acl",
      "in",
      "2012",
      "were",
      "about",
      "Parsing",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers on Parsing appeared at acl in 2012",
    "question_toks":[
      "papers",
      "on",
      "Parsing",
      "appeared",
      "at",
      "acl",
      "in",
      "2012"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many Parsing papers did acl 2012 have ?",
    "question_toks":[
      "how",
      "many",
      "Parsing",
      "papers",
      "did",
      "acl",
      "2012",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"who published Parsing papers at acl 2012",
    "question_toks":[
      "who",
      "published",
      "Parsing",
      "papers",
      "at",
      "acl",
      "2012"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"which papers in acl 2012 had Parsing in them ?",
    "question_toks":[
      "which",
      "papers",
      "in",
      "acl",
      "2012",
      "had",
      "Parsing",
      "in",
      "them",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2012",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"what were some Parsing based papers in acl 2012 ?",
    "question_toks":[
      "what",
      "were",
      "some",
      "Parsing",
      "based",
      "papers",
      "in",
      "acl",
      "2012",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "dependent",
      "types",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"List the popular publications on dependent types",
    "question_toks":[
      "List",
      "the",
      "popular",
      "publications",
      "on",
      "dependent",
      "types"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"dependent types\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"dependent types\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "dependent",
      "types",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"Which paper should I read about dependent types ?",
    "question_toks":[
      "Which",
      "paper",
      "should",
      "I",
      "read",
      "about",
      "dependent",
      "types",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"dependent types\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"dependent types\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "dependent",
      "types",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"top dependent types papers",
    "question_toks":[
      "top",
      "dependent",
      "types",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"dependent types\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"dependent types\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"List papers that has a keyword Question Answering",
    "question_toks":[
      "List",
      "papers",
      "that",
      "has",
      "a",
      "keyword",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"Question Answering research papers",
    "question_toks":[
      "Question",
      "Answering",
      "research",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers on Question Answering",
    "question_toks":[
      "papers",
      "on",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers related to Question Answering",
    "question_toks":[
      "papers",
      "related",
      "to",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers about Question Answering",
    "question_toks":[
      "papers",
      "about",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"Papers about Question Answering",
    "question_toks":[
      "Papers",
      "about",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers published in the area of Question Answering",
    "question_toks":[
      "papers",
      "published",
      "in",
      "the",
      "area",
      "of",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"Question Answering experiments",
    "question_toks":[
      "Question",
      "Answering",
      "experiments"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"Show me the papers on Question Answering",
    "question_toks":[
      "Show",
      "me",
      "the",
      "papers",
      "on",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers that used Question Answering",
    "question_toks":[
      "papers",
      "that",
      "used",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers that mention Question Answering",
    "question_toks":[
      "papers",
      "that",
      "mention",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"Question Answering papers",
    "question_toks":[
      "Question",
      "Answering",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"Show me Question Answering papers .",
    "question_toks":[
      "Show",
      "me",
      "Question",
      "Answering",
      "papers",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"Question Answering publications",
    "question_toks":[
      "Question",
      "Answering",
      "publications"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"Fetch me some papers on Question Answering",
    "question_toks":[
      "Fetch",
      "me",
      "some",
      "papers",
      "on",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers on Question Answering experiments",
    "question_toks":[
      "papers",
      "on",
      "Question",
      "Answering",
      "experiments"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"What papers talk about Question Answering ?",
    "question_toks":[
      "What",
      "papers",
      "talk",
      "about",
      "Question",
      "Answering",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"What is the paper about Question Answering ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "paper",
      "about",
      "Question",
      "Answering",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"Which papers are about about Question Answering ?",
    "question_toks":[
      "Which",
      "papers",
      "are",
      "about",
      "about",
      "Question",
      "Answering",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"list papers that used Question Answering",
    "question_toks":[
      "list",
      "papers",
      "that",
      "used",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers for Question Answering",
    "question_toks":[
      "papers",
      "for",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"List papers that has keyword Question Answering",
    "question_toks":[
      "List",
      "papers",
      "that",
      "has",
      "keyword",
      "Question",
      "Answering"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Question",
      "Answering",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers with Question Answering in keyphrases",
    "question_toks":[
      "papers",
      "with",
      "Question",
      "Answering",
      "in",
      "keyphrases"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Question Answering\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Question Answering\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.keyphraseid",
      ",",
      "t3.year",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Luke",
      "S",
      "Zettlemoyer",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      ",",
      "t2.keyphraseid",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "keyphraseid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperkeyphrase",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      ",",
      "t2",
      ".",
      "keyphraseid"
    ],
    "question":"keyphrases used by Luke S Zettlemoyer for each year",
    "question_toks":[
      "keyphrases",
      "used",
      "by",
      "Luke",
      "S",
      "Zettlemoyer",
      "for",
      "each",
      "year"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              22,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke S Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperkeyphrase, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Luke S Zettlemoyer\"\")).select(paperkeyphrase(\"keyphraseid\"),paper(\"year\")).orderBy(paper(\"year\"),paperkeyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphrasename",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "sanjeev",
      "arora",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphrasename",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"recent research interests of sanjeev arora",
    "question_toks":[
      "recent",
      "research",
      "interests",
      "of",
      "sanjeev",
      "arora"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sanjeev arora\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sanjeev arora\"\")).select(keyphrase(\"keyphrasename\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphrasename",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "sanjeev",
      "arora",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphrasename",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"recent papers by sanjeev arora",
    "question_toks":[
      "recent",
      "papers",
      "by",
      "sanjeev",
      "arora"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sanjeev arora\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sanjeev arora\"\")).select(keyphrase(\"keyphrasename\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphrasename",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t4.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t5.authorname",
      "=",
      "``",
      "sanjeev",
      "arora",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphrasename",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t5",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"recent papers written by sanjeev arora",
    "question_toks":[
      "recent",
      "papers",
      "written",
      "by",
      "sanjeev",
      "arora"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"sanjeev arora\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"sanjeev arora\"\")).select(keyphrase(\"keyphrasename\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"balakrishnan prabhakaran\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "balakrishnan",
      "prabhakaran",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"list papers published by balakrishnan prabhakaran",
    "question_toks":[
      "list",
      "papers",
      "published",
      "by",
      "balakrishnan",
      "prabhakaran"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"balakrishnan prabhakaran\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"balakrishnan prabhakaran\"\")).select(paper(\"paperid\"),paper(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"zachary tatlock\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "zachary",
      "tatlock",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"citation count of zachary tatlock 's papers",
    "question_toks":[
      "citation",
      "count",
      "of",
      "zachary",
      "tatlock",
      "'s",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"zachary tatlock\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"zachary tatlock\"\")).select(paper(\"paperid\"),paper(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "subhasis",
      "chaudhuri",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"subhasis chaudhuri",
    "question_toks":[
      "subhasis",
      "chaudhuri"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"subhasis chaudhuri\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"subhasis chaudhuri\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "subhasis",
      "chaudhuri",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"list papers by subhasis chaudhuri",
    "question_toks":[
      "list",
      "papers",
      "by",
      "subhasis",
      "chaudhuri"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"subhasis chaudhuri\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"subhasis chaudhuri\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "subhasis",
      "chaudhuri",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"List of papers by subhasis chaudhuri",
    "question_toks":[
      "List",
      "of",
      "papers",
      "by",
      "subhasis",
      "chaudhuri"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"subhasis chaudhuri\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"subhasis chaudhuri\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "subhasis",
      "chaudhuri",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"conference papers of subhasis chaudhuri",
    "question_toks":[
      "conference",
      "papers",
      "of",
      "subhasis",
      "chaudhuri"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"subhasis chaudhuri\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"subhasis chaudhuri\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2014",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many parsing papers in ACL 2014",
    "question_toks":[
      "how",
      "many",
      "parsing",
      "papers",
      "in",
      "ACL",
      "2014"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"parsing\"\") && paper(\"year\") === 2014 && venue(\"venuename\") === col(\"\"ACL\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2014",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many parsing papers appeared in the proceeeding of ACL 2014 ?",
    "question_toks":[
      "how",
      "many",
      "parsing",
      "papers",
      "appeared",
      "in",
      "the",
      "proceeeding",
      "of",
      "ACL",
      "2014",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"parsing\"\") && paper(\"year\") === 2014 && venue(\"venuename\") === col(\"\"ACL\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "parsing",
      "''",
      "AND",
      "t3.year",
      "=",
      "2014",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many parsing papers were published at ACL 2014 ?",
    "question_toks":[
      "how",
      "many",
      "parsing",
      "papers",
      "were",
      "published",
      "at",
      "ACL",
      "2014",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"parsing\"\") && paper(\"year\") === 2014 && venue(\"venuename\") === col(\"\"ACL\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"brian curless convolution paper",
    "question_toks":[
      "brian",
      "curless",
      "convolution",
      "paper"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"convolution by brian curless",
    "question_toks":[
      "convolution",
      "by",
      "brian",
      "curless"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers by brian curless about convolution",
    "question_toks":[
      "papers",
      "by",
      "brian",
      "curless",
      "about",
      "convolution"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"brian curless 's paper about convolution",
    "question_toks":[
      "brian",
      "curless",
      "'s",
      "paper",
      "about",
      "convolution"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"What are the papers of brian curless in convolution ?",
    "question_toks":[
      "What",
      "are",
      "the",
      "papers",
      "of",
      "brian",
      "curless",
      "in",
      "convolution",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers brian curless wrote about convolution",
    "question_toks":[
      "papers",
      "brian",
      "curless",
      "wrote",
      "about",
      "convolution"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"brian curless 's papers on convolution",
    "question_toks":[
      "brian",
      "curless",
      "'s",
      "papers",
      "on",
      "convolution"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"What is the paper about convolution from brian curless ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "paper",
      "about",
      "convolution",
      "from",
      "brian",
      "curless",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers by brian curless in convolution topic",
    "question_toks":[
      "papers",
      "by",
      "brian",
      "curless",
      "in",
      "convolution",
      "topic"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"I want the papers on keyphrase0 by brian curless",
    "question_toks":[
      "I",
      "want",
      "the",
      "papers",
      "on",
      "keyphrase0",
      "by",
      "brian",
      "curless"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"convolution papers by brian curless",
    "question_toks":[
      "convolution",
      "papers",
      "by",
      "brian",
      "curless"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"What papers has brian curless written on convolution ?",
    "question_toks":[
      "What",
      "papers",
      "has",
      "brian",
      "curless",
      "written",
      "on",
      "convolution",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"What papers has brian curless written about convolution ?",
    "question_toks":[
      "What",
      "papers",
      "has",
      "brian",
      "curless",
      "written",
      "about",
      "convolution",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"convolution paper by brian curless",
    "question_toks":[
      "convolution",
      "paper",
      "by",
      "brian",
      "curless"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "brian",
      "curless",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "convolution",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"Does brian curless do convolution ?",
    "question_toks":[
      "Does",
      "brian",
      "curless",
      "do",
      "convolution",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"brian curless\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolution\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"brian curless\"\") && keyphrase(\"keyphrasename\") === col(\"\"convolution\"\")).select(author(\"authorid\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What papers has Liwen Xiong written in 2015",
    "question_toks":[
      "What",
      "papers",
      "has",
      "Liwen",
      "Xiong",
      "written",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"papers by Liwen Xiong in 2015",
    "question_toks":[
      "papers",
      "by",
      "Liwen",
      "Xiong",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What did Liwen Xiong published in 2015 ?",
    "question_toks":[
      "What",
      "did",
      "Liwen",
      "Xiong",
      "published",
      "in",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Papers written by Liwen Xiong in 2015",
    "question_toks":[
      "Papers",
      "written",
      "by",
      "Liwen",
      "Xiong",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What are the papers of Liwen Xiong in 2015",
    "question_toks":[
      "What",
      "are",
      "the",
      "papers",
      "of",
      "Liwen",
      "Xiong",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"papers by Liwen Xiong from 2015",
    "question_toks":[
      "papers",
      "by",
      "Liwen",
      "Xiong",
      "from",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Papers published in 2015 by Liwen Xiong",
    "question_toks":[
      "Papers",
      "published",
      "in",
      "2015",
      "by",
      "Liwen",
      "Xiong"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"what has Liwen Xiong done in the past year",
    "question_toks":[
      "what",
      "has",
      "Liwen",
      "Xiong",
      "done",
      "in",
      "the",
      "past",
      "year"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What papers did Liwen Xiong publish last year ?",
    "question_toks":[
      "What",
      "papers",
      "did",
      "Liwen",
      "Xiong",
      "publish",
      "last",
      "year",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"papers published in 2015 by Liwen Xiong",
    "question_toks":[
      "papers",
      "published",
      "in",
      "2015",
      "by",
      "Liwen",
      "Xiong"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Liwen Xiong 's papers in 2015 ?",
    "question_toks":[
      "Liwen",
      "Xiong",
      "'s",
      "papers",
      "in",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Liwen Xiong 's papers in 2015",
    "question_toks":[
      "Liwen",
      "Xiong",
      "'s",
      "papers",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Liwen Xiong publication 2015",
    "question_toks":[
      "Liwen",
      "Xiong",
      "publication",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Papers authored by Liwen Xiong in 2015",
    "question_toks":[
      "Papers",
      "authored",
      "by",
      "Liwen",
      "Xiong",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Papers from Liwen Xiong in 2015",
    "question_toks":[
      "Papers",
      "from",
      "Liwen",
      "Xiong",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Liwen",
      "Xiong",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"what papers are published by Liwen Xiong in 2015",
    "question_toks":[
      "what",
      "papers",
      "are",
      "published",
      "by",
      "Liwen",
      "Xiong",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Liwen Xiong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Liwen Xiong\"\") && paper(\"year\") === 2015).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "TAIL",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"What TAIL paper published in NIPS ?",
    "question_toks":[
      "What",
      "TAIL",
      "paper",
      "published",
      "in",
      "NIPS",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"TAIL\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"TAIL\"\") && venue(\"venuename\") === col(\"\"NIPS\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "TAIL",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"List the papers on TAIL that were published in NIPS",
    "question_toks":[
      "List",
      "the",
      "papers",
      "on",
      "TAIL",
      "that",
      "were",
      "published",
      "in",
      "NIPS"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"TAIL\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"TAIL\"\") && venue(\"venuename\") === col(\"\"NIPS\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "TAIL",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"what are the papers in NIPS about TAIL ?",
    "question_toks":[
      "what",
      "are",
      "the",
      "papers",
      "in",
      "NIPS",
      "about",
      "TAIL",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"TAIL\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"TAIL\"\") && venue(\"venuename\") === col(\"\"NIPS\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "TAIL",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Papers about TAIL in NIPS",
    "question_toks":[
      "Papers",
      "about",
      "TAIL",
      "in",
      "NIPS"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"TAIL\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"TAIL\"\") && venue(\"venuename\") === col(\"\"NIPS\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "TAIL",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers at NIPS related to TAIL",
    "question_toks":[
      "papers",
      "at",
      "NIPS",
      "related",
      "to",
      "TAIL"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"TAIL\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"TAIL\"\") && venue(\"venuename\") === col(\"\"NIPS\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "TAIL",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers about TAIL published at NIPS",
    "question_toks":[
      "papers",
      "about",
      "TAIL",
      "published",
      "at",
      "NIPS"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"TAIL\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"TAIL\"\") && venue(\"venuename\") === col(\"\"NIPS\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "TAIL",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"TAIL papers in NIPS",
    "question_toks":[
      "TAIL",
      "papers",
      "in",
      "NIPS"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"TAIL\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"TAIL\"\") && venue(\"venuename\") === col(\"\"NIPS\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "TAIL",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers on TAIL NIPS",
    "question_toks":[
      "papers",
      "on",
      "TAIL",
      "NIPS"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"TAIL\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"TAIL\"\") && venue(\"venuename\") === col(\"\"NIPS\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "TAIL",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"TAIL papers used in NIPS",
    "question_toks":[
      "TAIL",
      "papers",
      "used",
      "in",
      "NIPS"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"TAIL\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"TAIL\"\") && venue(\"venuename\") === col(\"\"NIPS\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.authorid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "!",
      "=",
      "``",
      "Mark",
      "Steedman",
      "''",
      "AND",
      "t2.paperid",
      "IN",
      "(",
      "SELECT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Mark",
      "Steedman",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "authorid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "!",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "paperid",
      "in",
      "(",
      "select",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      ")"
    ],
    "question":"How many co-authors has Mark Steedman had ?",
    "question_toks":[
      "How",
      "many",
      "co-authors",
      "has",
      "Mark",
      "Steedman",
      "had",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Mark Steedman\"",
          null
        ],
        "and",
        [
          false,
          8,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      25,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ]
              ],
              "table_units":[
                [
                  "table_unit",
                  9
                ],
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      24,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    4,
                    false
                  ],
                  null
                ],
                "\"Mark Steedman\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") =!= col(\"\"Mark Steedman\"\") && t2.paperid IN (SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Mark Steedman\")).agg(COUNT(author(\"authorid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.keyphraseid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christof",
      "Dallermassl",
      "''",
      "AND",
      "t3.year",
      "=",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "keyphraseid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperkeyphrase",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"keyphrases used by Christof Dallermassl in 2000",
    "question_toks":[
      "keyphrases",
      "used",
      "by",
      "Christof",
      "Dallermassl",
      "in",
      "2000"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              22,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christof Dallermassl\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperkeyphrase, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christof Dallermassl\"\") && paper(\"year\") === 2000).select(paperkeyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.keyphraseid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christof",
      "Dallermassl",
      "''",
      "AND",
      "t3.year",
      "=",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "keyphraseid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperkeyphrase",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Keyphrases used by Christof Dallermassl in 2000",
    "question_toks":[
      "Keyphrases",
      "used",
      "by",
      "Christof",
      "Dallermassl",
      "in",
      "2000"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              22,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christof Dallermassl\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperkeyphrase, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christof Dallermassl\"\") && paper(\"year\") === 2000).select(paperkeyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.keyphraseid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christof",
      "Dallermassl",
      "''",
      "AND",
      "t3.year",
      "=",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "keyphraseid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperkeyphrase",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"keyphrases Christof Dallermassl used in papers written last year",
    "question_toks":[
      "keyphrases",
      "Christof",
      "Dallermassl",
      "used",
      "in",
      "papers",
      "written",
      "last",
      "year"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              22,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christof Dallermassl\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperkeyphrase, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christof Dallermassl\"\") && paper(\"year\") === 2000).select(paperkeyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.keyphraseid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Christof",
      "Dallermassl",
      "''",
      "AND",
      "t3.year",
      "=",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "keyphraseid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperkeyphrase",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What are keyphrases by Christof Dallermassl in 2000 ?",
    "question_toks":[
      "What",
      "are",
      "keyphrases",
      "by",
      "Christof",
      "Dallermassl",
      "in",
      "2000",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              22,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Christof Dallermassl\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperkeyphrase, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Christof Dallermassl\"\") && paper(\"year\") === 2000).select(paperkeyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "mohammad",
      "rastegari",
      "''",
      "AND",
      "t3.journalid",
      ">",
      "=",
      "0",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "journalid",
      ">",
      "=",
      "value"
    ],
    "question":"journal articles by mohammad rastegari",
    "question_toks":[
      "journal",
      "articles",
      "by",
      "mohammad",
      "rastegari"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"mohammad rastegari\"",
          null
        ],
        "and",
        [
          false,
          5,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          0.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"mohammad rastegari\"\") && paper(\"journalid\") >= 0).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "mohammad",
      "rastegari",
      "''",
      "AND",
      "t3.journalid",
      ">",
      "=",
      "0",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "journalid",
      ">",
      "=",
      "value"
    ],
    "question":"Journal Papers by mohammad rastegari",
    "question_toks":[
      "Journal",
      "Papers",
      "by",
      "mohammad",
      "rastegari"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"mohammad rastegari\"",
          null
        ],
        "and",
        [
          false,
          5,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          0.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"mohammad rastegari\"\") && paper(\"journalid\") >= 0).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t2.year",
      "=",
      "2016",
      "AND",
      "t3.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"who published at acl 2016 ?",
    "question_toks":[
      "who",
      "published",
      "at",
      "acl",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"acl\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t2.year",
      "=",
      "2016",
      "AND",
      "t3.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"acl 2016 authors",
    "question_toks":[
      "acl",
      "2016",
      "authors"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"acl\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t2.year",
      "=",
      "2016",
      "AND",
      "t3.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"authors of acl 2016 papers",
    "question_toks":[
      "authors",
      "of",
      "acl",
      "2016",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"acl\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t2.year",
      "=",
      "2016",
      "AND",
      "t3.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"List of authors acl 2016",
    "question_toks":[
      "List",
      "of",
      "authors",
      "acl",
      "2016"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"acl\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t2.year",
      "=",
      "2016",
      "AND",
      "t3.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"author published acl 2016",
    "question_toks":[
      "author",
      "published",
      "acl",
      "2016"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"acl\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t2.year",
      "=",
      "2016",
      "AND",
      "t3.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"who had papers at acl 2016 ?",
    "question_toks":[
      "who",
      "had",
      "papers",
      "at",
      "acl",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"acl\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t2.year",
      "=",
      "2016",
      "AND",
      "t3.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"List of authors in acl 2016",
    "question_toks":[
      "List",
      "of",
      "authors",
      "in",
      "acl",
      "2016"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"acl\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.citedpaperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "cite",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.citingpaperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Mirella",
      "Lapata",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "citedpaperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "cite",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "citingpaperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"How many papers did Mirella Lapata cite ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "did",
      "Mirella",
      "Lapata",
      "cite",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Mirella Lapata\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(cite, writes(\"paperid\") === cite(\"citingpaperid\"), inner).filter(author(\"authorname\") === col(\"\"Mirella Lapata\"\")).agg(COUNT(cite(\"citedpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.citedpaperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "cite",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.citingpaperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Mirella",
      "Lapata",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "citedpaperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "cite",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "citingpaperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"how many papers does Mirella Lapata cite",
    "question_toks":[
      "how",
      "many",
      "papers",
      "does",
      "Mirella",
      "Lapata",
      "cite"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Mirella Lapata\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(cite, writes(\"paperid\") === cite(\"citingpaperid\"), inner).filter(author(\"authorname\") === col(\"\"Mirella Lapata\"\")).agg(COUNT(cite(\"citedpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.citedpaperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "cite",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.citingpaperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Mirella",
      "Lapata",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "citedpaperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "cite",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "citingpaperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"how many papers has Mirella Lapata cited ?",
    "question_toks":[
      "how",
      "many",
      "papers",
      "has",
      "Mirella",
      "Lapata",
      "cited",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Mirella Lapata\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(cite, writes(\"paperid\") === cite(\"citingpaperid\"), inner).filter(author(\"authorname\") === col(\"\"Mirella Lapata\"\")).agg(COUNT(cite(\"citedpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.year;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.year",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Michael",
      "Stonebraker",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "VLDB",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "year",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year"
    ],
    "question":"When does Michael Stonebraker publish the first VLDB paper ?",
    "question_toks":[
      "When",
      "does",
      "Michael",
      "Stonebraker",
      "publish",
      "the",
      "first",
      "VLDB",
      "paper",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Michael Stonebraker\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Michael Stonebraker\"\") && venue(\"venuename\") === col(\"\"VLDB\"\")).select(paper(\"year\")).orderBy(paper(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"semantic parsing dataset",
    "question_toks":[
      "semantic",
      "parsing",
      "dataset"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"data sets for semantic parsing",
    "question_toks":[
      "data",
      "sets",
      "for",
      "semantic",
      "parsing"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"list datasets for semantic parsing",
    "question_toks":[
      "list",
      "datasets",
      "for",
      "semantic",
      "parsing"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"datasets for semantic parsing",
    "question_toks":[
      "datasets",
      "for",
      "semantic",
      "parsing"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"Datasets with semantic parsing information",
    "question_toks":[
      "Datasets",
      "with",
      "semantic",
      "parsing",
      "information"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"datasets used by semantic parsing papers",
    "question_toks":[
      "datasets",
      "used",
      "by",
      "semantic",
      "parsing",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"datasets in semantic parsing papers",
    "question_toks":[
      "datasets",
      "in",
      "semantic",
      "parsing",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"semantic parsing datasets",
    "question_toks":[
      "semantic",
      "parsing",
      "datasets"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"datasets in papers about semantic parsing",
    "question_toks":[
      "datasets",
      "in",
      "papers",
      "about",
      "semantic",
      "parsing"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"datasets used for semantic parsing",
    "question_toks":[
      "datasets",
      "used",
      "for",
      "semantic",
      "parsing"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"large-scale datasets used in semantic parsing",
    "question_toks":[
      "large-scale",
      "datasets",
      "used",
      "in",
      "semantic",
      "parsing"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"datasets with semantic parsing",
    "question_toks":[
      "datasets",
      "with",
      "semantic",
      "parsing"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t1.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t4.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"datasets used for evaluating semantic parsing",
    "question_toks":[
      "datasets",
      "used",
      "for",
      "evaluating",
      "semantic",
      "parsing"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.journalid",
      ",",
      "t4.venueid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "journalid",
      ",",
      "t4",
      ".",
      "venueid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"where does Peter Mertens publish ?",
    "question_toks":[
      "where",
      "does",
      "Peter",
      "Mertens",
      "publish",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\")).select(paper(\"journalid\"),venue(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.journalid",
      ",",
      "t4.venueid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "journalid",
      ",",
      "t4",
      ".",
      "venueid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"in what venues does Peter Mertens publish ?",
    "question_toks":[
      "in",
      "what",
      "venues",
      "does",
      "Peter",
      "Mertens",
      "publish",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\")).select(paper(\"journalid\"),venue(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.journalid",
      ",",
      "t4.venueid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Peter",
      "Mertens",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "journalid",
      ",",
      "t4",
      ".",
      "venueid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Where does Peter Mertens publish ?",
    "question_toks":[
      "Where",
      "does",
      "Peter",
      "Mertens",
      "publish",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Peter Mertens\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Peter Mertens\"\")).select(paper(\"journalid\"),venue(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "nature",
      "communications",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many papers appeared at nature communications last year",
    "question_toks":[
      "how",
      "many",
      "papers",
      "appeared",
      "at",
      "nature",
      "communications",
      "last",
      "year"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nature communications\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"nature communications\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "nature",
      "communications",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers were at nature communications 2015 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "were",
      "at",
      "nature",
      "communications",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nature communications\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"nature communications\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "nature",
      "communications",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many papers accepted in nature communications 2015",
    "question_toks":[
      "how",
      "many",
      "papers",
      "accepted",
      "in",
      "nature",
      "communications",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nature communications\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"nature communications\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "nature",
      "communications",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers were published in nature communications in 2015 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "were",
      "published",
      "in",
      "nature",
      "communications",
      "in",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nature communications\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"nature communications\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "nature",
      "communications",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers on nature communications in 2015 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "on",
      "nature",
      "communications",
      "in",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nature communications\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"nature communications\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "nature",
      "communications",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many papers in nature communications 2015",
    "question_toks":[
      "how",
      "many",
      "papers",
      "in",
      "nature",
      "communications",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nature communications\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"nature communications\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "nature",
      "communications",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers were accepted at nature communications 2015 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "were",
      "accepted",
      "at",
      "nature",
      "communications",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nature communications\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"nature communications\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "nature",
      "communications",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers are presented in nature communications 2015 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "are",
      "presented",
      "in",
      "nature",
      "communications",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nature communications\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"nature communications\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "nature",
      "communications",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers published in nature communications in 2015 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "published",
      "in",
      "nature",
      "communications",
      "in",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nature communications\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"nature communications\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "nature",
      "communications",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many papers published in nature communications 2015 ?",
    "question_toks":[
      "how",
      "many",
      "papers",
      "published",
      "in",
      "nature",
      "communications",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nature communications\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"nature communications\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "nature",
      "communications",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers were published in nature communications 2015 conference ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "were",
      "published",
      "in",
      "nature",
      "communications",
      "2015",
      "conference",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nature communications\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"nature communications\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "nature",
      "communications",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers was published in nature communications in 2015",
    "question_toks":[
      "How",
      "many",
      "papers",
      "was",
      "published",
      "in",
      "nature",
      "communications",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nature communications\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"nature communications\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      ",",
      "t4.year",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "paper",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t1.keyphraseid",
      "=",
      "t5.keyphraseid",
      "WHERE",
      "t5.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t4.year",
      "ASC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      ",",
      "t4",
      ".",
      "year",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "paper",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "where",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t4",
      ".",
      "year",
      "asc"
    ],
    "question":"what was the first deep learning paper ?",
    "question_toks":[
      "what",
      "was",
      "the",
      "first",
      "deep",
      "learning",
      "paper",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(dataset(\"datasetid\"),paper(\"year\")).orderBy(asc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      ",",
      "t4.year",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "paper",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t1.keyphraseid",
      "=",
      "t5.keyphraseid",
      "WHERE",
      "t5.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t4.year",
      "ASC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      ",",
      "t4",
      ".",
      "year",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "paper",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "where",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t4",
      ".",
      "year",
      "asc"
    ],
    "question":"what year was the first deep learning paper published ?",
    "question_toks":[
      "what",
      "year",
      "was",
      "the",
      "first",
      "deep",
      "learning",
      "paper",
      "published",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(dataset(\"datasetid\"),paper(\"year\")).orderBy(asc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t4.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"datasets mentioned at ACL",
    "question_toks":[
      "datasets",
      "mentioned",
      "at",
      "ACL"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"ACL\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.datasetid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t4.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "datasetid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"what datasets do papers at ACL use most ?",
    "question_toks":[
      "what",
      "datasets",
      "do",
      "papers",
      "at",
      "ACL",
      "use",
      "most",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"ACL\"\")).select(dataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper AS t2 ON t2.paperid  =  t5.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"li dong\" AND t3.keyphrasename  =  \"semantic parsing\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t5",
      "JOIN",
      "keyphrase",
      "AS",
      "t3",
      "ON",
      "t5.keyphraseid",
      "=",
      "t3.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t5.paperid",
      "JOIN",
      "venue",
      "AS",
      "t6",
      "ON",
      "t6.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "li",
      "dong",
      "''",
      "AND",
      "t3.keyphrasename",
      "=",
      "``",
      "semantic",
      "parsing",
      "''",
      "AND",
      "t2.year",
      "=",
      "2016",
      "AND",
      "t6.venuename",
      "=",
      "``",
      "acl",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t5",
      "join",
      "keyphrase",
      "as",
      "t3",
      "on",
      "t5",
      ".",
      "keyphraseid",
      "=",
      "t3",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t5",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t6",
      "on",
      "t6",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t6",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"the papers on semantic parsing by li dong at acl in 2016",
    "question_toks":[
      "the",
      "papers",
      "on",
      "semantic",
      "parsing",
      "by",
      "li",
      "dong",
      "at",
      "acl",
      "in",
      "2016"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"li dong\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"semantic parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"acl\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"li dong\"\") && keyphrase(\"keyphrasename\") === col(\"\"semantic parsing\"\") && paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"acl\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "convolutional",
      "neural",
      "networks",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"How many papers were written on convolutional neural networks in the past year ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "were",
      "written",
      "on",
      "convolutional",
      "neural",
      "networks",
      "in",
      "the",
      "past",
      "year",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolutional neural networks\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"convolutional neural networks\"\") && paper(\"year\") === 2016).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "convolutional",
      "neural",
      "networks",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"How many papers were published on convolutional neural networks in 2016 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "were",
      "published",
      "on",
      "convolutional",
      "neural",
      "networks",
      "in",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolutional neural networks\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"convolutional neural networks\"\") && paper(\"year\") === 2016).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "convolutional",
      "neural",
      "networks",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"How many papers were written on convolutional neural networks in 2016 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "were",
      "written",
      "on",
      "convolutional",
      "neural",
      "networks",
      "in",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolutional neural networks\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"convolutional neural networks\"\") && paper(\"year\") === 2016).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "convolutional",
      "neural",
      "networks",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"How many papers were written on the convolutional neural networks this year ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "were",
      "written",
      "on",
      "the",
      "convolutional",
      "neural",
      "networks",
      "this",
      "year",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolutional neural networks\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"convolutional neural networks\"\") && paper(\"year\") === 2016).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "convolutional",
      "neural",
      "networks",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"how many papers on convolutional neural networks have been published in the past year ?",
    "question_toks":[
      "how",
      "many",
      "papers",
      "on",
      "convolutional",
      "neural",
      "networks",
      "have",
      "been",
      "published",
      "in",
      "the",
      "past",
      "year",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"convolutional neural networks\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"convolutional neural networks\"\") && paper(\"year\") === 2016).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "question",
      "answering",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What papers were written on question answering this year ?",
    "question_toks":[
      "What",
      "papers",
      "were",
      "written",
      "on",
      "question",
      "answering",
      "this",
      "year",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"question answering\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"question answering\"\") && paper(\"year\") === 2016).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"who writes papers with Noah A Smith ?",
    "question_toks":[
      "who",
      "writes",
      "papers",
      "with",
      "Noah",
      "A",
      "Smith",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Who is a coauthor with Noah A Smith ?",
    "question_toks":[
      "Who",
      "is",
      "a",
      "coauthor",
      "with",
      "Noah",
      "A",
      "Smith",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Who are Noah A Smith 's co-authors",
    "question_toks":[
      "Who",
      "are",
      "Noah",
      "A",
      "Smith",
      "'s",
      "co-authors"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Who has coauthored with Noah A Smith ?",
    "question_toks":[
      "Who",
      "has",
      "coauthored",
      "with",
      "Noah",
      "A",
      "Smith",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"co-authors of Noah A Smith",
    "question_toks":[
      "co-authors",
      "of",
      "Noah",
      "A",
      "Smith"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"author who wrote papers with Noah A Smith",
    "question_toks":[
      "author",
      "who",
      "wrote",
      "papers",
      "with",
      "Noah",
      "A",
      "Smith"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"authors who collaborated with Noah A Smith",
    "question_toks":[
      "authors",
      "who",
      "collaborated",
      "with",
      "Noah",
      "A",
      "Smith"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"who does Noah A Smith author with ?",
    "question_toks":[
      "who",
      "does",
      "Noah",
      "A",
      "Smith",
      "author",
      "with",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Who are Noah A Smith 's coauthors",
    "question_toks":[
      "Who",
      "are",
      "Noah",
      "A",
      "Smith",
      "'s",
      "coauthors"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"who are all the co-authors of Noah A Smith ?",
    "question_toks":[
      "who",
      "are",
      "all",
      "the",
      "co-authors",
      "of",
      "Noah",
      "A",
      "Smith",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"who does Noah A Smith work with ?",
    "question_toks":[
      "who",
      "does",
      "Noah",
      "A",
      "Smith",
      "work",
      "with",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"who does Noah A Smith collaborate with ?",
    "question_toks":[
      "who",
      "does",
      "Noah",
      "A",
      "Smith",
      "collaborate",
      "with",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Who are Noah A Smith 's coauthors ?",
    "question_toks":[
      "Who",
      "are",
      "Noah",
      "A",
      "Smith",
      "'s",
      "coauthors",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Noah",
      "A",
      "Smith",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"coauthors of Noah A Smith",
    "question_toks":[
      "coauthors",
      "of",
      "Noah",
      "A",
      "Smith"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah A Smith\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Noah A Smith\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperdataset",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "jitendra",
      "malik",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperdataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"what datasets did jitendra malik use ?",
    "question_toks":[
      "what",
      "datasets",
      "did",
      "jitendra",
      "malik",
      "use",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"jitendra malik\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperdataset, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"jitendra malik\"\")).select(paperdataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperdataset",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "jitendra",
      "malik",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperdataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"what datasets are used in papers by jitendra malik",
    "question_toks":[
      "what",
      "datasets",
      "are",
      "used",
      "in",
      "papers",
      "by",
      "jitendra",
      "malik"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"jitendra malik\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperdataset, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"jitendra malik\"\")).select(paperdataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperdataset",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "jitendra",
      "malik",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperdataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"what datasets did jitendra malik use in his papers ?",
    "question_toks":[
      "what",
      "datasets",
      "did",
      "jitendra",
      "malik",
      "use",
      "in",
      "his",
      "papers",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"jitendra malik\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperdataset, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"jitendra malik\"\")).select(paperdataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperdataset",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "jitendra",
      "malik",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperdataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"what datasets were used by jitendra malik ?",
    "question_toks":[
      "what",
      "datasets",
      "were",
      "used",
      "by",
      "jitendra",
      "malik",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"jitendra malik\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperdataset, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"jitendra malik\"\")).select(paperdataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperdataset",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "jitendra",
      "malik",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperdataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"datasets used in papers written by jitendra malik ?",
    "question_toks":[
      "datasets",
      "used",
      "in",
      "papers",
      "written",
      "by",
      "jitendra",
      "malik",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"jitendra malik\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperdataset, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"jitendra malik\"\")).select(paperdataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperdataset",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "jitendra",
      "malik",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperdataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Datasets by jitendra malik",
    "question_toks":[
      "Datasets",
      "by",
      "jitendra",
      "malik"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"jitendra malik\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperdataset, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"jitendra malik\"\")).select(paperdataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.datasetid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperdataset",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "jitendra",
      "malik",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "datasetid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperdataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What datasets have jitendra malik used",
    "question_toks":[
      "What",
      "datasets",
      "have",
      "jitendra",
      "malik",
      "used"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"jitendra malik\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperdataset, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"jitendra malik\"\")).select(paperdataset(\"datasetid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"recent deep learning papers",
    "question_toks":[
      "recent",
      "deep",
      "learning",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"new deep learning papers",
    "question_toks":[
      "new",
      "deep",
      "learning",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"What are the latest publications on deep learning ?",
    "question_toks":[
      "What",
      "are",
      "the",
      "latest",
      "publications",
      "on",
      "deep",
      "learning",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"Most recent deep learning conference ?",
    "question_toks":[
      "Most",
      "recent",
      "deep",
      "learning",
      "conference",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"Show me some recent papers on deep learning ?",
    "question_toks":[
      "Show",
      "me",
      "some",
      "recent",
      "papers",
      "on",
      "deep",
      "learning",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"What are some recent papers written in deep learning ?",
    "question_toks":[
      "What",
      "are",
      "some",
      "recent",
      "papers",
      "written",
      "in",
      "deep",
      "learning",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"What is the most recent paper of deep learning ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "most",
      "recent",
      "paper",
      "of",
      "deep",
      "learning",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"What are recent papers on deep learning ?",
    "question_toks":[
      "What",
      "are",
      "recent",
      "papers",
      "on",
      "deep",
      "learning",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"Current research on deep learning",
    "question_toks":[
      "Current",
      "research",
      "on",
      "deep",
      "learning"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"latest deep learning papers",
    "question_toks":[
      "latest",
      "deep",
      "learning",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc"
    ],
    "question":"newest deep learning papers",
    "question_toks":[
      "newest",
      "deep",
      "learning",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(desc(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" ORDER BY t3.year;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "jamie",
      "callan",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year"
    ],
    "question":"jamie callan 's publications by year",
    "question_toks":[
      "jamie",
      "callan",
      "'s",
      "publications",
      "by",
      "year"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"jamie callan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"jamie callan\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(paper(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citingpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "oren",
      "etzioni",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citingpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"who does oren etzioni cite",
    "question_toks":[
      "who",
      "does",
      "oren",
      "etzioni",
      "cite"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"oren etzioni\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citingpaperid\"), inner).join(writes, writes(\"paperid\") === cite(\"citedpaperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"oren etzioni\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citingpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "oren",
      "etzioni",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citingpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"what papers does oren etzioni cite",
    "question_toks":[
      "what",
      "papers",
      "does",
      "oren",
      "etzioni",
      "cite"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"oren etzioni\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citingpaperid\"), inner).join(writes, writes(\"paperid\") === cite(\"citedpaperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"oren etzioni\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citingpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Daniel",
      "Jurafsky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citingpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"papers citing Daniel Jurafsky",
    "question_toks":[
      "papers",
      "citing",
      "Daniel",
      "Jurafsky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Daniel Jurafsky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citingpaperid\"), inner).join(writes, writes(\"paperid\") === cite(\"citedpaperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Daniel Jurafsky\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citingpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Daniel",
      "Jurafsky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citingpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What papers cite Daniel Jurafsky ?",
    "question_toks":[
      "What",
      "papers",
      "cite",
      "Daniel",
      "Jurafsky",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Daniel Jurafsky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citingpaperid\"), inner).join(writes, writes(\"paperid\") === cite(\"citedpaperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Daniel Jurafsky\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citingpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Daniel",
      "Jurafsky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citingpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Which papers cite Daniel Jurafsky ?",
    "question_toks":[
      "Which",
      "papers",
      "cite",
      "Daniel",
      "Jurafsky",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Daniel Jurafsky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citingpaperid\"), inner).join(writes, writes(\"paperid\") === cite(\"citedpaperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Daniel Jurafsky\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citingpaperid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t4.citedpaperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Daniel",
      "Jurafsky",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citingpaperid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citedpaperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"citations for Daniel Jurafsky",
    "question_toks":[
      "citations",
      "for",
      "Daniel",
      "Jurafsky"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Daniel Jurafsky\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citingpaperid\"), inner).join(writes, writes(\"paperid\") === cite(\"citedpaperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Daniel Jurafsky\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"instance segmentation\" AND t3.journalid  >=  0;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "instance",
      "segmentation",
      "''",
      "AND",
      "t3.journalid",
      ">",
      "=",
      "0",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "journalid",
      ">",
      "=",
      "value"
    ],
    "question":"journal papers for instance segmentation",
    "question_toks":[
      "journal",
      "papers",
      "for",
      "instance",
      "segmentation"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"instance segmentation\"",
          null
        ],
        "and",
        [
          false,
          5,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          0.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"instance segmentation\"\") && paper(\"journalid\") >= 0).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN cite AS t5 ON t4.paperid  =  t5.citedpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Dan Makumbi\" AND t3.keyphrasename  =  \"Genetic Identity\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t5.citingpaperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t3",
      "ON",
      "t2.keyphraseid",
      "=",
      "t3.keyphraseid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "cite",
      "AS",
      "t5",
      "ON",
      "t4.paperid",
      "=",
      "t5.citedpaperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Dan",
      "Makumbi",
      "''",
      "AND",
      "t3.keyphrasename",
      "=",
      "``",
      "Genetic",
      "Identity",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t5",
      ".",
      "citingpaperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t3",
      ".",
      "keyphraseid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "cite",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t5",
      ".",
      "citedpaperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"How many citations does Dan Makumbi 's Genetic Identity paper have ?",
    "question_toks":[
      "How",
      "many",
      "citations",
      "does",
      "Dan",
      "Makumbi",
      "'s",
      "Genetic",
      "Identity",
      "paper",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Dan Makumbi\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Genetic Identity\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(writes, writes(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(cite, writes(\"paperid\") === cite(\"citedpaperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Dan Makumbi\"\") && keyphrase(\"keyphrasename\") === col(\"\"Genetic Identity\"\")).agg(COUNT(cite(\"citingpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "character",
      "recognition",
      "''",
      "AND",
      "t3.year",
      "<",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"character recognition papers earlier than 2010",
    "question_toks":[
      "character",
      "recognition",
      "papers",
      "earlier",
      "than",
      "2010"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"character recognition\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"character recognition\"\") && paper(\"year\") < 2010).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "character",
      "recognition",
      "''",
      "AND",
      "t3.year",
      "<",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"papers before 2010 about character recognition",
    "question_toks":[
      "papers",
      "before",
      "2010",
      "about",
      "character",
      "recognition"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"character recognition\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"character recognition\"\") && paper(\"year\") < 2010).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "character",
      "recognition",
      "''",
      "AND",
      "t3.year",
      "<",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"character recognition papers from before 2010",
    "question_toks":[
      "character",
      "recognition",
      "papers",
      "from",
      "before",
      "2010"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"character recognition\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"character recognition\"\") && paper(\"year\") < 2010).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "character",
      "recognition",
      "''",
      "AND",
      "t3.year",
      "<",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"papers about character recognition from before 2010",
    "question_toks":[
      "papers",
      "about",
      "character",
      "recognition",
      "from",
      "before",
      "2010"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"character recognition\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"character recognition\"\") && paper(\"year\") < 2010).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "character",
      "recognition",
      "''",
      "AND",
      "t3.year",
      "<",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"character recognition papers before 2010",
    "question_toks":[
      "character",
      "recognition",
      "papers",
      "before",
      "2010"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"character recognition\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"character recognition\"\") && paper(\"year\") < 2010).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"deep learning\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t4.paperid",
      ")",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t2",
      "ON",
      "t3.datasetid",
      "=",
      "t2.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t4.paperid",
      "=",
      "t1.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t1.keyphraseid",
      "=",
      "t5.keyphraseid",
      "WHERE",
      "t2.datasetname",
      "=",
      "``",
      "ImageNet",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "deep",
      "learning",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t4",
      ".",
      "paperid",
      ")",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t2",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t1",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "where",
      "t2",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"How many papers related to deep learning cited the dataset ImageNet ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "related",
      "to",
      "deep",
      "learning",
      "cited",
      "the",
      "dataset",
      "ImageNet",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"ImageNet\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep learning\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(paperkeyphrase, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(dataset(\"datasetname\") === col(\"\"ImageNet\"\") && keyphrase(\"keyphrasename\") === col(\"\"deep learning\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "michael",
      "i.",
      "jordan",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"How many papers did michael i. jordan publish in 2016 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "did",
      "michael",
      "i.",
      "jordan",
      "publish",
      "in",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"michael i. jordan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"michael i. jordan\"\") && paper(\"year\") === 2016).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "michael",
      "i.",
      "jordan",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"How many papers does michael i. jordan have in 2016 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "does",
      "michael",
      "i.",
      "jordan",
      "have",
      "in",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"michael i. jordan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"michael i. jordan\"\") && paper(\"year\") === 2016).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "michael",
      "i.",
      "jordan",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"How many papers did michael i. jordan publish in 2016",
    "question_toks":[
      "How",
      "many",
      "papers",
      "did",
      "michael",
      "i.",
      "jordan",
      "publish",
      "in",
      "2016"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"michael i. jordan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"michael i. jordan\"\") && paper(\"year\") === 2016).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers in ACL 2015 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "in",
      "ACL",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"ACL\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"number of papers published in ACL 2015",
    "question_toks":[
      "number",
      "of",
      "papers",
      "published",
      "in",
      "ACL",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"ACL\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "paperid",
      "FROM",
      "paper",
      "WHERE",
      "YEAR",
      "=",
      "2014",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "paperid",
      "from",
      "paper",
      "where",
      "year",
      "=",
      "value"
    ],
    "question":"papers from 2014",
    "question_toks":[
      "papers",
      "from",
      "2014"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.filter(col(\"YEAR\") === 2014).select(col(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "paperid",
      "FROM",
      "paper",
      "WHERE",
      "YEAR",
      "=",
      "2014",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "paperid",
      "from",
      "paper",
      "where",
      "year",
      "=",
      "value"
    ],
    "question":"2014 papers",
    "question_toks":[
      "2014",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.filter(col(\"YEAR\") === 2014).select(col(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Richard",
      "Ladner",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"What papers does Richard Ladner have in chi ?",
    "question_toks":[
      "What",
      "papers",
      "does",
      "Richard",
      "Ladner",
      "have",
      "in",
      "chi",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Richard Ladner\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Richard Ladner\"\") && venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Richard",
      "Ladner",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"what paper has Richard Ladner published in chi journal ?",
    "question_toks":[
      "what",
      "paper",
      "has",
      "Richard",
      "Ladner",
      "published",
      "in",
      "chi",
      "journal",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Richard Ladner\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Richard Ladner\"\") && venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Richard",
      "Ladner",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"what paper has Richard Ladner published in chi ?",
    "question_toks":[
      "what",
      "paper",
      "has",
      "Richard",
      "Ladner",
      "published",
      "in",
      "chi",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Richard Ladner\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Richard Ladner\"\") && venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Richard",
      "Ladner",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers by Richard Ladner published at chi",
    "question_toks":[
      "papers",
      "by",
      "Richard",
      "Ladner",
      "published",
      "at",
      "chi"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Richard Ladner\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Richard Ladner\"\") && venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Richard",
      "Ladner",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Does Richard Ladner publish in chi ?",
    "question_toks":[
      "Does",
      "Richard",
      "Ladner",
      "publish",
      "in",
      "chi",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Richard Ladner\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Richard Ladner\"\") && venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Richard",
      "Ladner",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"What has Richard Ladner published at chi ?",
    "question_toks":[
      "What",
      "has",
      "Richard",
      "Ladner",
      "published",
      "at",
      "chi",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Richard Ladner\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Richard Ladner\"\") && venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Richard",
      "Ladner",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"What papers has Richard Ladner written at chi ?",
    "question_toks":[
      "What",
      "papers",
      "has",
      "Richard",
      "Ladner",
      "written",
      "at",
      "chi",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Richard Ladner\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Richard Ladner\"\") && venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Richard",
      "Ladner",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "chi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Which paper did Richard Ladner present at chi ?",
    "question_toks":[
      "Which",
      "paper",
      "did",
      "Richard",
      "Ladner",
      "present",
      "at",
      "chi",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Richard Ladner\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"chi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Richard Ladner\"\") && venue(\"venuename\") === col(\"\"chi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep reinforcement learning\" AND t4.venuename  =  \"nips\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "deep",
      "reinforcement",
      "learning",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "nips",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers related to deep reinforcement learning in nips ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "related",
      "to",
      "deep",
      "reinforcement",
      "learning",
      "in",
      "nips",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"deep reinforcement learning\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"nips\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"deep reinforcement learning\"\") && venue(\"venuename\") === col(\"\"nips\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "WebKB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value"
    ],
    "question":"Papers on WebKB",
    "question_toks":[
      "Papers",
      "on",
      "WebKB"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"WebKB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).filter(dataset(\"datasetname\") === col(\"\"WebKB\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "WebKB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value"
    ],
    "question":"which papers used WebKB ?",
    "question_toks":[
      "which",
      "papers",
      "used",
      "WebKB",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"WebKB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).filter(dataset(\"datasetname\") === col(\"\"WebKB\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "WebKB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value"
    ],
    "question":"papers about WebKB",
    "question_toks":[
      "papers",
      "about",
      "WebKB"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"WebKB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).filter(dataset(\"datasetname\") === col(\"\"WebKB\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "WebKB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value"
    ],
    "question":"List the papers that used WebKB dataset",
    "question_toks":[
      "List",
      "the",
      "papers",
      "that",
      "used",
      "WebKB",
      "dataset"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"WebKB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).filter(dataset(\"datasetname\") === col(\"\"WebKB\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "WebKB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value"
    ],
    "question":"papers using WebKB",
    "question_toks":[
      "papers",
      "using",
      "WebKB"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"WebKB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).filter(dataset(\"datasetname\") === col(\"\"WebKB\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "WebKB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value"
    ],
    "question":"papers that use WebKB",
    "question_toks":[
      "papers",
      "that",
      "use",
      "WebKB"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"WebKB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).filter(dataset(\"datasetname\") === col(\"\"WebKB\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "WebKB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value"
    ],
    "question":"WebKB papers",
    "question_toks":[
      "WebKB",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"WebKB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).filter(dataset(\"datasetname\") === col(\"\"WebKB\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "WebKB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value"
    ],
    "question":"papers that used WebKB",
    "question_toks":[
      "papers",
      "that",
      "used",
      "WebKB"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"WebKB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).filter(dataset(\"datasetname\") === col(\"\"WebKB\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "WebKB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value"
    ],
    "question":"Papers that use the WebKB dataset",
    "question_toks":[
      "Papers",
      "that",
      "use",
      "the",
      "WebKB",
      "dataset"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"WebKB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).filter(dataset(\"datasetname\") === col(\"\"WebKB\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT venueid FROM paper WHERE YEAR  =  2013;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "venueid",
      "FROM",
      "paper",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "venueid",
      "from",
      "paper",
      "where",
      "year",
      "=",
      "value"
    ],
    "question":"conferences in 2013",
    "question_toks":[
      "conferences",
      "in",
      "2013"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2013.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.filter(col(\"YEAR\") === 2013).select(col(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorname",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "!",
      "=",
      "``",
      "chris",
      "dyer",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "syntactic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorname",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "!",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"what are some syntactic parsing papers that chris dyer did not write ?",
    "question_toks":[
      "what",
      "are",
      "some",
      "syntactic",
      "parsing",
      "papers",
      "that",
      "chris",
      "dyer",
      "did",
      "not",
      "write",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"chris dyer\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"syntactic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") =!= col(\"\"chris dyer\"\") && keyphrase(\"keyphrasename\") === col(\"\"syntactic parsing\"\")).select(author(\"authorname\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorname",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "!",
      "=",
      "``",
      "chris",
      "dyer",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "syntactic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorname",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "!",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"are there any syntactic parsing papers not written by chris dyer ?",
    "question_toks":[
      "are",
      "there",
      "any",
      "syntactic",
      "parsing",
      "papers",
      "not",
      "written",
      "by",
      "chris",
      "dyer",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"chris dyer\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"syntactic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") =!= col(\"\"chris dyer\"\") && keyphrase(\"keyphrasename\") === col(\"\"syntactic parsing\"\")).select(author(\"authorname\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorname",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "!",
      "=",
      "``",
      "chris",
      "dyer",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "syntactic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorname",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "!",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"what are syntactic parsing papers not written by chris dyer",
    "question_toks":[
      "what",
      "are",
      "syntactic",
      "parsing",
      "papers",
      "not",
      "written",
      "by",
      "chris",
      "dyer"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"chris dyer\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"syntactic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") =!= col(\"\"chris dyer\"\") && keyphrase(\"keyphrasename\") === col(\"\"syntactic parsing\"\")).select(author(\"authorname\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorname",
      ",",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "!",
      "=",
      "``",
      "chris",
      "dyer",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "syntactic",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorname",
      ",",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "!",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"syntactic parsing papers not written by chris dyer",
    "question_toks":[
      "syntactic",
      "parsing",
      "papers",
      "not",
      "written",
      "by",
      "chris",
      "dyer"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"chris dyer\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"syntactic parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") =!= col(\"\"chris dyer\"\") && keyphrase(\"keyphrasename\") === col(\"\"syntactic parsing\"\")).select(author(\"authorname\"),paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "sigir",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many papers are in sigir ?",
    "question_toks":[
      "how",
      "many",
      "papers",
      "are",
      "in",
      "sigir",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"sigir\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"sigir\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "sigir",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many papers does sigir have ?",
    "question_toks":[
      "how",
      "many",
      "papers",
      "does",
      "sigir",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"sigir\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"sigir\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "sigir",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"how many papers are published in sigir ?",
    "question_toks":[
      "how",
      "many",
      "papers",
      "are",
      "published",
      "in",
      "sigir",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"sigir\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"sigir\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t1.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "sigir",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"number of papers in sigir conference",
    "question_toks":[
      "number",
      "of",
      "papers",
      "in",
      "sigir",
      "conference"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"sigir\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"sigir\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mirella Lapata\" ORDER BY t3.year DESC LIMIT 5;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      ",",
      "t3.year",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Mirella",
      "Lapata",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      "DESC",
      "LIMIT",
      "5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      ",",
      "t3",
      ".",
      "year",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year",
      "desc",
      "limit",
      "value"
    ],
    "question":"What are the 5 most recent papers of Mirella Lapata ?",
    "question_toks":[
      "What",
      "are",
      "the",
      "5",
      "most",
      "recent",
      "papers",
      "of",
      "Mirella",
      "Lapata",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":5,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Mirella Lapata\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Mirella Lapata\"\")).select(paper(\"paperid\"),paper(\"year\")).orderBy(desc(\"year\")).distinct.limit(5)"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"What were the papers published at pldi 2015 ?",
    "question_toks":[
      "What",
      "were",
      "the",
      "papers",
      "published",
      "at",
      "pldi",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Papers from pldi 2015 conference",
    "question_toks":[
      "Papers",
      "from",
      "pldi",
      "2015",
      "conference"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers published at pldi 2015",
    "question_toks":[
      "papers",
      "published",
      "at",
      "pldi",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"What are the papers from pldi 2015 ?",
    "question_toks":[
      "What",
      "are",
      "the",
      "papers",
      "from",
      "pldi",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Papers from pldi 2015 ?",
    "question_toks":[
      "Papers",
      "from",
      "pldi",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Which papers were accepted in pldi 2015 ?",
    "question_toks":[
      "Which",
      "papers",
      "were",
      "accepted",
      "in",
      "pldi",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"What papers were published during the conference pldi 2015 ?",
    "question_toks":[
      "What",
      "papers",
      "were",
      "published",
      "during",
      "the",
      "conference",
      "pldi",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers in pldi 2015",
    "question_toks":[
      "papers",
      "in",
      "pldi",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"List of papers in pldi 2015",
    "question_toks":[
      "List",
      "of",
      "papers",
      "in",
      "pldi",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"pldi papers in 2015",
    "question_toks":[
      "pldi",
      "papers",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"what papers are published in pldi 2015",
    "question_toks":[
      "what",
      "papers",
      "are",
      "published",
      "in",
      "pldi",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers from pldi 2015",
    "question_toks":[
      "papers",
      "from",
      "pldi",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"pldi papers 2015",
    "question_toks":[
      "pldi",
      "papers",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"pldi 2015 conference",
    "question_toks":[
      "pldi",
      "2015",
      "conference"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"pldi best paper award 2015",
    "question_toks":[
      "pldi",
      "best",
      "paper",
      "award",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.paperid",
      "FROM",
      "venue",
      "AS",
      "t2",
      "JOIN",
      "paper",
      "AS",
      "t1",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "pldi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t2",
      "join",
      "paper",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"pldi 2015 list of papers",
    "question_toks":[
      "pldi",
      "2015",
      "list",
      "of",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"pldi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2015 && venue(\"venuename\") === col(\"\"pldi\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t5.citingpaperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "cite",
      "AS",
      "t5",
      "ON",
      "t3.paperid",
      "=",
      "t5.citedpaperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t5.citingpaperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "michael",
      "i.",
      "jordan",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "dan",
      "klein",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t5",
      ".",
      "citingpaperid",
      ")",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "cite",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t5",
      ".",
      "citedpaperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t5",
      ".",
      "citingpaperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"how many papers by dan klein are cited by michael i. jordan",
    "question_toks":[
      "how",
      "many",
      "papers",
      "by",
      "dan",
      "klein",
      "are",
      "cited",
      "by",
      "michael",
      "i.",
      "jordan"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"michael i. jordan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"dan klein\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(cite, writes(\"paperid\") === cite(\"citedpaperid\"), inner).join(writes, writes(\"paperid\") === cite(\"citingpaperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"michael i. jordan\"\") && author(\"authorname\") === col(\"\"dan klein\"\")).agg(COUNT(cite(\"citingpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t5.citingpaperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "cite",
      "AS",
      "t5",
      "ON",
      "t3.paperid",
      "=",
      "t5.citedpaperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t5.citingpaperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "michael",
      "i.",
      "jordan",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "dan",
      "klein",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t5",
      ".",
      "citingpaperid",
      ")",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "cite",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t5",
      ".",
      "citedpaperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t5",
      ".",
      "citingpaperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"how many of dan klein 's papers cite michael i. jordan",
    "question_toks":[
      "how",
      "many",
      "of",
      "dan",
      "klein",
      "'s",
      "papers",
      "cite",
      "michael",
      "i.",
      "jordan"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"michael i. jordan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"dan klein\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(cite, writes(\"paperid\") === cite(\"citedpaperid\"), inner).join(writes, writes(\"paperid\") === cite(\"citingpaperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"michael i. jordan\"\") && author(\"authorname\") === col(\"\"dan klein\"\")).agg(COUNT(cite(\"citingpaperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Ameet Soni\" AND t1.authorname  =  \"Ras Bodik\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t5.authorid",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.authorid",
      "=",
      "t2.authorid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "writes",
      "AS",
      "t5",
      "ON",
      "t5.paperid",
      "=",
      "t4.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Ameet",
      "Soni",
      "''",
      "AND",
      "t1.authorname",
      "=",
      "``",
      "Ras",
      "Bodik",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t5",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"who else was on the paper with Ameet Soni and Ras Bodik ?",
    "question_toks":[
      "who",
      "else",
      "was",
      "on",
      "the",
      "paper",
      "with",
      "Ameet",
      "Soni",
      "and",
      "Ras",
      "Bodik",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Ameet Soni\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Ras Bodik\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Ameet Soni\"\") && author(\"authorname\") === col(\"\"Ras Bodik\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "ImageNet",
      "''",
      "AND",
      "t3.year",
      "=",
      "2014",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"2014 papers using ImageNet",
    "question_toks":[
      "2014",
      "papers",
      "using",
      "ImageNet"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"ImageNet\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).filter(dataset(\"datasetname\") === col(\"\"ImageNet\"\") && paper(\"year\") === 2014).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.authorid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t1",
      "JOIN",
      "keyphrase",
      "AS",
      "t2",
      "ON",
      "t1.keyphraseid",
      "=",
      "t2.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t1.paperid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t4.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t3.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t2.keyphrasename",
      "=",
      "``",
      "Bacterial",
      "Wilt",
      "''",
      "AND",
      "t4.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "authorid",
      "from",
      "paperkeyphrase",
      "as",
      "t1",
      "join",
      "keyphrase",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t2",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t1",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What authors wrote papers about Bacterial Wilt in 2016 ?",
    "question_toks":[
      "What",
      "authors",
      "wrote",
      "papers",
      "about",
      "Bacterial",
      "Wilt",
      "in",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Bacterial Wilt\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Bacterial Wilt\"\") && paper(\"year\") === 2016).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.authorid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t1",
      "JOIN",
      "keyphrase",
      "AS",
      "t2",
      "ON",
      "t1.keyphraseid",
      "=",
      "t2.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t1.paperid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t4.paperid",
      "JOIN",
      "author",
      "AS",
      "t5",
      "ON",
      "t3.authorid",
      "=",
      "t5.authorid",
      "WHERE",
      "t2.keyphrasename",
      "=",
      "``",
      "Bacterial",
      "Wilt",
      "''",
      "AND",
      "t4.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "authorid",
      "from",
      "paperkeyphrase",
      "as",
      "t1",
      "join",
      "keyphrase",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "keyphraseid",
      "=",
      "t2",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t1",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "authorid",
      "=",
      "t5",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Who wrote on the topic of Bacterial Wilt in 2016 ?",
    "question_toks":[
      "Who",
      "wrote",
      "on",
      "the",
      "topic",
      "of",
      "Bacterial",
      "Wilt",
      "in",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Bacterial Wilt\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Bacterial Wilt\"\") && paper(\"year\") === 2016).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.year",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Luke",
      "S",
      "Zettlemoyer",
      "''",
      "ORDER",
      "BY",
      "t3.year",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "year",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "year"
    ],
    "question":"When did Luke S Zettlemoyer publish ?",
    "question_toks":[
      "When",
      "did",
      "Luke",
      "S",
      "Zettlemoyer",
      "publish",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Luke S Zettlemoyer\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Luke S Zettlemoyer\"\")).select(paper(\"year\")).orderBy(paper(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "question",
      "answering",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"question answering 2016 papers",
    "question_toks":[
      "question",
      "answering",
      "2016",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"question answering\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"question answering\"\") && paper(\"year\") === 2016).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "question",
      "answering",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"What papers were written on question answering in 2016 ?",
    "question_toks":[
      "What",
      "papers",
      "were",
      "written",
      "on",
      "question",
      "answering",
      "in",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"question answering\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"question answering\"\") && paper(\"year\") === 2016).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t5",
      "ON",
      "t3.datasetid",
      "=",
      "t5.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "venue",
      "AS",
      "t6",
      "ON",
      "t6.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t4.keyphraseid",
      "=",
      "t1.keyphraseid",
      "WHERE",
      "t5.datasetname",
      "=",
      "``",
      "Jeopardy",
      "!",
      "Questions",
      "''",
      "AND",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t2.year",
      "=",
      "2014",
      "AND",
      "t6.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t5",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t6",
      "on",
      "t6",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "where",
      "t5",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t6",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"which ACL 2014 papers about Parsing used Jeopardy! Questions ?",
    "question_toks":[
      "which",
      "ACL",
      "2014",
      "papers",
      "about",
      "Parsing",
      "used",
      "Jeopardy",
      "!",
      "Questions",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"Jeopardy! Questions\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(dataset(\"datasetname\") === col(\"\"Jeopardy! Questions\"\") && keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2014 && venue(\"venuename\") === col(\"\"ACL\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t5",
      "ON",
      "t3.datasetid",
      "=",
      "t5.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "venue",
      "AS",
      "t6",
      "ON",
      "t6.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t4.keyphraseid",
      "=",
      "t1.keyphraseid",
      "WHERE",
      "t5.datasetname",
      "=",
      "``",
      "Jeopardy",
      "!",
      "Questions",
      "''",
      "AND",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t2.year",
      "=",
      "2014",
      "AND",
      "t6.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t5",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t6",
      "on",
      "t6",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "where",
      "t5",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t6",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Parsing papers using Jeopardy! Questions published at ACL 2014",
    "question_toks":[
      "Parsing",
      "papers",
      "using",
      "Jeopardy",
      "!",
      "Questions",
      "published",
      "at",
      "ACL",
      "2014"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"Jeopardy! Questions\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(dataset(\"datasetname\") === col(\"\"Jeopardy! Questions\"\") && keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2014 && venue(\"venuename\") === col(\"\"ACL\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t5",
      "ON",
      "t3.datasetid",
      "=",
      "t5.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "venue",
      "AS",
      "t6",
      "ON",
      "t6.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t4.keyphraseid",
      "=",
      "t1.keyphraseid",
      "WHERE",
      "t5.datasetname",
      "=",
      "``",
      "Jeopardy",
      "!",
      "Questions",
      "''",
      "AND",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t2.year",
      "=",
      "2014",
      "AND",
      "t6.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t5",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t6",
      "on",
      "t6",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "where",
      "t5",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t6",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Parsing papers from ACL 2014 using Jeopardy! Questions",
    "question_toks":[
      "Parsing",
      "papers",
      "from",
      "ACL",
      "2014",
      "using",
      "Jeopardy",
      "!",
      "Questions"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"Jeopardy! Questions\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(dataset(\"datasetname\") === col(\"\"Jeopardy! Questions\"\") && keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2014 && venue(\"venuename\") === col(\"\"ACL\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t5",
      "ON",
      "t3.datasetid",
      "=",
      "t5.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "venue",
      "AS",
      "t6",
      "ON",
      "t6.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t4.keyphraseid",
      "=",
      "t1.keyphraseid",
      "WHERE",
      "t5.datasetname",
      "=",
      "``",
      "Jeopardy",
      "!",
      "Questions",
      "''",
      "AND",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t2.year",
      "=",
      "2014",
      "AND",
      "t6.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t5",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t6",
      "on",
      "t6",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "where",
      "t5",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t6",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Parsing papers from ACL 2014 that used Jeopardy! Questions",
    "question_toks":[
      "Parsing",
      "papers",
      "from",
      "ACL",
      "2014",
      "that",
      "used",
      "Jeopardy",
      "!",
      "Questions"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"Jeopardy! Questions\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(dataset(\"datasetname\") === col(\"\"Jeopardy! Questions\"\") && keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2014 && venue(\"venuename\") === col(\"\"ACL\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t5",
      "ON",
      "t3.datasetid",
      "=",
      "t5.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "venue",
      "AS",
      "t6",
      "ON",
      "t6.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t4.keyphraseid",
      "=",
      "t1.keyphraseid",
      "WHERE",
      "t5.datasetname",
      "=",
      "``",
      "Jeopardy",
      "!",
      "Questions",
      "''",
      "AND",
      "t1.keyphrasename",
      "=",
      "``",
      "Parsing",
      "''",
      "AND",
      "t2.year",
      "=",
      "2014",
      "AND",
      "t6.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t5",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t6",
      "on",
      "t6",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "where",
      "t5",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t6",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers about Parsing that used Jeopardy! Questions and were published at ACL 2014",
    "question_toks":[
      "papers",
      "about",
      "Parsing",
      "that",
      "used",
      "Jeopardy",
      "!",
      "Questions",
      "and",
      "were",
      "published",
      "at",
      "ACL",
      "2014"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"Jeopardy! Questions\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Parsing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(dataset(\"datasetname\") === col(\"\"Jeopardy! Questions\"\") && keyphrase(\"keyphrasename\") === col(\"\"Parsing\"\") && paper(\"year\") === 2014 && venue(\"venuename\") === col(\"\"ACL\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.journalid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t3.journalid",
      "=",
      "t2.journalid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "linda",
      "shapiro",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "journalid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "journalid",
      "=",
      "t2",
      ".",
      "journalid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"in what journals does linda shapiro publish ?",
    "question_toks":[
      "in",
      "what",
      "journals",
      "does",
      "linda",
      "shapiro",
      "publish",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"linda shapiro\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(journal, paper(\"journalid\") === journal(\"journalid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"linda shapiro\"\")).select(journal(\"journalid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.journalid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t3.journalid",
      "=",
      "t2.journalid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "linda",
      "shapiro",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "journalid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "journalid",
      "=",
      "t2",
      ".",
      "journalid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"Which journals did linda shapiro submit papers to ?",
    "question_toks":[
      "Which",
      "journals",
      "did",
      "linda",
      "shapiro",
      "submit",
      "papers",
      "to",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"linda shapiro\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(journal, paper(\"journalid\") === journal(\"journalid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"linda shapiro\"\")).select(journal(\"journalid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t3.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"NIPS authors",
    "question_toks":[
      "NIPS",
      "authors"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(venue(\"venuename\") === col(\"\"NIPS\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t3.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"who are the authors at NIPS ?",
    "question_toks":[
      "who",
      "are",
      "the",
      "authors",
      "at",
      "NIPS",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(venue(\"venuename\") === col(\"\"NIPS\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t3.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"who authored papers at NIPS ?",
    "question_toks":[
      "who",
      "authored",
      "papers",
      "at",
      "NIPS",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(venue(\"venuename\") === col(\"\"NIPS\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t3.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"who publishes in NIPS ?",
    "question_toks":[
      "who",
      "publishes",
      "in",
      "NIPS",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(venue(\"venuename\") === col(\"\"NIPS\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t3.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"who has papers at NIPS ?",
    "question_toks":[
      "who",
      "has",
      "papers",
      "at",
      "NIPS",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(venue(\"venuename\") === col(\"\"NIPS\"\")).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t3.journalid",
      "=",
      "t2.journalid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t3.paperid",
      "=",
      "t1.paperid",
      "WHERE",
      "t2.journalname",
      "=",
      "``",
      "Cell",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "journalid",
      "=",
      "t2",
      ".",
      "journalid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t1",
      ".",
      "paperid",
      "where",
      "t2",
      ".",
      "journalname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"How many publications were added to the Cell journal this year ?",
    "question_toks":[
      "How",
      "many",
      "publications",
      "were",
      "added",
      "to",
      "the",
      "Cell",
      "journal",
      "this",
      "year",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Cell\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(journal, paper(\"journalid\") === journal(\"journalid\"), inner).join(paperkeyphrase, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(journal(\"journalname\") === col(\"\"Cell\"\") && paper(\"year\") === 2015).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t3.journalid",
      "=",
      "t2.journalid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t1",
      "ON",
      "t3.paperid",
      "=",
      "t1.paperid",
      "WHERE",
      "t2.journalname",
      "=",
      "``",
      "Cell",
      "''",
      "AND",
      "t3.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "journalid",
      "=",
      "t2",
      ".",
      "journalid",
      "join",
      "paperkeyphrase",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t1",
      ".",
      "paperid",
      "where",
      "t2",
      ".",
      "journalname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"How many articles were published in the Cell journal in 2015 ?",
    "question_toks":[
      "How",
      "many",
      "articles",
      "were",
      "published",
      "in",
      "the",
      "Cell",
      "journal",
      "in",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Cell\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(journal, paper(\"journalid\") === journal(\"journalid\"), inner).join(paperkeyphrase, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(journal(\"journalname\") === col(\"\"Cell\"\") && paper(\"year\") === 2015).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.title",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Donald",
      "E",
      "Knuth",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "title",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"What are all the publication titles by Donald E Knuth ?",
    "question_toks":[
      "What",
      "are",
      "all",
      "the",
      "publication",
      "titles",
      "by",
      "Donald",
      "E",
      "Knuth",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Donald E Knuth\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Donald E Knuth\"\")).select(paper(\"title\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "ali",
      "farhadi",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "eccv",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers published in eccv 2016 by ali farhadi",
    "question_toks":[
      "papers",
      "published",
      "in",
      "eccv",
      "2016",
      "by",
      "ali",
      "farhadi"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"ali farhadi\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"eccv\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"ali farhadi\"\") && paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"eccv\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "ali",
      "farhadi",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "eccv",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Does ali farhadi have a paper in eccv in 2016 ?",
    "question_toks":[
      "Does",
      "ali",
      "farhadi",
      "have",
      "a",
      "paper",
      "in",
      "eccv",
      "in",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"ali farhadi\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"eccv\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"ali farhadi\"\") && paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"eccv\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "ali",
      "farhadi",
      "''",
      "AND",
      "t3.year",
      "=",
      "2016",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "eccv",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"papers of ali farhadi in eccv 2016",
    "question_toks":[
      "papers",
      "of",
      "ali",
      "farhadi",
      "in",
      "eccv",
      "2016"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"ali farhadi\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2016.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"eccv\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"ali farhadi\"\") && paper(\"year\") === 2016 && venue(\"venuename\") === col(\"\"eccv\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"Semantic Data\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t3",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t3.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "keyphrase",
      "AS",
      "t4",
      "ON",
      "t2.keyphraseid",
      "=",
      "t4.keyphraseid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "YAGO",
      "''",
      "AND",
      "t4.keyphrasename",
      "=",
      "``",
      "Semantic",
      "Data",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t3",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paperkeyphrase",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "keyphrase",
      "as",
      "t4",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t4",
      ".",
      "keyphraseid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"What are some papers dealing with Semantic Data in YAGO ?",
    "question_toks":[
      "What",
      "are",
      "some",
      "papers",
      "dealing",
      "with",
      "Semantic",
      "Data",
      "in",
      "YAGO",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"YAGO\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Semantic Data\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paperkeyphrase, paperkeyphrase(\"paperid\") === paperdataset(\"paperid\"), inner).join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).filter(dataset(\"datasetname\") === col(\"\"YAGO\"\") && keyphrase(\"keyphrasename\") === col(\"\"Semantic Data\"\")).select(paperkeyphrase(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "ImageNet",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value"
    ],
    "question":"conferences that mention ImageNet",
    "question_toks":[
      "conferences",
      "that",
      "mention",
      "ImageNet"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"ImageNet\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).filter(dataset(\"datasetname\") === col(\"\"ImageNet\"\")).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid  =  t1.journalid WHERE t1.journalname  =  \"Academic radiology\" AND t2.year  =  1995;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "paper",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.journalid",
      "=",
      "t1.journalid",
      "WHERE",
      "t1.journalname",
      "=",
      "``",
      "Academic",
      "radiology",
      "''",
      "AND",
      "t2.year",
      "=",
      "1995",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "paper",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "journalid",
      "=",
      "t1",
      ".",
      "journalid",
      "where",
      "t1",
      ".",
      "journalname",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"what papers were published in Academic radiology in 1995 ?",
    "question_toks":[
      "what",
      "papers",
      "were",
      "published",
      "in",
      "Academic",
      "radiology",
      "in",
      "1995",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Academic radiology\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          1995.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(journal, paper(\"journalid\") === journal(\"journalid\"), inner).filter(journal(\"journalname\") === col(\"\"Academic radiology\"\") && paper(\"year\") === 1995).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t4.citedpaperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citingpaperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t4",
      ".",
      "citedpaperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citingpaperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"what papers do parsing papers typically cite ?",
    "question_toks":[
      "what",
      "papers",
      "do",
      "parsing",
      "papers",
      "typically",
      "cite",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(cite, paper(\"paperid\") === cite(\"citingpaperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"parsing\"\")).select(cite(\"citedpaperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t4.citedpaperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "cite",
      "AS",
      "t4",
      "ON",
      "t3.paperid",
      "=",
      "t4.citingpaperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "parsing",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t4",
      ".",
      "citedpaperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "cite",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "citingpaperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"papers typically cited by parsing papers",
    "question_toks":[
      "papers",
      "typically",
      "cited",
      "by",
      "parsing",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"parsing\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(cite, paper(\"paperid\") === cite(\"citingpaperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"parsing\"\")).select(cite(\"citedpaperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Trophic",
      "Cascade",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"venue for Trophic Cascade",
    "question_toks":[
      "venue",
      "for",
      "Trophic",
      "Cascade"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Trophic Cascade\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Trophic Cascade\"\")).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Trophic",
      "Cascade",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"conferences for Trophic Cascade",
    "question_toks":[
      "conferences",
      "for",
      "Trophic",
      "Cascade"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Trophic Cascade\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Trophic Cascade\"\")).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Trophic",
      "Cascade",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"what conferences are related to Trophic Cascade",
    "question_toks":[
      "what",
      "conferences",
      "are",
      "related",
      "to",
      "Trophic",
      "Cascade"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Trophic Cascade\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Trophic Cascade\"\")).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.venueid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Trophic",
      "Cascade",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "venueid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"What was the conference name that approved Trophic Cascade ?",
    "question_toks":[
      "What",
      "was",
      "the",
      "conference",
      "name",
      "that",
      "approved",
      "Trophic",
      "Cascade",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Trophic Cascade\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Trophic Cascade\"\")).select(paper(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  >=  2011;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "question",
      "answering",
      "''",
      "AND",
      "t3.year",
      ">",
      "=",
      "2011",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      ">",
      "=",
      "value"
    ],
    "question":"How many papers were written on question answering in 2011 through 2016 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "were",
      "written",
      "on",
      "question",
      "answering",
      "in",
      "2011",
      "through",
      "2016",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"question answering\"",
          null
        ],
        "and",
        [
          false,
          5,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2011.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"question answering\"\") && paper(\"year\") >= 2011).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      ",",
      "t1.authorid",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t3.venuename",
      "=",
      "``",
      "ACL",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      ",",
      "t1",
      ".",
      "authorid",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"ACL papers by author",
    "question_toks":[
      "ACL",
      "papers",
      "by",
      "author"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(venue(\"venuename\") === col(\"\"ACL\"\")).select(paper(\"paperid\"),writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t1",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t2.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t1",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Which authors published papers in 2015 ?",
    "question_toks":[
      "Which",
      "authors",
      "published",
      "papers",
      "in",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(paper(\"year\") === 2015).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "writes",
      "AS",
      "t1",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t2.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "writes",
      "as",
      "t1",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"who wrote papers in 2015",
    "question_toks":[
      "who",
      "wrote",
      "papers",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(paper(\"year\") === 2015).select(writes(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT paperid FROM paper WHERE YEAR != 2015;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "paperid",
      "FROM",
      "paper",
      "WHERE",
      "YEAR",
      "!",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "paperid",
      "from",
      "paper",
      "where",
      "year",
      "!",
      "=",
      "value"
    ],
    "question":"papers that were not published in the last year",
    "question_toks":[
      "papers",
      "that",
      "were",
      "not",
      "published",
      "in",
      "the",
      "last",
      "year"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.filter(col(\"YEAR\") =!= 2015).select(col(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Michael",
      "Stonebraker",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "GIS",
      "Database",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"When was Michael Stonebraker GIS Database published ?",
    "question_toks":[
      "When",
      "was",
      "Michael",
      "Stonebraker",
      "GIS",
      "Database",
      "published",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Michael Stonebraker\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"GIS Database\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Michael Stonebraker\"\") && keyphrase(\"keyphrasename\") === col(\"\"GIS Database\"\")).select(paper(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Michael",
      "Stonebraker",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "GIS",
      "Database",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"When did Michael Stonebraker publish his GIS Database paper ?",
    "question_toks":[
      "When",
      "did",
      "Michael",
      "Stonebraker",
      "publish",
      "his",
      "GIS",
      "Database",
      "paper",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Michael Stonebraker\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"GIS Database\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Michael Stonebraker\"\") && keyphrase(\"keyphrasename\") === col(\"\"GIS Database\"\")).select(paper(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.year",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t5",
      "ON",
      "t2.keyphraseid",
      "=",
      "t5.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Michael",
      "Stonebraker",
      "''",
      "AND",
      "t5.keyphrasename",
      "=",
      "``",
      "GIS",
      "Database",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "year",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t5",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"When does Michael Stonebraker publish the GIS Database paper ?",
    "question_toks":[
      "When",
      "does",
      "Michael",
      "Stonebraker",
      "publish",
      "the",
      "GIS",
      "Database",
      "paper",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Michael Stonebraker\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"GIS Database\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Michael Stonebraker\"\") && keyphrase(\"keyphrasename\") === col(\"\"GIS Database\"\")).select(paper(\"year\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.paperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t5",
      "JOIN",
      "keyphrase",
      "AS",
      "t3",
      "ON",
      "t5.keyphraseid",
      "=",
      "t3.keyphraseid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t5.paperid",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t4.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "venue",
      "AS",
      "t6",
      "ON",
      "t6.venueid",
      "=",
      "t2.venueid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Eric",
      "C.",
      "Kerrigan",
      "''",
      "AND",
      "t3.keyphrasename",
      "=",
      "``",
      "Liquid",
      "''",
      "AND",
      "t6.venuename",
      "=",
      "``",
      "Automatica",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "paperid",
      "from",
      "paperkeyphrase",
      "as",
      "t5",
      "join",
      "keyphrase",
      "as",
      "t3",
      "on",
      "t5",
      ".",
      "keyphraseid",
      "=",
      "t3",
      ".",
      "keyphraseid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t5",
      ".",
      "paperid",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "venue",
      "as",
      "t6",
      "on",
      "t6",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t6",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Eric C. Kerrigan 's Liquid Automatica paper",
    "question_toks":[
      "Eric",
      "C.",
      "Kerrigan",
      "'s",
      "Liquid",
      "Automatica",
      "paper"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Eric C. Kerrigan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Liquid\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Automatica\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(writes, writes(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(author(\"authorname\") === col(\"\"Eric C. Kerrigan\"\") && keyphrase(\"keyphrasename\") === col(\"\"Liquid\"\") && venue(\"venuename\") === col(\"\"Automatica\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t2.keyphraseid",
      "FROM",
      "paper",
      "AS",
      "t3",
      "JOIN",
      "paperkeyphrase",
      "AS",
      "t2",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t5",
      "ON",
      "t5.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t5.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "dan",
      "klein",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "emnlp",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t2",
      ".",
      "keyphraseid",
      "from",
      "paper",
      "as",
      "t3",
      "join",
      "paperkeyphrase",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"keyphrases used by dan klein in his emnlp papers",
    "question_toks":[
      "keyphrases",
      "used",
      "by",
      "dan",
      "klein",
      "in",
      "his",
      "emnlp",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              22,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"dan klein\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"emnlp\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(paperkeyphrase, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"dan klein\"\") && venue(\"venuename\") === col(\"\"emnlp\"\")).select(paperkeyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "ImageNet",
      "''",
      "AND",
      "t3.year",
      "=",
      "2014",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "eccv",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"the papers at eccv in 2014 using ImageNet dataset",
    "question_toks":[
      "the",
      "papers",
      "at",
      "eccv",
      "in",
      "2014",
      "using",
      "ImageNet",
      "dataset"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"ImageNet\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"eccv\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(dataset(\"datasetname\") === col(\"\"ImageNet\"\") && paper(\"year\") === 2014 && venue(\"venuename\") === col(\"\"eccv\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "ImageNet",
      "''",
      "AND",
      "t3.year",
      "=",
      "2014",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "eccv",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"which papers in eccv 2014 use ImageNet ?",
    "question_toks":[
      "which",
      "papers",
      "in",
      "eccv",
      "2014",
      "use",
      "ImageNet",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"ImageNet\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"eccv\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(dataset(\"datasetname\") === col(\"\"ImageNet\"\") && paper(\"year\") === 2014 && venue(\"venuename\") === col(\"\"eccv\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "ImageNet",
      "''",
      "AND",
      "t3.year",
      "=",
      "2014",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "eccv",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"eccv 2014 papers using ImageNet",
    "question_toks":[
      "eccv",
      "2014",
      "papers",
      "using",
      "ImageNet"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"ImageNet\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"eccv\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(dataset(\"datasetname\") === col(\"\"ImageNet\"\") && paper(\"year\") === 2014 && venue(\"venuename\") === col(\"\"eccv\"\")).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t5 ON t2.paperid  =  t5.citingpaperid JOIN paper AS t3 ON t3.paperid  =  t5.citedpaperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Euclidean Distance\" AND t4.venuename  =  \"NIPS\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t5.citingpaperid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "cite",
      "AS",
      "t5",
      "ON",
      "t2.paperid",
      "=",
      "t5.citingpaperid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t5.citedpaperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.keyphrasename",
      "=",
      "``",
      "Euclidean",
      "Distance",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "NIPS",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t5",
      ".",
      "citingpaperid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "cite",
      "as",
      "t5",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t5",
      ".",
      "citingpaperid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t5",
      ".",
      "citedpaperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "keyphrasename",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"Euclidean Distance papers citing NIPS papers",
    "question_toks":[
      "Euclidean",
      "Distance",
      "papers",
      "citing",
      "NIPS",
      "papers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Euclidean Distance\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"NIPS\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(cite, paperkeyphrase(\"paperid\") === cite(\"citingpaperid\"), inner).join(paper, paper(\"paperid\") === cite(\"citedpaperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(keyphrase(\"keyphrasename\") === col(\"\"Euclidean Distance\"\") && venue(\"venuename\") === col(\"\"NIPS\"\")).select(cite(\"citingpaperid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT ( t1.paperid )  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid )  >  7;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "(",
      "t1.paperid",
      ")",
      ",",
      "COUNT",
      "(",
      "t3.citingpaperid",
      ")",
      "FROM",
      "paper",
      "AS",
      "t1",
      "JOIN",
      "cite",
      "AS",
      "t3",
      "ON",
      "t1.paperid",
      "=",
      "t3.citedpaperid",
      "JOIN",
      "venue",
      "AS",
      "t2",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t1.year",
      "=",
      "2012",
      "AND",
      "t2.venuename",
      "=",
      "``",
      "ACL",
      "''",
      "GROUP",
      "BY",
      "t1.paperid",
      "HAVING",
      "COUNT",
      "(",
      "t3.citingpaperid",
      ")",
      ">",
      "7",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "(",
      "t1",
      ".",
      "paperid",
      ")",
      ",",
      "count",
      "(",
      "t3",
      ".",
      "citingpaperid",
      ")",
      "from",
      "paper",
      "as",
      "t1",
      "join",
      "cite",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "citedpaperid",
      "join",
      "venue",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "venuename",
      "=",
      "value",
      "group",
      "by",
      "t1",
      ".",
      "paperid",
      "having",
      "count",
      "(",
      "t3",
      ".",
      "citingpaperid",
      ")",
      ">",
      "value"
    ],
    "question":"how many ACL 2012 papers have more than 7 citations ?",
    "question_toks":[
      "how",
      "many",
      "ACL",
      "2012",
      "papers",
      "have",
      "more",
      "than",
      "7",
      "citations",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        [
          0,
          11,
          false
        ]
      ],
      "having":[
        [
          false,
          3,
          [
            0,
            [
              3,
              18,
              false
            ],
            null
          ],
          7.0,
          null
        ]
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citedpaperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(paper(\"year\") === 2012 && venue(\"venuename\") === col(\"\"ACL\"\")).groupBy(paper(\"paperid\")).agg((t1.paperid),COUNT(cite(\"citingpaperid\"))).filter(COUNT(cite(\"citingpaperid\")) > 7).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != \"Noah Smith\" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Noah Smith\" );",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.paperid",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "!",
      "=",
      "``",
      "Noah",
      "Smith",
      "''",
      "AND",
      "t3.year",
      ">",
      "2009",
      "AND",
      "t2.paperid",
      "IN",
      "(",
      "SELECT",
      "t2.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "LIKE",
      "``",
      "Noah",
      "Smith",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "!",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "paperid",
      "in",
      "(",
      "select",
      "t2",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "like",
      "value",
      ")"
    ],
    "question":"How many papers has Noah Smith co-authored since 2009 ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "has",
      "Noah",
      "Smith",
      "co-authored",
      "since",
      "2009",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Noah Smith\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2009.0,
          null
        ],
        "and",
        [
          false,
          8,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      25,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ]
              ],
              "table_units":[
                [
                  "table_unit",
                  9
                ],
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      24,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                9,
                [
                  0,
                  [
                    0,
                    4,
                    false
                  ],
                  null
                ],
                "\"Noah Smith\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") =!= col(\"\"Noah Smith\"\") && paper(\"year\") > 2009 && t2.paperid IN (SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname LIKE \"Noah Smith\")).agg(COUNT(writes(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.citingpaperid",
      ")",
      "FROM",
      "paper",
      "AS",
      "t1",
      "JOIN",
      "cite",
      "AS",
      "t3",
      "ON",
      "t1.paperid",
      "=",
      "t3.citedpaperid",
      "JOIN",
      "venue",
      "AS",
      "t2",
      "ON",
      "t2.venueid",
      "=",
      "t1.venueid",
      "WHERE",
      "t2.venuename",
      "=",
      "``",
      "ACL",
      "''",
      "GROUP",
      "BY",
      "t3.citingpaperid",
      "HAVING",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.citedpaperid",
      ")",
      ">",
      "2",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "citingpaperid",
      ")",
      "from",
      "paper",
      "as",
      "t1",
      "join",
      "cite",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "citedpaperid",
      "join",
      "venue",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "venueid",
      "=",
      "t1",
      ".",
      "venueid",
      "where",
      "t2",
      ".",
      "venuename",
      "=",
      "value",
      "group",
      "by",
      "t3",
      ".",
      "citingpaperid",
      "having",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "citedpaperid",
      ")",
      ">",
      "value"
    ],
    "question":"Number of ACL papers with more than 2 citations",
    "question_toks":[
      "Number",
      "of",
      "ACL",
      "papers",
      "with",
      "more",
      "than",
      "2",
      "citations"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        [
          0,
          18,
          false
        ]
      ],
      "having":[
        [
          false,
          3,
          [
            0,
            [
              3,
              19,
              true
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"ACL\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.join(cite, paper(\"paperid\") === cite(\"citedpaperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"ACL\"\")).groupBy(cite(\"citingpaperid\")).agg(COUNT(cite(\"citingpaperid\"))).filter(COUNT(cite(\"citedpaperid\")) > 2).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"cvpr\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t3.paperid",
      ")",
      "FROM",
      "paperdataset",
      "AS",
      "t2",
      "JOIN",
      "dataset",
      "AS",
      "t1",
      "ON",
      "t2.datasetid",
      "=",
      "t1.datasetid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t1.datasetname",
      "=",
      "``",
      "ImageNet",
      "''",
      "AND",
      "t4.venuename",
      "=",
      "``",
      "cvpr",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "paperdataset",
      "as",
      "t2",
      "join",
      "dataset",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "datasetid",
      "=",
      "t1",
      ".",
      "datasetid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t1",
      ".",
      "datasetname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many papers used ImageNet datasets in cvpr ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "used",
      "ImageNet",
      "datasets",
      "in",
      "cvpr",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"ImageNet\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"cvpr\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperdataset.join(dataset, paperdataset(\"datasetid\") === dataset(\"datasetid\"), inner).join(paper, paper(\"paperid\") === paperdataset(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(dataset(\"datasetname\") === col(\"\"ImageNet\"\") && venue(\"venuename\") === col(\"\"cvpr\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT venueid FROM venue WHERE venuename  =  \"Neuroscience\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "venueid",
      "FROM",
      "venue",
      "WHERE",
      "venuename",
      "=",
      "``",
      "Neuroscience",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "venueid",
      "from",
      "venue",
      "where",
      "venuename",
      "=",
      "value"
    ],
    "question":"What venues are for Neuroscience ?",
    "question_toks":[
      "What",
      "venues",
      "are",
      "for",
      "Neuroscience",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Neuroscience\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.filter(col(\"venuename\") === col(\"\"Neuroscience\"\")).select(col(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mary Crainie\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "MAX",
      "(",
      "t3.year",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Mary",
      "Crainie",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "max",
      "(",
      "t3",
      ".",
      "year",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value"
    ],
    "question":"When was the last time Mary Crainie published a paper ?",
    "question_toks":[
      "When",
      "was",
      "the",
      "last",
      "time",
      "Mary",
      "Crainie",
      "published",
      "a",
      "paper",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Mary Crainie\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Mary Crainie\"\")).agg(MAX(paper(\"year\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t6.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid JOIN author AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"Philipp Koehn\" AND t3.keyphrasename  =  \"Machine Translation Output\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.authorid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t6",
      "JOIN",
      "keyphrase",
      "AS",
      "t3",
      "ON",
      "t6.keyphraseid",
      "=",
      "t3.keyphraseid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.paperid",
      "=",
      "t6.paperid",
      "JOIN",
      "writes",
      "AS",
      "t5",
      "ON",
      "t5.paperid",
      "=",
      "t4.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t5.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t4.authorid",
      "=",
      "t2.authorid",
      "WHERE",
      "t2.authorname",
      "=",
      "``",
      "Philipp",
      "Koehn",
      "''",
      "AND",
      "t3.keyphrasename",
      "=",
      "``",
      "Machine",
      "Translation",
      "Output",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "authorid",
      "from",
      "paperkeyphrase",
      "as",
      "t6",
      "join",
      "keyphrase",
      "as",
      "t3",
      "on",
      "t6",
      ".",
      "keyphraseid",
      "=",
      "t3",
      ".",
      "keyphraseid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "paperid",
      "=",
      "t6",
      ".",
      "paperid",
      "join",
      "writes",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "paperid",
      "=",
      "t4",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "authorid",
      "=",
      "t2",
      ".",
      "authorid",
      "where",
      "t2",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "keyphrasename",
      "=",
      "value"
    ],
    "question":"I want the co-authors of papers on Machine Translation Output with Philipp Koehn",
    "question_toks":[
      "I",
      "want",
      "the",
      "co-authors",
      "of",
      "papers",
      "on",
      "Machine",
      "Translation",
      "Output",
      "with",
      "Philipp",
      "Koehn"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Philipp Koehn\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Machine Translation Output\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(writes, writes(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(writes, writes(\"paperid\") === writes(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Philipp Koehn\"\") && keyphrase(\"keyphrasename\") === col(\"\"Machine Translation Output\"\")).select(author(\"authorid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Samuel Madden\" AND t4.venuename != \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t4",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "JOIN",
      "writes",
      "AS",
      "t2",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Samuel",
      "Madden",
      "''",
      "AND",
      "t4.venuename",
      "!",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t4",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "venuename",
      "!",
      "=",
      "value"
    ],
    "question":"How many papers does Samuel Madden publish outside of PVLDB area ?",
    "question_toks":[
      "How",
      "many",
      "papers",
      "does",
      "Samuel",
      "Madden",
      "publish",
      "outside",
      "of",
      "PVLDB",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Samuel Madden\"",
          null
        ],
        "and",
        [
          false,
          7,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).join(author, writes(\"authorid\") === author(\"authorid\"), inner).filter(author(\"authorname\") === col(\"\"Samuel Madden\"\") && venue(\"venuename\") =!= col(\"\"PVLDB\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT venueid FROM paper WHERE title  =  \"Fracture of acrylic bone cement\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "venueid",
      "FROM",
      "paper",
      "WHERE",
      "title",
      "=",
      "``",
      "Fracture",
      "of",
      "acrylic",
      "bone",
      "cement",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "venueid",
      "from",
      "paper",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"What is the venue of Fracture of acrylic bone cement ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "venue",
      "of",
      "Fracture",
      "of",
      "acrylic",
      "bone",
      "cement",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Fracture of acrylic bone cement\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.filter(col(\"title\") === col(\"\"Fracture of acrylic bone cement\"\")).select(col(\"venueid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2010 AND t3.venuename  =  \"sigcse\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "COUNT",
      "(",
      "t2.paperid",
      ")",
      "FROM",
      "venue",
      "AS",
      "t3",
      "JOIN",
      "paper",
      "AS",
      "t2",
      "ON",
      "t3.venueid",
      "=",
      "t2.venueid",
      "JOIN",
      "writes",
      "AS",
      "t1",
      "ON",
      "t1.paperid",
      "=",
      "t2.paperid",
      "WHERE",
      "t2.year",
      "=",
      "2010",
      "AND",
      "t3.venuename",
      "=",
      "``",
      "sigcse",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "count",
      "(",
      "t2",
      ".",
      "paperid",
      ")",
      "from",
      "venue",
      "as",
      "t3",
      "join",
      "paper",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "venueid",
      "=",
      "t2",
      ".",
      "venueid",
      "join",
      "writes",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"How many authors published at sigcse in 2010 ?",
    "question_toks":[
      "How",
      "many",
      "authors",
      "published",
      "at",
      "sigcse",
      "in",
      "2010",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2010.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"sigcse\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"venue.join(paper, venue(\"venueid\") === paper(\"venueid\"), inner).join(writes, writes(\"paperid\") === paper(\"paperid\"), inner).filter(paper(\"year\") === 2010 && venue(\"venuename\") === col(\"\"sigcse\"\")).agg(COUNT(paper(\"paperid\"))).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT title  ,  YEAR FROM paper WHERE title  =  \"A Switching Architecture For ISDN\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "title",
      ",",
      "YEAR",
      "FROM",
      "paper",
      "WHERE",
      "title",
      "=",
      "``",
      "A",
      "Switching",
      "Architecture",
      "For",
      "ISDN",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "title",
      ",",
      "year",
      "from",
      "paper",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"What is the year of publication of \" A Switching Architecture For ISDN \" ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "year",
      "of",
      "publication",
      "of",
      "``",
      "A",
      "Switching",
      "Architecture",
      "For",
      "ISDN",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"A Switching Architecture For ISDN\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paper.filter(col(\"title\") === col(\"\"A Switching Architecture For ISDN\"\")).select(col(\"title\"),col(\"YEAR\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"uist\";",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t1.keyphraseid",
      "FROM",
      "paperkeyphrase",
      "AS",
      "t2",
      "JOIN",
      "keyphrase",
      "AS",
      "t1",
      "ON",
      "t2.keyphraseid",
      "=",
      "t1.keyphraseid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t3.paperid",
      "=",
      "t2.paperid",
      "JOIN",
      "venue",
      "AS",
      "t4",
      "ON",
      "t4.venueid",
      "=",
      "t3.venueid",
      "WHERE",
      "t4.venuename",
      "=",
      "``",
      "uist",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t1",
      ".",
      "keyphraseid",
      "from",
      "paperkeyphrase",
      "as",
      "t2",
      "join",
      "keyphrase",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "keyphraseid",
      "=",
      "t1",
      ".",
      "keyphraseid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "paperid",
      "=",
      "t2",
      ".",
      "paperid",
      "join",
      "venue",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "venueid",
      "=",
      "t3",
      ".",
      "venueid",
      "where",
      "t4",
      ".",
      "venuename",
      "=",
      "value"
    ],
    "question":"what keywords are used by papers at uist",
    "question_toks":[
      "what",
      "keywords",
      "are",
      "used",
      "by",
      "papers",
      "at",
      "uist"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"uist\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"paperkeyphrase.join(keyphrase, paperkeyphrase(\"keyphraseid\") === keyphrase(\"keyphraseid\"), inner).join(paper, paper(\"paperid\") === paperkeyphrase(\"paperid\"), inner).join(venue, venue(\"venueid\") === paper(\"venueid\"), inner).filter(venue(\"venuename\") === col(\"\"uist\"\")).select(keyphrase(\"keyphraseid\")).distinct"
  },
  {
    "db_id":"scholar",
    "query":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Su-In Lee\" AND t3.year  <  2012;",
    "query_toks":[
      "SELECT",
      "DISTINCT",
      "t3.paperid",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.authorid",
      "=",
      "t1.authorid",
      "JOIN",
      "paper",
      "AS",
      "t3",
      "ON",
      "t2.paperid",
      "=",
      "t3.paperid",
      "WHERE",
      "t1.authorname",
      "=",
      "``",
      "Su-In",
      "Lee",
      "''",
      "AND",
      "t3.year",
      "<",
      "2012",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "distinct",
      "t3",
      ".",
      "paperid",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "authorid",
      "=",
      "t1",
      ".",
      "authorid",
      "join",
      "paper",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "paperid",
      "=",
      "t3",
      ".",
      "paperid",
      "where",
      "t1",
      ".",
      "authorname",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"Give me the papers written by Su-In Lee before 2012 .",
    "question_toks":[
      "Give",
      "me",
      "the",
      "papers",
      "written",
      "by",
      "Su-In",
      "Lee",
      "before",
      "2012",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Su-In Lee\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          2012.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"authorid\") === author(\"authorid\"), inner).join(paper, writes(\"paperid\") === paper(\"paperid\"), inner).filter(author(\"authorname\") === col(\"\"Su-In Lee\"\") && paper(\"year\") < 2012).select(paper(\"paperid\")).distinct"
  },
  {
    "db_id":"yelp",
    "query":"SELECT name FROM business WHERE rating  >  4.5;",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "business",
      "WHERE",
      "rating",
      ">",
      "4.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "business",
      "where",
      "rating",
      ">",
      "value"
    ],
    "question":"List all the businesses with more than 4.5 stars",
    "question_toks":[
      "List",
      "all",
      "the",
      "businesses",
      "with",
      "more",
      "than",
      "4.5",
      "stars"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          4.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"business.filter(col(\"rating\") > 4.5).select(col(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT name FROM business WHERE rating  =  3.5;",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "business",
      "WHERE",
      "rating",
      "=",
      "3.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "business",
      "where",
      "rating",
      "=",
      "value"
    ],
    "question":"List all businesses with rating 3.5",
    "question_toks":[
      "List",
      "all",
      "businesses",
      "with",
      "rating",
      "3.5"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          3.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"business.filter(col(\"rating\") === 3.5).select(col(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT user_id FROM USER WHERE name  =  \"Michelle\";",
    "query_toks":[
      "SELECT",
      "user_id",
      "FROM",
      "USER",
      "WHERE",
      "name",
      "=",
      "``",
      "Michelle",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "user_id",
      "from",
      "user",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"List all user ids with name Michelle",
    "question_toks":[
      "List",
      "all",
      "user",
      "ids",
      "with",
      "name",
      "Michelle"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Michelle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.filter(col(\"name\") === col(\"\"Michelle\"\")).select(col(\"user_id\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT state FROM business WHERE name  =  \"Whataburger\";",
    "query_toks":[
      "SELECT",
      "state",
      "FROM",
      "business",
      "WHERE",
      "name",
      "=",
      "``",
      "Whataburger",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "state",
      "from",
      "business",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"Find all states in which there is a Whataburger",
    "question_toks":[
      "Find",
      "all",
      "states",
      "in",
      "which",
      "there",
      "is",
      "a",
      "Whataburger"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Whataburger\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"business.filter(col(\"name\") === col(\"\"Whataburger\"\")).select(col(\"state\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t2.category_name  =  \"category_category_name0\";",
    "query_toks":[
      "SELECT",
      "t1.city",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "MGM",
      "Grand",
      "Buffet",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "category_category_name0",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "city",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all cities in which there is a restaurant called \" MGM Grand Buffet \"",
    "question_toks":[
      "Find",
      "all",
      "cities",
      "in",
      "which",
      "there",
      "is",
      "a",
      "restaurant",
      "called",
      "``",
      "MGM",
      "Grand",
      "Buffet",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"MGM Grand Buffet\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"category_category_name0\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"name\") === col(\"\"MGM Grand Buffet\"\") && category(\"category_name\") === col(\"\"category_category_name0\"\")).select(business(\"city\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT city FROM business WHERE rating  <  1.5;",
    "query_toks":[
      "SELECT",
      "city",
      "FROM",
      "business",
      "WHERE",
      "rating",
      "<",
      "1.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city",
      "from",
      "business",
      "where",
      "rating",
      "<",
      "value"
    ],
    "question":"Find the cities of businesses rated below 1.5",
    "question_toks":[
      "Find",
      "the",
      "cities",
      "of",
      "businesses",
      "rated",
      "below",
      "1.5"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          1.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"business.filter(col(\"rating\") < 1.5).select(col(\"city\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT city FROM business WHERE name  =  \"Taj Mahal\";",
    "query_toks":[
      "SELECT",
      "city",
      "FROM",
      "business",
      "WHERE",
      "name",
      "=",
      "``",
      "Taj",
      "Mahal",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "city",
      "from",
      "business",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"Find all cities which has a \" Taj Mahal \" .",
    "question_toks":[
      "Find",
      "all",
      "cities",
      "which",
      "has",
      "a",
      "``",
      "Taj",
      "Mahal",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Taj Mahal\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"business.filter(col(\"name\") === col(\"\"Taj Mahal\"\")).select(col(\"city\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT text FROM review WHERE rating  <  1;",
    "query_toks":[
      "SELECT",
      "text",
      "FROM",
      "review",
      "WHERE",
      "rating",
      "<",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "text",
      "from",
      "review",
      "where",
      "rating",
      "<",
      "value"
    ],
    "question":"List all the reviews which rated a business less than 1",
    "question_toks":[
      "List",
      "all",
      "the",
      "reviews",
      "which",
      "rated",
      "a",
      "business",
      "less",
      "than",
      "1"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"review.filter(col(\"rating\") < 1).select(col(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.rating",
      ">",
      "3.5",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "rating",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"List all the restaurant rated more than 3.5",
    "question_toks":[
      "List",
      "all",
      "the",
      "restaurant",
      "rated",
      "more",
      "than",
      "3.5"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          3.5,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"rating\") > 3.5 && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Taj Mahal\" AND t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.city",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Taj",
      "Mahal",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "city",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"find all cities which has a \" Taj Mahal \" restaurant",
    "question_toks":[
      "find",
      "all",
      "cities",
      "which",
      "has",
      "a",
      "``",
      "Taj",
      "Mahal",
      "``",
      "restaurant"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Taj Mahal\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"name\") === col(\"\"Taj Mahal\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"city\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";",
    "query_toks":[
      "SELECT",
      "t1.text",
      "FROM",
      "USER",
      "AS",
      "t2",
      "JOIN",
      "review",
      "AS",
      "t1",
      "ON",
      "t2.user_id",
      "=",
      "t1.user_id",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Niloofar",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "text",
      "from",
      "user",
      "as",
      "t2",
      "join",
      "review",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "user_id",
      "=",
      "t1",
      ".",
      "user_id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"list all the reviews by Niloofar",
    "question_toks":[
      "list",
      "all",
      "the",
      "reviews",
      "by",
      "Niloofar"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              27,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Niloofar\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.join(review, USER(\"user_id\") === review(\"user_id\"), inner).filter(USER(\"name\") === col(\"\"Niloofar\"\")).select(review(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  \"Niloofar\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "review",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t3",
      "ON",
      "t3.user_id",
      "=",
      "t2.user_id",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "Niloofar",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "review",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "user_id",
      "=",
      "t2",
      ".",
      "user_id",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"list all the businesses which have a review by Niloofar",
    "question_toks":[
      "list",
      "all",
      "the",
      "businesses",
      "which",
      "have",
      "a",
      "review",
      "by",
      "Niloofar"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Niloofar\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"review.join(business, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(USER(\"name\") === col(\"\"Niloofar\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  \"Niloofar\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "review",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t3",
      "ON",
      "t3.user_id",
      "=",
      "t2.user_id",
      "WHERE",
      "t2.rating",
      "=",
      "5",
      "AND",
      "t3.name",
      "=",
      "``",
      "Niloofar",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "review",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "user_id",
      "=",
      "t2",
      ".",
      "user_id",
      "where",
      "t2",
      ".",
      "rating",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"list all the businesses which Niloofar rated 5",
    "question_toks":[
      "list",
      "all",
      "the",
      "businesses",
      "which",
      "Niloofar",
      "rated",
      "5"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ],
          5.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Niloofar\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"review.join(business, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(review(\"rating\") === 5 && USER(\"name\") === col(\"\"Niloofar\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN review AS t4 ON t4.business_id  =  t1.business_id JOIN USER AS t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"category_category_name1\" AND t5.name  =  \"Michelle\";",
    "query_toks":[
      "SELECT",
      "t4.text",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t4",
      "ON",
      "t4.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t5",
      "ON",
      "t5.user_id",
      "=",
      "t4.user_id",
      "WHERE",
      "t2.category_name",
      "=",
      "``",
      "Italian",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "category_category_name1",
      "''",
      "AND",
      "t5.name",
      "=",
      "``",
      "Michelle",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "text",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "user_id",
      "=",
      "t4",
      ".",
      "user_id",
      "where",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"List all the reviews by Michelle for Italian restaurant",
    "question_toks":[
      "List",
      "all",
      "the",
      "reviews",
      "by",
      "Michelle",
      "for",
      "Italian",
      "restaurant"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Italian\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"category_category_name1\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Michelle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(category(\"category_name\") === col(\"\"Italian\"\") && category(\"category_name\") === col(\"\"category_category_name1\"\") && USER(\"name\") === col(\"\"Michelle\"\")).select(review(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.text",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Cafe",
      "Zinho",
      "''",
      "AND",
      "t1.state",
      "=",
      "``",
      "Texas",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "text",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "state",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"find the number of reviews written for \" Cafe Zinho \" restaurant in Texas",
    "question_toks":[
      "find",
      "the",
      "number",
      "of",
      "reviews",
      "written",
      "for",
      "``",
      "Cafe",
      "Zinho",
      "``",
      "restaurant",
      "in",
      "Texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Cafe Zinho\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Texas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).filter(business(\"name\") === col(\"\"Cafe Zinho\"\") && business(\"state\") === col(\"\"Texas\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).agg(COUNT(review(\"text\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  \"Italian\" AND t3.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.rating",
      "=",
      "5",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Italian",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "rating",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"List all 5 star Italian restaurant",
    "question_toks":[
      "List",
      "all",
      "5",
      "star",
      "Italian",
      "restaurant"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          5.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Italian\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"rating\") === 5 && category(\"category_name\") === col(\"\"Italian\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.neighbourhood_name",
      "FROM",
      "category",
      "AS",
      "t3",
      "JOIN",
      "business",
      "AS",
      "t2",
      "ON",
      "t3.business_id",
      "=",
      "t2.business_id",
      "JOIN",
      "category",
      "AS",
      "t4",
      "ON",
      "t4.business_id",
      "=",
      "t2.business_id",
      "JOIN",
      "neighbourhood",
      "AS",
      "t1",
      "ON",
      "t1.business_id",
      "=",
      "t2.business_id",
      "WHERE",
      "t2.city",
      "=",
      "``",
      "Madison",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "Italian",
      "''",
      "AND",
      "t4.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "neighbourhood_name",
      "from",
      "category",
      "as",
      "t3",
      "join",
      "business",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t2",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "business_id",
      "=",
      "t2",
      ".",
      "business_id",
      "join",
      "neighbourhood",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "business_id",
      "=",
      "t2",
      ".",
      "business_id",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"List all the neighbourhoods with Italian restaurant in Madison",
    "question_toks":[
      "List",
      "all",
      "the",
      "neighbourhoods",
      "with",
      "Italian",
      "restaurant",
      "in",
      "Madison"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Madison\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Italian\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).join(neighbourhood, neighbourhood(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Madison\"\") && category(\"category_name\") === col(\"\"Italian\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(neighbourhood(\"neighbourhood_name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.neighbourhood_name",
      "FROM",
      "category",
      "AS",
      "t3",
      "JOIN",
      "business",
      "AS",
      "t2",
      "ON",
      "t3.business_id",
      "=",
      "t2.business_id",
      "JOIN",
      "category",
      "AS",
      "t4",
      "ON",
      "t4.business_id",
      "=",
      "t2.business_id",
      "JOIN",
      "neighbourhood",
      "AS",
      "t1",
      "ON",
      "t1.business_id",
      "=",
      "t2.business_id",
      "WHERE",
      "t2.city",
      "=",
      "``",
      "Madison",
      "''",
      "AND",
      "t2.rating",
      "<",
      "2.5",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "Italian",
      "''",
      "AND",
      "t4.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "neighbourhood_name",
      "from",
      "category",
      "as",
      "t3",
      "join",
      "business",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t2",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "business_id",
      "=",
      "t2",
      ".",
      "business_id",
      "join",
      "neighbourhood",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "business_id",
      "=",
      "t2",
      ".",
      "business_id",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "rating",
      "<",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison",
    "question_toks":[
      "List",
      "all",
      "the",
      "neighbourhoods",
      "with",
      "Italian",
      "restaurant",
      "rated",
      "less",
      "than",
      "2.5",
      "in",
      "Madison"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Madison\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2.5,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Italian\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).join(neighbourhood, neighbourhood(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Madison\"\") && business(\"rating\") < 2.5 && category(\"category_name\") === col(\"\"Italian\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(neighbourhood(\"neighbourhood_name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.state",
      "=",
      "``",
      "Pennsylvania",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "state",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"find all the restaurant in Pennsylvania",
    "question_toks":[
      "find",
      "all",
      "the",
      "restaurant",
      "in",
      "Pennsylvania"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Pennsylvania\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"state\") === col(\"\"Pennsylvania\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.state",
      "=",
      "``",
      "Pennsylvania",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "state",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"List all businesses that are restaurant in Pennsylvania .",
    "question_toks":[
      "List",
      "all",
      "businesses",
      "that",
      "are",
      "restaurant",
      "in",
      "Pennsylvania",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Pennsylvania\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"state\") === col(\"\"Pennsylvania\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  \"Pet Groomers\";",
    "query_toks":[
      "SELECT",
      "t3.text",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.review_count",
      ">",
      "100",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Pet",
      "Groomers",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "text",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "review_count",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all the reviews for all Pet Groomers with more than 100 reviews",
    "question_toks":[
      "Find",
      "all",
      "the",
      "reviews",
      "for",
      "all",
      "Pet",
      "Groomers",
      "with",
      "more",
      "than",
      "100",
      "reviews"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          100.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Pet Groomers\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).filter(business(\"review_count\") > 100 && category(\"category_name\") === col(\"\"Pet Groomers\"\")).select(review(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "breweries",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"What are all the breweries in \" Los Angeles \" ?",
    "question_toks":[
      "What",
      "are",
      "all",
      "the",
      "breweries",
      "in",
      "``",
      "Los",
      "Angeles",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"breweries\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Los Angeles\"\") && category(\"category_name\") === col(\"\"breweries\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "breweries",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all breweries in Los Angeles",
    "question_toks":[
      "Find",
      "all",
      "breweries",
      "in",
      "Los",
      "Angeles"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"breweries\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Los Angeles\"\") && category(\"category_name\") === col(\"\"breweries\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "breweries",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all breweries in \" Los Angeles \"",
    "question_toks":[
      "Find",
      "all",
      "breweries",
      "in",
      "``",
      "Los",
      "Angeles",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"breweries\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Los Angeles\"\") && category(\"category_name\") === col(\"\"breweries\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Mesa Grill\" AND t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t4.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t4",
      "ON",
      "t4.user_id",
      "=",
      "t3.user_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Mesa",
      "Grill",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "user_id",
      "=",
      "t3",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all users who reviewed restaurant \" Mesa Grill \"",
    "question_toks":[
      "Find",
      "all",
      "users",
      "who",
      "reviewed",
      "restaurant",
      "``",
      "Mesa",
      "Grill",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Mesa Grill\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(business(\"name\") === col(\"\"Mesa Grill\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(USER(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT full_address FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Walmart\";",
    "query_toks":[
      "SELECT",
      "full_address",
      "FROM",
      "business",
      "WHERE",
      "city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "name",
      "=",
      "``",
      "Walmart",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "full_address",
      "from",
      "business",
      "where",
      "city",
      "=",
      "value",
      "and",
      "name",
      "=",
      "value"
    ],
    "question":"List the addresses of all Walmart in \" Los Angeles \"",
    "question_toks":[
      "List",
      "the",
      "addresses",
      "of",
      "all",
      "Walmart",
      "in",
      "``",
      "Los",
      "Angeles",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Walmart\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"business.filter(col(\"city\") === col(\"\"Los Angeles\"\") && col(\"name\") === col(\"\"Walmart\"\")).select(col(\"full_address\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t4",
      "ON",
      "t4.user_id",
      "=",
      "t3.user_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Dallas",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      "AND",
      "t4.name",
      "=",
      "``",
      "Patrick",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "user_id",
      "=",
      "t3",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all restaurant reviewed by Patrick in \" Dallas \"",
    "question_toks":[
      "Find",
      "all",
      "restaurant",
      "reviewed",
      "by",
      "Patrick",
      "in",
      "``",
      "Dallas",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Patrick\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(business(\"city\") === col(\"\"Dallas\"\") && category(\"category_name\") === col(\"\"restaurant\"\") && USER(\"name\") === col(\"\"Patrick\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t4",
      "ON",
      "t4.user_id",
      "=",
      "t3.user_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Dallas",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      "AND",
      "t4.name",
      "=",
      "``",
      "Patrick",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "user_id",
      "=",
      "t3",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Which restaurant in Dallas were reviewed by user Patrick ?",
    "question_toks":[
      "Which",
      "restaurant",
      "in",
      "Dallas",
      "were",
      "reviewed",
      "by",
      "user",
      "Patrick",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Patrick\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(business(\"city\") === col(\"\"Dallas\"\") && category(\"category_name\") === col(\"\"restaurant\"\") && USER(\"name\") === col(\"\"Patrick\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t4",
      "ON",
      "t4.user_id",
      "=",
      "t3.user_id",
      "WHERE",
      "t2.category_name",
      "=",
      "``",
      "Bars",
      "''",
      "AND",
      "t4.name",
      "=",
      "``",
      "Patrick",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "user_id",
      "=",
      "t3",
      ".",
      "user_id",
      "where",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all Bars reviewed by Patrick",
    "question_toks":[
      "Find",
      "all",
      "Bars",
      "reviewed",
      "by",
      "Patrick"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Bars\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Patrick\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(category(\"category_name\") === col(\"\"Bars\"\") && USER(\"name\") === col(\"\"Patrick\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t4",
      "ON",
      "t4.user_id",
      "=",
      "t3.user_id",
      "WHERE",
      "t1.rating",
      ">",
      "=",
      "3",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Bars",
      "''",
      "AND",
      "t4.name",
      "=",
      "``",
      "Patrick",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "user_id",
      "=",
      "t3",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "rating",
      ">",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all Bars reviewed by Patrick with at least 3 stars",
    "question_toks":[
      "Find",
      "all",
      "Bars",
      "reviewed",
      "by",
      "Patrick",
      "with",
      "at",
      "least",
      "3",
      "stars"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          5,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          3.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Bars\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Patrick\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(business(\"rating\") >= 3 && category(\"category_name\") === col(\"\"Bars\"\") && USER(\"name\") === col(\"\"Patrick\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;",
    "query_toks":[
      "SELECT",
      "t3.name",
      "FROM",
      "tip",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t3",
      "ON",
      "t3.user_id",
      "=",
      "t2.user_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Barrio",
      "Cafe",
      "''",
      "AND",
      "t2.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      "from",
      "tip",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "user_id",
      "=",
      "t2",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Find all users who have written tips for \" Barrio Cafe \" in 2015",
    "question_toks":[
      "Find",
      "all",
      "users",
      "who",
      "have",
      "written",
      "tips",
      "for",
      "``",
      "Barrio",
      "Cafe",
      "``",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Barrio Cafe\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"tip.join(business, tip(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === tip(\"user_id\"), inner).filter(business(\"name\") === col(\"\"Barrio Cafe\"\") && tip(\"year\") === 2015).select(USER(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT name FROM business WHERE rating  <  2 AND state  =  \"Texas\";",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "business",
      "WHERE",
      "rating",
      "<",
      "2",
      "AND",
      "state",
      "=",
      "``",
      "Texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "business",
      "where",
      "rating",
      "<",
      "value",
      "and",
      "state",
      "=",
      "value"
    ],
    "question":"Find all businesses in Texas with a rating below 2",
    "question_toks":[
      "Find",
      "all",
      "businesses",
      "in",
      "Texas",
      "with",
      "a",
      "rating",
      "below",
      "2"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          4,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"business.filter(col(\"rating\") < 2 && col(\"state\") === col(\"\"Texas\"\")).select(col(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Seafood",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all restaurant Seafood in Los Angeles",
    "question_toks":[
      "Find",
      "all",
      "restaurant",
      "Seafood",
      "in",
      "Los",
      "Angeles"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Seafood\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Los Angeles\"\") && category(\"category_name\") === col(\"\"Seafood\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Seafood",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"List all the Seafood restaurant in \" Los Angeles \"",
    "question_toks":[
      "List",
      "all",
      "the",
      "Seafood",
      "restaurant",
      "in",
      "``",
      "Los",
      "Angeles",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Seafood\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Los Angeles\"\") && category(\"category_name\") === col(\"\"Seafood\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Seafood",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all restaurant that serve Seafood in \" Los Angeles \"",
    "question_toks":[
      "Find",
      "all",
      "restaurant",
      "that",
      "serve",
      "Seafood",
      "in",
      "``",
      "Los",
      "Angeles",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Seafood\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Los Angeles\"\") && category(\"category_name\") === col(\"\"Seafood\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  \"Patrick\";",
    "query_toks":[
      "SELECT",
      "t1.text",
      "FROM",
      "USER",
      "AS",
      "t2",
      "JOIN",
      "review",
      "AS",
      "t1",
      "ON",
      "t2.user_id",
      "=",
      "t1.user_id",
      "WHERE",
      "t1.rating",
      ">",
      "4",
      "AND",
      "t2.name",
      "=",
      "``",
      "Patrick",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "text",
      "from",
      "user",
      "as",
      "t2",
      "join",
      "review",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "user_id",
      "=",
      "t1",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "rating",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all reviews by Patrick with a rating above 4",
    "question_toks":[
      "Find",
      "all",
      "reviews",
      "by",
      "Patrick",
      "with",
      "a",
      "rating",
      "above",
      "4"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              27,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ],
          4.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Patrick\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.join(review, USER(\"user_id\") === review(\"user_id\"), inner).filter(review(\"rating\") > 4 && USER(\"name\") === col(\"\"Patrick\"\")).select(review(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT business_id FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Apple Store\";",
    "query_toks":[
      "SELECT",
      "business_id",
      "FROM",
      "business",
      "WHERE",
      "city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "name",
      "=",
      "``",
      "Apple",
      "Store",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "business_id",
      "from",
      "business",
      "where",
      "city",
      "=",
      "value",
      "and",
      "name",
      "=",
      "value"
    ],
    "question":"Find all Apple Store in \" Los Angeles \"",
    "question_toks":[
      "Find",
      "all",
      "Apple",
      "Store",
      "in",
      "``",
      "Los",
      "Angeles",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Apple Store\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"business.filter(col(\"city\") === col(\"\"Los Angeles\"\") && col(\"name\") === col(\"\"Apple Store\"\")).select(col(\"business_id\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  4.5 AND t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Dallas",
      "''",
      "AND",
      "t1.rating",
      ">",
      "4.5",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all Dallas restaurant with a rating above 4.5",
    "question_toks":[
      "Find",
      "all",
      "Dallas",
      "restaurant",
      "with",
      "a",
      "rating",
      "above",
      "4.5"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          4.5,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Dallas\"\") && business(\"rating\") > 4.5 && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  \"Flat Top Grill\" AND t3.category_name  =  \"category_category_name0\";",
    "query_toks":[
      "SELECT",
      "t1.neighbourhood_name",
      "FROM",
      "category",
      "AS",
      "t3",
      "JOIN",
      "business",
      "AS",
      "t2",
      "ON",
      "t3.business_id",
      "=",
      "t2.business_id",
      "JOIN",
      "neighbourhood",
      "AS",
      "t1",
      "ON",
      "t1.business_id",
      "=",
      "t2.business_id",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Flat",
      "Top",
      "Grill",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "category_category_name0",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "neighbourhood_name",
      "from",
      "category",
      "as",
      "t3",
      "join",
      "business",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t2",
      ".",
      "business_id",
      "join",
      "neighbourhood",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "business_id",
      "=",
      "t2",
      ".",
      "business_id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"What neighbourhood is restaurant \" Flat Top Grill \" in ?",
    "question_toks":[
      "What",
      "neighbourhood",
      "is",
      "restaurant",
      "``",
      "Flat",
      "Top",
      "Grill",
      "``",
      "in",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Flat Top Grill\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"category_category_name0\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(neighbourhood, neighbourhood(\"business_id\") === business(\"business_id\"), inner).filter(business(\"name\") === col(\"\"Flat Top Grill\"\") && category(\"category_name\") === col(\"\"category_category_name0\"\")).select(neighbourhood(\"neighbourhood_name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Vintner Grill\" AND t2.likes  >  9;",
    "query_toks":[
      "SELECT",
      "t2.text",
      "FROM",
      "tip",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Vintner",
      "Grill",
      "''",
      "AND",
      "t2.likes",
      ">",
      "9",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "text",
      "from",
      "tip",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "likes",
      ">",
      "value"
    ],
    "question":"Find all tips about \" Vintner Grill \" that received more than 9 likes",
    "question_toks":[
      "Find",
      "all",
      "tips",
      "about",
      "``",
      "Vintner",
      "Grill",
      "``",
      "that",
      "received",
      "more",
      "than",
      "9",
      "likes"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Vintner Grill\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ],
          9.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"tip.join(business, tip(\"business_id\") === business(\"business_id\"), inner).filter(business(\"name\") === col(\"\"Vintner Grill\"\") && tip(\"likes\") > 9).select(tip(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Kabob Palace\" AND t2.year  =  2014;",
    "query_toks":[
      "SELECT",
      "t2.text",
      "FROM",
      "review",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Kabob",
      "Palace",
      "''",
      "AND",
      "t2.year",
      "=",
      "2014",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "text",
      "from",
      "review",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Find all reviews about \" Kabob Palace \" in year 2014",
    "question_toks":[
      "Find",
      "all",
      "reviews",
      "about",
      "``",
      "Kabob",
      "Palace",
      "``",
      "in",
      "year",
      "2014"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Kabob Palace\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"review.join(business, review(\"business_id\") === business(\"business_id\"), inner).filter(business(\"name\") === col(\"\"Kabob Palace\"\") && review(\"year\") === 2014).select(review(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Dallas\";",
    "query_toks":[
      "SELECT",
      "t3.name",
      "FROM",
      "tip",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t3",
      "ON",
      "t3.user_id",
      "=",
      "t2.user_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Dallas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      "from",
      "tip",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "user_id",
      "=",
      "t2",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value"
    ],
    "question":"Find all users who have written tips about businesses in Dallas",
    "question_toks":[
      "Find",
      "all",
      "users",
      "who",
      "have",
      "written",
      "tips",
      "about",
      "businesses",
      "in",
      "Dallas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"tip.join(business, tip(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === tip(\"user_id\"), inner).filter(business(\"city\") === col(\"\"Dallas\"\")).select(USER(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.city",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "MGM",
      "Grand",
      "Buffet",
      "''",
      "AND",
      "t1.state",
      "=",
      "``",
      "Texas",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "city",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "state",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all cities in Texas in which there is a restaurant called \" MGM Grand Buffet \"",
    "question_toks":[
      "Find",
      "all",
      "cities",
      "in",
      "Texas",
      "in",
      "which",
      "there",
      "is",
      "a",
      "restaurant",
      "called",
      "``",
      "MGM",
      "Grand",
      "Buffet",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"MGM Grand Buffet\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Texas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"name\") === col(\"\"MGM Grand Buffet\"\") && business(\"state\") === col(\"\"Texas\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"city\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN tip AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Pet Groomers\";",
    "query_toks":[
      "SELECT",
      "t4.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "tip",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t4",
      "ON",
      "t4.user_id",
      "=",
      "t3.user_id",
      "WHERE",
      "t2.category_name",
      "=",
      "``",
      "Pet",
      "Groomers",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "tip",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "user_id",
      "=",
      "t3",
      ".",
      "user_id",
      "where",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find the users who have given tips on Pet Groomers",
    "question_toks":[
      "Find",
      "the",
      "users",
      "who",
      "have",
      "given",
      "tips",
      "on",
      "Pet",
      "Groomers"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Pet Groomers\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(tip, tip(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === tip(\"user_id\"), inner).filter(category(\"category_name\") === col(\"\"Pet Groomers\"\")).select(USER(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\";",
    "query_toks":[
      "SELECT",
      "t2.text",
      "FROM",
      "tip",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Cafe",
      "Zinho",
      "''",
      "AND",
      "t1.state",
      "=",
      "``",
      "Texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "text",
      "from",
      "tip",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "state",
      "=",
      "value"
    ],
    "question":"Find all tips for \" Cafe Zinho \" in Texas .",
    "question_toks":[
      "Find",
      "all",
      "tips",
      "for",
      "``",
      "Cafe",
      "Zinho",
      "``",
      "in",
      "Texas",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Cafe Zinho\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"tip.join(business, tip(\"business_id\") === business(\"business_id\"), inner).filter(business(\"name\") === col(\"\"Cafe Zinho\"\") && business(\"state\") === col(\"\"Texas\"\")).select(tip(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t4.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t4",
      "ON",
      "t4.user_id",
      "=",
      "t3.user_id",
      "WHERE",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "user_id",
      "=",
      "t3",
      ".",
      "user_id",
      "where",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"List all users who reviewed businesses that are restaurant .",
    "question_toks":[
      "List",
      "all",
      "users",
      "who",
      "reviewed",
      "businesses",
      "that",
      "are",
      "restaurant",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(category(\"category_name\") === col(\"\"restaurant\"\")).select(USER(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Pennsylvania\" AND t2.year  =  2010;",
    "query_toks":[
      "SELECT",
      "t2.text",
      "FROM",
      "tip",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Cafe",
      "Zinho",
      "''",
      "AND",
      "t1.state",
      "=",
      "``",
      "Pennsylvania",
      "''",
      "AND",
      "t2.year",
      "=",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "text",
      "from",
      "tip",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "state",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"List all tips for \" Cafe Zinho \" in Pennsylvania in 2010 .",
    "question_toks":[
      "List",
      "all",
      "tips",
      "for",
      "``",
      "Cafe",
      "Zinho",
      "``",
      "in",
      "Pennsylvania",
      "in",
      "2010",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Cafe Zinho\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Pennsylvania\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"tip.join(business, tip(\"business_id\") === business(\"business_id\"), inner).filter(business(\"name\") === col(\"\"Cafe Zinho\"\") && business(\"state\") === col(\"\"Pennsylvania\"\") && tip(\"year\") === 2010).select(tip(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\" AND t3.year  =  2010;",
    "query_toks":[
      "SELECT",
      "t4.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t4",
      "ON",
      "t4.user_id",
      "=",
      "t3.user_id",
      "WHERE",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      "AND",
      "t3.year",
      "=",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "user_id",
      "=",
      "t3",
      ".",
      "user_id",
      "where",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"List all users who reviewed businesses that are restaurant in 2010 .",
    "question_toks":[
      "List",
      "all",
      "users",
      "who",
      "reviewed",
      "businesses",
      "that",
      "are",
      "restaurant",
      "in",
      "2010",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(category(\"category_name\") === col(\"\"restaurant\"\") && review(\"year\") === 2010).select(USER(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id  =  t1.user_id JOIN tip AS t2 ON t3.user_id  =  t2.user_id WHERE t1.year  =  2012;",
    "query_toks":[
      "SELECT",
      "t2.text",
      "FROM",
      "USER",
      "AS",
      "t3",
      "JOIN",
      "review",
      "AS",
      "t1",
      "ON",
      "t3.user_id",
      "=",
      "t1.user_id",
      "JOIN",
      "tip",
      "AS",
      "t2",
      "ON",
      "t3.user_id",
      "=",
      "t2.user_id",
      "WHERE",
      "t1.year",
      "=",
      "2012",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "text",
      "from",
      "user",
      "as",
      "t3",
      "join",
      "review",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "user_id",
      "=",
      "t1",
      ".",
      "user_id",
      "join",
      "tip",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "user_id",
      "=",
      "t2",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"Find all the tips from a user who has written a review in 2012",
    "question_toks":[
      "Find",
      "all",
      "the",
      "tips",
      "from",
      "a",
      "user",
      "who",
      "has",
      "written",
      "a",
      "review",
      "in",
      "2012"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              27,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2012.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.join(review, USER(\"user_id\") === review(\"user_id\"), inner).join(tip, USER(\"user_id\") === tip(\"user_id\"), inner).filter(review(\"year\") === 2012).select(tip(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;",
    "query_toks":[
      "SELECT",
      "t2.text",
      "FROM",
      "review",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.rating",
      "=",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "text",
      "from",
      "review",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "rating",
      "=",
      "value"
    ],
    "question":"Find all reviews for businesses rated 2.5",
    "question_toks":[
      "Find",
      "all",
      "reviews",
      "for",
      "businesses",
      "rated",
      "2.5"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"review.join(business, review(\"business_id\") === business(\"business_id\"), inner).filter(business(\"rating\") === 2.5).select(review(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Madison",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "escape",
      "games",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"find the number of escape games in Madison",
    "question_toks":[
      "find",
      "the",
      "number",
      "of",
      "escape",
      "games",
      "in",
      "Madison"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Madison\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"escape games\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Madison\"\") && category(\"category_name\") === col(\"\"escape games\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Madison",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "escape",
      "games",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"What is the number of escape games in Madison",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "escape",
      "games",
      "in",
      "Madison"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Madison\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"escape games\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Madison\"\") && category(\"category_name\") === col(\"\"escape games\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Madison",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "escape",
      "games",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"How many escape games exist in Madison",
    "question_toks":[
      "How",
      "many",
      "escape",
      "games",
      "exist",
      "in",
      "Madison"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Madison\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"escape games\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Madison\"\") && category(\"category_name\") === col(\"\"escape games\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Madison",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "escape",
      "games",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"What is the number of escape games in \" Madison \" ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "escape",
      "games",
      "in",
      "``",
      "Madison",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Madison\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"escape games\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Madison\"\") && category(\"category_name\") === col(\"\"escape games\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Madison",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "escape",
      "games",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"How many escape games are there in Madison ?",
    "question_toks":[
      "How",
      "many",
      "escape",
      "games",
      "are",
      "there",
      "in",
      "Madison",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Madison\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"escape games\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Madison\"\") && category(\"category_name\") === col(\"\"escape games\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.rating",
      ">",
      "3.5",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "rating",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"find the number of restaurant rated more than 3.5",
    "question_toks":[
      "find",
      "the",
      "number",
      "of",
      "restaurant",
      "rated",
      "more",
      "than",
      "3.5"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          3.5,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"rating\") > 3.5 && category(\"category_name\") === col(\"\"restaurant\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Moroccan\";",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t4.count",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "checkin",
      "AS",
      "t4",
      "ON",
      "t4.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "Moroccan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t4",
      ".",
      "count",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "checkin",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"find the total checkins in Moroccan restaurant in \" Los Angeles \"",
    "question_toks":[
      "find",
      "the",
      "total",
      "checkins",
      "in",
      "Moroccan",
      "restaurant",
      "in",
      "``",
      "Los",
      "Angeles",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Moroccan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).join(checkin, checkin(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Los Angeles\"\") && category(\"category_name\") === col(\"\"restaurant\"\") && category(\"category_name\") === col(\"\"Moroccan\"\")).agg(SUM(checkin(\"count\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" AND t4.day  =  \"Friday\";",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t4.count",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "checkin",
      "AS",
      "t4",
      "ON",
      "t4.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Moroccan",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      "AND",
      "t4.day",
      "=",
      "``",
      "Friday",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t4",
      ".",
      "count",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "checkin",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "day",
      "=",
      "value"
    ],
    "question":"find the total checkins in Moroccan restaurant in \" Los Angeles \" on Friday",
    "question_toks":[
      "find",
      "the",
      "total",
      "checkins",
      "in",
      "Moroccan",
      "restaurant",
      "in",
      "``",
      "Los",
      "Angeles",
      "``",
      "on",
      "Friday"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Moroccan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Friday\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).join(checkin, checkin(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Los Angeles\"\") && category(\"category_name\") === col(\"\"Moroccan\"\") && category(\"category_name\") === col(\"\"restaurant\"\") && checkin(\"day\") === col(\"\"Friday\"\")).agg(SUM(checkin(\"count\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  \"Niloofar\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.text",
      ")",
      "FROM",
      "USER",
      "AS",
      "t2",
      "JOIN",
      "review",
      "AS",
      "t1",
      "ON",
      "t2.user_id",
      "=",
      "t1.user_id",
      "WHERE",
      "t1.year",
      "=",
      "2015",
      "AND",
      "t2.name",
      "=",
      "``",
      "Niloofar",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "text",
      ")",
      "from",
      "user",
      "as",
      "t2",
      "join",
      "review",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "user_id",
      "=",
      "t1",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many reviews has Niloofar written in 2015",
    "question_toks":[
      "How",
      "many",
      "reviews",
      "has",
      "Niloofar",
      "written",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              27,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Niloofar\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.join(review, USER(\"user_id\") === review(\"user_id\"), inner).filter(review(\"year\") === 2015 && USER(\"name\") === col(\"\"Niloofar\"\")).agg(COUNT(review(\"text\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";",
    "query_toks":[
      "SELECT",
      "AVG",
      "(",
      "t1.rating",
      ")",
      "FROM",
      "USER",
      "AS",
      "t2",
      "JOIN",
      "review",
      "AS",
      "t1",
      "ON",
      "t2.user_id",
      "=",
      "t1.user_id",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Michelle",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "t1",
      ".",
      "rating",
      ")",
      "from",
      "user",
      "as",
      "t2",
      "join",
      "review",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "user_id",
      "=",
      "t1",
      ".",
      "user_id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"what is the average rating given in Michelle reviews",
    "question_toks":[
      "what",
      "is",
      "the",
      "average",
      "rating",
      "given",
      "in",
      "Michelle",
      "reviews"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              27,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Michelle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.join(review, USER(\"user_id\") === review(\"user_id\"), inner).filter(USER(\"name\") === col(\"\"Michelle\"\")).agg(AVG(review(\"rating\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t2.day  =  \"Friday\";",
    "query_toks":[
      "SELECT",
      "t2.count",
      "FROM",
      "checkin",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Cafe",
      "Zinho",
      "''",
      "AND",
      "t2.day",
      "=",
      "``",
      "Friday",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "count",
      "from",
      "checkin",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "day",
      "=",
      "value"
    ],
    "question":"What is the number of checkins for \" Cafe Zinho \" on Friday",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "checkins",
      "for",
      "``",
      "Cafe",
      "Zinho",
      "``",
      "on",
      "Friday"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Cafe Zinho\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Friday\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"checkin.join(business, checkin(\"business_id\") === business(\"business_id\"), inner).filter(business(\"name\") === col(\"\"Cafe Zinho\"\") && checkin(\"day\") === col(\"\"Friday\"\")).select(checkin(\"count\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Pittsburgh\" AND t1.name  =  \"Sushi Too\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.name",
      ")",
      "FROM",
      "review",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t3",
      "ON",
      "t3.user_id",
      "=",
      "t2.user_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Pittsburgh",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "Sushi",
      "Too",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "name",
      ")",
      "from",
      "review",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "user_id",
      "=",
      "t2",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"how many users reviewed \" Sushi Too \" in Pittsburgh",
    "question_toks":[
      "how",
      "many",
      "users",
      "reviewed",
      "``",
      "Sushi",
      "Too",
      "``",
      "in",
      "Pittsburgh"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                17,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Pittsburgh\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Sushi Too\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"review.join(business, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(business(\"city\") === col(\"\"Pittsburgh\"\") && business(\"name\") === col(\"\"Sushi Too\"\")).agg(COUNT(USER(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Pittsburgh\" AND t1.rating  =  4.5 AND t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Pittsburgh",
      "''",
      "AND",
      "t1.rating",
      "=",
      "4.5",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"What is the number of restaurant in Pittsburgh rated 4.5",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "restaurant",
      "in",
      "Pittsburgh",
      "rated",
      "4.5"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Pittsburgh\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          4.5,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Pittsburgh\"\") && business(\"rating\") === 4.5 && category(\"category_name\") === col(\"\"restaurant\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT text ) FROM tip WHERE YEAR  =  2015;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "text",
      ")",
      "FROM",
      "tip",
      "WHERE",
      "YEAR",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "text",
      ")",
      "from",
      "tip",
      "where",
      "year",
      "=",
      "value"
    ],
    "question":"How many tips have been written in 2015",
    "question_toks":[
      "How",
      "many",
      "tips",
      "have",
      "been",
      "written",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"tip.filter(col(\"YEAR\") === 2015).agg(COUNT(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t1.likes",
      ")",
      "FROM",
      "USER",
      "AS",
      "t2",
      "JOIN",
      "tip",
      "AS",
      "t1",
      "ON",
      "t2.user_id",
      "=",
      "t1.user_id",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Niloofar",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t1",
      ".",
      "likes",
      ")",
      "from",
      "user",
      "as",
      "t2",
      "join",
      "tip",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "user_id",
      "=",
      "t1",
      ".",
      "user_id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"What is the total likes on tips from Niloofar",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "likes",
      "on",
      "tips",
      "from",
      "Niloofar"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              35,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Niloofar\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.join(tip, USER(\"user_id\") === tip(\"user_id\"), inner).filter(USER(\"name\") === col(\"\"Niloofar\"\")).agg(SUM(tip(\"likes\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\";",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t2.likes",
      ")",
      "FROM",
      "tip",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Cafe",
      "Zinho",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t2",
      ".",
      "likes",
      ")",
      "from",
      "tip",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"What is the total likes on tips about \" Cafe Zinho \"",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "likes",
      "on",
      "tips",
      "about",
      "``",
      "Cafe",
      "Zinho",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Cafe Zinho\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"tip.join(business, tip(\"business_id\") === business(\"business_id\"), inner).filter(business(\"name\") === col(\"\"Cafe Zinho\"\")).agg(SUM(tip(\"likes\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Cafe Zinho\" AND t3.name  =  \"Niloofar\";",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t2.likes",
      ")",
      "FROM",
      "tip",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t3",
      "ON",
      "t3.user_id",
      "=",
      "t2.user_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Cafe",
      "Zinho",
      "''",
      "AND",
      "t3.name",
      "=",
      "``",
      "Niloofar",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t2",
      ".",
      "likes",
      ")",
      "from",
      "tip",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "user_id",
      "=",
      "t2",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"What is the total likes on tips from Niloofar about \" Cafe Zinho \"",
    "question_toks":[
      "What",
      "is",
      "the",
      "total",
      "likes",
      "on",
      "tips",
      "from",
      "Niloofar",
      "about",
      "``",
      "Cafe",
      "Zinho",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Cafe Zinho\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Niloofar\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"tip.join(business, tip(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === tip(\"user_id\"), inner).filter(business(\"name\") === col(\"\"Cafe Zinho\"\") && USER(\"name\") === col(\"\"Niloofar\"\")).agg(SUM(tip(\"likes\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.text",
      ")",
      "FROM",
      "USER",
      "AS",
      "t2",
      "JOIN",
      "tip",
      "AS",
      "t1",
      "ON",
      "t2.user_id",
      "=",
      "t1.user_id",
      "WHERE",
      "t1.year",
      "=",
      "2010",
      "AND",
      "t2.name",
      "=",
      "``",
      "Michelle",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "text",
      ")",
      "from",
      "user",
      "as",
      "t2",
      "join",
      "tip",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "user_id",
      "=",
      "t1",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many tips has Michelle written in 2010",
    "question_toks":[
      "How",
      "many",
      "tips",
      "has",
      "Michelle",
      "written",
      "in",
      "2010"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              35,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          2010.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Michelle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.join(tip, USER(\"user_id\") === tip(\"user_id\"), inner).filter(tip(\"year\") === 2010 && USER(\"name\") === col(\"\"Michelle\"\")).agg(COUNT(tip(\"text\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.text",
      ")",
      "FROM",
      "USER",
      "AS",
      "t2",
      "JOIN",
      "tip",
      "AS",
      "t1",
      "ON",
      "t2.user_id",
      "=",
      "t1.user_id",
      "WHERE",
      "t1.year",
      "=",
      "2010",
      "AND",
      "t2.name",
      "=",
      "``",
      "Michelle",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "text",
      ")",
      "from",
      "user",
      "as",
      "t2",
      "join",
      "tip",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "user_id",
      "=",
      "t1",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Return me the number of tips that are written by Michelle in 2010 .",
    "question_toks":[
      "Return",
      "me",
      "the",
      "number",
      "of",
      "tips",
      "that",
      "are",
      "written",
      "by",
      "Michelle",
      "in",
      "2010",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              35,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          2010.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Michelle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.join(tip, USER(\"user_id\") === tip(\"user_id\"), inner).filter(tip(\"year\") === 2010 && USER(\"name\") === col(\"\"Michelle\"\")).agg(COUNT(tip(\"text\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"April\" AND t2.name  =  \"Michelle\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.text",
      ")",
      "FROM",
      "USER",
      "AS",
      "t2",
      "JOIN",
      "tip",
      "AS",
      "t1",
      "ON",
      "t2.user_id",
      "=",
      "t1.user_id",
      "WHERE",
      "t1.month",
      "=",
      "``",
      "April",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "Michelle",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "text",
      ")",
      "from",
      "user",
      "as",
      "t2",
      "join",
      "tip",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "user_id",
      "=",
      "t1",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "month",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many tips has Michelle written in April",
    "question_toks":[
      "How",
      "many",
      "tips",
      "has",
      "Michelle",
      "written",
      "in",
      "April"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              35,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"April\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Michelle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.join(tip, USER(\"user_id\") === tip(\"user_id\"), inner).filter(tip(\"month\") === col(\"\"April\"\") && USER(\"name\") === col(\"\"Michelle\"\")).agg(COUNT(tip(\"text\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.state",
      "=",
      "``",
      "Texas",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "state",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"what is the number of restaurant in Texas",
    "question_toks":[
      "what",
      "is",
      "the",
      "number",
      "of",
      "restaurant",
      "in",
      "Texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Texas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"state\") === col(\"\"Texas\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Dallas",
      "''",
      "AND",
      "t1.rating",
      ">",
      "3.5",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Bars",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"How many Bars in \" Dallas \" have a rating above 3.5 ?",
    "question_toks":[
      "How",
      "many",
      "Bars",
      "in",
      "``",
      "Dallas",
      "``",
      "have",
      "a",
      "rating",
      "above",
      "3.5",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          3.5,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Bars\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Dallas\"\") && business(\"rating\") > 3.5 && category(\"category_name\") === col(\"\"Bars\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Dallas",
      "''",
      "AND",
      "t1.rating",
      ">",
      "3.5",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Bars",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"How many Bars in Dallas have a rating above 3.5 ?",
    "question_toks":[
      "How",
      "many",
      "Bars",
      "in",
      "Dallas",
      "have",
      "a",
      "rating",
      "above",
      "3.5",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          3.5,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Bars\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Dallas\"\") && business(\"rating\") > 3.5 && category(\"category_name\") === col(\"\"Bars\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t1.name  =  \"Texas de Brazil\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t4",
      "ON",
      "t4.user_id",
      "=",
      "t3.user_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Dallas",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "Texas",
      "de",
      "Brazil",
      "''",
      "AND",
      "t1.state",
      "=",
      "``",
      "Texas",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "user_id",
      "=",
      "t3",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "state",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?",
    "question_toks":[
      "How",
      "many",
      "people",
      "reviewed",
      "the",
      "restaurant",
      "``",
      "Texas",
      "de",
      "Brazil",
      "``",
      "in",
      "Dallas",
      "Texas",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                17,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Texas de Brazil\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Texas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(business(\"city\") === col(\"\"Dallas\"\") && business(\"name\") === col(\"\"Texas de Brazil\"\") && business(\"state\") === col(\"\"Texas\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).agg(COUNT(USER(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Bistro Di Napoli\" AND t2.year  =  2015;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.name",
      ")",
      "FROM",
      "review",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t3",
      "ON",
      "t3.user_id",
      "=",
      "t2.user_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Bistro",
      "Di",
      "Napoli",
      "''",
      "AND",
      "t2.year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "name",
      ")",
      "from",
      "review",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "user_id",
      "=",
      "t2",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"How many people reviewed \" Bistro Di Napoli \" in 2015 ?",
    "question_toks":[
      "How",
      "many",
      "people",
      "reviewed",
      "``",
      "Bistro",
      "Di",
      "Napoli",
      "``",
      "in",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                17,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Bistro Di Napoli\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"review.join(business, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(business(\"name\") === col(\"\"Bistro Di Napoli\"\") && review(\"year\") === 2015).agg(COUNT(USER(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t3.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Hazelwood\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t3",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "neighbourhood",
      "AS",
      "t2",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Dallas",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      "AND",
      "t2.neighbourhood_name",
      "=",
      "``",
      "Hazelwood",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t3",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "neighbourhood",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "neighbourhood_name",
      "=",
      "value"
    ],
    "question":"How many restaurant are there in the Hazelwood district of Dallas ?",
    "question_toks":[
      "How",
      "many",
      "restaurant",
      "are",
      "there",
      "in",
      "the",
      "Hazelwood",
      "district",
      "of",
      "Dallas",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Hazelwood\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(neighbourhood, neighbourhood(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Dallas\"\") && category(\"category_name\") === col(\"\"restaurant\"\") && neighbourhood(\"neighbourhood_name\") === col(\"\"Hazelwood\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "business_id",
      ")",
      "FROM",
      "business",
      "WHERE",
      "city",
      "=",
      "``",
      "Dallas",
      "''",
      "AND",
      "name",
      "=",
      "``",
      "Starbucks",
      "''",
      "AND",
      "state",
      "=",
      "``",
      "Texas",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "business_id",
      ")",
      "from",
      "business",
      "where",
      "city",
      "=",
      "value",
      "and",
      "name",
      "=",
      "value",
      "and",
      "state",
      "=",
      "value"
    ],
    "question":"How many Starbucks are there in Dallas Texas ?",
    "question_toks":[
      "How",
      "many",
      "Starbucks",
      "are",
      "there",
      "in",
      "Dallas",
      "Texas",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                2,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Starbucks\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Texas\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"business.filter(col(\"city\") === col(\"\"Dallas\"\") && col(\"name\") === col(\"\"Starbucks\"\") && col(\"state\") === col(\"\"Texas\"\")).agg(COUNT(\"business_id\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT review_count FROM business WHERE name  =  \"Acacia Cafe\";",
    "query_toks":[
      "SELECT",
      "review_count",
      "FROM",
      "business",
      "WHERE",
      "name",
      "=",
      "``",
      "Acacia",
      "Cafe",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "review_count",
      "from",
      "business",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"How many reviews does \" Acacia Cafe \" have ?",
    "question_toks":[
      "How",
      "many",
      "reviews",
      "does",
      "``",
      "Acacia",
      "Cafe",
      "``",
      "have",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Acacia Cafe\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"business.filter(col(\"name\") === col(\"\"Acacia Cafe\"\")).select(col(\"review_count\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.neighbourhood_name  =  \"Stone Meadows\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "neighbourhood",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Madison",
      "''",
      "AND",
      "t2.neighbourhood_name",
      "=",
      "``",
      "Stone",
      "Meadows",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "neighbourhood",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "neighbourhood_name",
      "=",
      "value"
    ],
    "question":"How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison ?",
    "question_toks":[
      "How",
      "many",
      "businesses",
      "are",
      "there",
      "in",
      "the",
      "``",
      "Stone",
      "Meadows",
      "``",
      "neighbourhood",
      "in",
      "Madison",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Madison\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Stone Meadows\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"neighbourhood.join(business, neighbourhood(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Madison\"\") && neighbourhood(\"neighbourhood_name\") === col(\"\"Stone Meadows\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Adrienne\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.text",
      ")",
      "FROM",
      "USER",
      "AS",
      "t2",
      "JOIN",
      "review",
      "AS",
      "t1",
      "ON",
      "t2.user_id",
      "=",
      "t1.user_id",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Adrienne",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "text",
      ")",
      "from",
      "user",
      "as",
      "t2",
      "join",
      "review",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "user_id",
      "=",
      "t1",
      ".",
      "user_id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many reviews has Adrienne written ?",
    "question_toks":[
      "How",
      "many",
      "reviews",
      "has",
      "Adrienne",
      "written",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              27,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Adrienne\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.join(review, USER(\"user_id\") === review(\"user_id\"), inner).filter(USER(\"name\") === col(\"\"Adrienne\"\")).agg(COUNT(review(\"text\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"March\" AND t1.year  =  2014 AND t2.name  =  \"Michelle\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.text",
      ")",
      "FROM",
      "USER",
      "AS",
      "t2",
      "JOIN",
      "review",
      "AS",
      "t1",
      "ON",
      "t2.user_id",
      "=",
      "t1.user_id",
      "WHERE",
      "t1.month",
      "=",
      "``",
      "March",
      "''",
      "AND",
      "t1.year",
      "=",
      "2014",
      "AND",
      "t2.name",
      "=",
      "``",
      "Michelle",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "text",
      ")",
      "from",
      "user",
      "as",
      "t2",
      "join",
      "review",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "user_id",
      "=",
      "t1",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "month",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many reviews has Michelle written in March 2014 ?",
    "question_toks":[
      "How",
      "many",
      "reviews",
      "has",
      "Michelle",
      "written",
      "in",
      "March",
      "2014",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              27,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ],
          "\"March\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Michelle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.join(review, USER(\"user_id\") === review(\"user_id\"), inner).filter(review(\"month\") === col(\"\"March\"\") && review(\"year\") === 2014 && USER(\"name\") === col(\"\"Michelle\"\")).agg(COUNT(review(\"text\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  \"Michelle\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "review",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t3",
      "ON",
      "t3.user_id",
      "=",
      "t2.user_id",
      "WHERE",
      "t2.year",
      "=",
      "2010",
      "AND",
      "t3.name",
      "=",
      "``",
      "Michelle",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "review",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "user_id",
      "=",
      "t2",
      ".",
      "user_id",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many businesses has Michelle reviewed in 2010 ?",
    "question_toks":[
      "How",
      "many",
      "businesses",
      "has",
      "Michelle",
      "reviewed",
      "in",
      "2010",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2010.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Michelle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"review.join(business, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(review(\"year\") === 2010 && USER(\"name\") === col(\"\"Michelle\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"San Diego\" AND t2.year  =  2010 AND t3.name  =  \"Christine\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "review",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t3",
      "ON",
      "t3.user_id",
      "=",
      "t2.user_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "San",
      "Diego",
      "''",
      "AND",
      "t2.year",
      "=",
      "2010",
      "AND",
      "t3.name",
      "=",
      "``",
      "Christine",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "review",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "user_id",
      "=",
      "t2",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many businesses in \" San Diego \" has Christine reviewed in 2010 ?",
    "question_toks":[
      "How",
      "many",
      "businesses",
      "in",
      "``",
      "San",
      "Diego",
      "``",
      "has",
      "Christine",
      "reviewed",
      "in",
      "2010",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"San Diego\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2010.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Christine\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"review.join(business, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(business(\"city\") === col(\"\"San Diego\"\") && review(\"year\") === 2010 && USER(\"name\") === col(\"\"Christine\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "business_id",
      ")",
      "FROM",
      "business",
      "WHERE",
      "city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "name",
      "=",
      "``",
      "Target",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "business_id",
      ")",
      "from",
      "business",
      "where",
      "city",
      "=",
      "value",
      "and",
      "name",
      "=",
      "value"
    ],
    "question":"How many Target are there in \" Los Angeles \" ?",
    "question_toks":[
      "How",
      "many",
      "Target",
      "are",
      "there",
      "in",
      "``",
      "Los",
      "Angeles",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                2,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Target\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"business.filter(col(\"city\") === col(\"\"Los Angeles\"\") && col(\"name\") === col(\"\"Target\"\")).agg(COUNT(\"business_id\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"Irish Pub\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t4",
      "ON",
      "t4.user_id",
      "=",
      "t3.user_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Dallas",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Irish",
      "Pub",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "user_id",
      "=",
      "t3",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"How many users have reviewed Irish Pub in Dallas ?",
    "question_toks":[
      "How",
      "many",
      "users",
      "have",
      "reviewed",
      "Irish",
      "Pub",
      "in",
      "Dallas",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                17,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Irish Pub\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(business(\"city\") === col(\"\"Dallas\"\") && category(\"category_name\") === col(\"\"Irish Pub\"\")).agg(COUNT(USER(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT AVG ( rating ) FROM review WHERE YEAR  =  2014;",
    "query_toks":[
      "SELECT",
      "AVG",
      "(",
      "rating",
      ")",
      "FROM",
      "review",
      "WHERE",
      "YEAR",
      "=",
      "2014",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "avg",
      "(",
      "rating",
      ")",
      "from",
      "review",
      "where",
      "year",
      "=",
      "value"
    ],
    "question":"What is the average rating of reviews written in year 2014 ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "average",
      "rating",
      "of",
      "reviews",
      "written",
      "in",
      "year",
      "2014",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"review.filter(col(\"YEAR\") === 2014).agg(AVG(\"rating\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Vintner Grill\" AND t2.category_name  =  \"category_category_name0\" AND t3.year  =  2010;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "USER",
      "AS",
      "t4",
      "ON",
      "t4.user_id",
      "=",
      "t3.user_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Vintner",
      "Grill",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "category_category_name0",
      "''",
      "AND",
      "t3.year",
      "=",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "user",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "user_id",
      "=",
      "t3",
      ".",
      "user_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"How many people reviewed restaurant \" Vintner Grill \" in 2010 ?",
    "question_toks":[
      "How",
      "many",
      "people",
      "reviewed",
      "restaurant",
      "``",
      "Vintner",
      "Grill",
      "``",
      "in",
      "2010",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                17,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Vintner Grill\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"category_category_name0\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).join(USER, USER(\"user_id\") === review(\"user_id\"), inner).filter(business(\"name\") === col(\"\"Vintner Grill\"\") && category(\"category_name\") === col(\"\"category_category_name0\"\") && review(\"year\") === 2010).agg(COUNT(USER(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id JOIN review AS t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  \"South Summerlin\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.text",
      ")",
      "FROM",
      "neighbourhood",
      "AS",
      "t1",
      "JOIN",
      "business",
      "AS",
      "t2",
      "ON",
      "t1.business_id",
      "=",
      "t2.business_id",
      "JOIN",
      "review",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t2.business_id",
      "WHERE",
      "t1.neighbourhood_name",
      "=",
      "``",
      "South",
      "Summerlin",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "text",
      ")",
      "from",
      "neighbourhood",
      "as",
      "t1",
      "join",
      "business",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "business_id",
      "=",
      "t2",
      ".",
      "business_id",
      "join",
      "review",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t2",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "neighbourhood_name",
      "=",
      "value"
    ],
    "question":"Find the number of reviews on businesses located in \" South Summerlin \" neighbourhood",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "reviews",
      "on",
      "businesses",
      "located",
      "in",
      "``",
      "South",
      "Summerlin",
      "``",
      "neighbourhood"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"South Summerlin\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"neighbourhood.join(business, neighbourhood(\"business_id\") === business(\"business_id\"), inner).join(review, review(\"business_id\") === business(\"business_id\"), inner).filter(neighbourhood(\"neighbourhood_name\") === col(\"\"South Summerlin\"\")).agg(COUNT(review(\"text\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT name ) FROM USER WHERE name  =  \"Michelle\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "name",
      ")",
      "FROM",
      "USER",
      "WHERE",
      "name",
      "=",
      "``",
      "Michelle",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "name",
      ")",
      "from",
      "user",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"Find the number of users called Michelle",
    "question_toks":[
      "Find",
      "the",
      "number",
      "of",
      "users",
      "called",
      "Michelle"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                17,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Michelle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.filter(col(\"name\") === col(\"\"Michelle\"\")).agg(COUNT(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Return me the number of businesses that are restaurant .",
    "question_toks":[
      "Return",
      "me",
      "the",
      "number",
      "of",
      "businesses",
      "that",
      "are",
      "restaurant",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(category(\"category_name\") === col(\"\"restaurant\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT city ) FROM business WHERE name  =  \"Panda Express\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "city",
      ")",
      "FROM",
      "business",
      "WHERE",
      "name",
      "=",
      "``",
      "Panda",
      "Express",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "city",
      ")",
      "from",
      "business",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"Return me the number of cities that has \" Panda Express \" .",
    "question_toks":[
      "Return",
      "me",
      "the",
      "number",
      "of",
      "cities",
      "that",
      "has",
      "``",
      "Panda",
      "Express",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                5,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Panda Express\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"business.filter(col(\"name\") === col(\"\"Panda Express\"\")).agg(COUNT(\"city\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.text",
      ")",
      "FROM",
      "USER",
      "AS",
      "t2",
      "JOIN",
      "tip",
      "AS",
      "t1",
      "ON",
      "t2.user_id",
      "=",
      "t1.user_id",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Michelle",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "text",
      ")",
      "from",
      "user",
      "as",
      "t2",
      "join",
      "tip",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "user_id",
      "=",
      "t1",
      ".",
      "user_id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Return me the number of tips that are written by Michelle .",
    "question_toks":[
      "Return",
      "me",
      "the",
      "number",
      "of",
      "tips",
      "that",
      "are",
      "written",
      "by",
      "Michelle",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              35,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Michelle\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"USER.join(tip, USER(\"user_id\") === tip(\"user_id\"), inner).filter(USER(\"name\") === col(\"\"Michelle\"\")).agg(COUNT(tip(\"text\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  \"Brighton Heights\";",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t3.count",
      ")",
      "FROM",
      "checkin",
      "AS",
      "t3",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "neighbourhood",
      "AS",
      "t2",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t2.neighbourhood_name",
      "=",
      "``",
      "Brighton",
      "Heights",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t3",
      ".",
      "count",
      ")",
      "from",
      "checkin",
      "as",
      "t3",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "neighbourhood",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t2",
      ".",
      "neighbourhood_name",
      "=",
      "value"
    ],
    "question":"Find the total checkins in \" Brighton Heights \" neighbourhood",
    "question_toks":[
      "Find",
      "the",
      "total",
      "checkins",
      "in",
      "``",
      "Brighton",
      "Heights",
      "``",
      "neighbourhood"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Brighton Heights\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"checkin.join(business, checkin(\"business_id\") === business(\"business_id\"), inner).join(neighbourhood, neighbourhood(\"business_id\") === business(\"business_id\"), inner).filter(neighbourhood(\"neighbourhood_name\") === col(\"\"Brighton Heights\"\")).agg(SUM(checkin(\"count\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH  =  \"March\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "text",
      ")",
      "FROM",
      "review",
      "WHERE",
      "MONTH",
      "=",
      "``",
      "March",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "text",
      ")",
      "from",
      "review",
      "where",
      "month",
      "=",
      "value"
    ],
    "question":"Find the total number of reviews written in March",
    "question_toks":[
      "Find",
      "the",
      "total",
      "number",
      "of",
      "reviews",
      "written",
      "in",
      "March"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ],
          "\"March\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"review.filter(col(\"MONTH\") === col(\"\"March\"\")).agg(COUNT(\"text\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  =  5;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.neighbourhood_name",
      ")",
      "FROM",
      "neighbourhood",
      "AS",
      "t1",
      "JOIN",
      "business",
      "AS",
      "t2",
      "ON",
      "t1.business_id",
      "=",
      "t2.business_id",
      "WHERE",
      "t2.city",
      "=",
      "``",
      "Madison",
      "''",
      "AND",
      "t2.rating",
      "=",
      "5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "neighbourhood_name",
      ")",
      "from",
      "neighbourhood",
      "as",
      "t1",
      "join",
      "business",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "business_id",
      "=",
      "t2",
      ".",
      "business_id",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "rating",
      "=",
      "value"
    ],
    "question":"How many neighbourhoods have a business with rating 5 in Madison ?",
    "question_toks":[
      "How",
      "many",
      "neighbourhoods",
      "have",
      "a",
      "business",
      "with",
      "rating",
      "5",
      "in",
      "Madison",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Madison\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"neighbourhood.join(business, neighbourhood(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Madison\"\") && business(\"rating\") === 5).agg(COUNT(neighbourhood(\"neighbourhood_name\")))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.state",
      "=",
      "``",
      "Texas",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Moroccan",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "state",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Give me all the Moroccan restaurant in Texas",
    "question_toks":[
      "Give",
      "me",
      "all",
      "the",
      "Moroccan",
      "restaurant",
      "in",
      "Texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Texas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Moroccan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"state\") === col(\"\"Texas\"\") && category(\"category_name\") === col(\"\"Moroccan\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Dallas",
      "''",
      "AND",
      "t1.rating",
      ">",
      "3.5",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Mexican",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all Mexican restaurant in Dallas with at least 3.5 stars",
    "question_toks":[
      "Find",
      "all",
      "Mexican",
      "restaurant",
      "in",
      "Dallas",
      "with",
      "at",
      "least",
      "3.5",
      "stars"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          3.5,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Mexican\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Dallas\"\") && business(\"rating\") > 3.5 && category(\"category_name\") === col(\"\"Mexican\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Dallas",
      "''",
      "AND",
      "t1.rating",
      ">",
      "3.5",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Mexican",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all Mexican restaurant in Dallas with a rating above 3.5",
    "question_toks":[
      "Find",
      "all",
      "Mexican",
      "restaurant",
      "in",
      "Dallas",
      "with",
      "a",
      "rating",
      "above",
      "3.5"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          3.5,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Mexican\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Dallas\"\") && business(\"rating\") > 3.5 && category(\"category_name\") === col(\"\"Mexican\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Dallas",
      "''",
      "AND",
      "t1.state",
      "=",
      "``",
      "Texas",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Valet",
      "Service",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "state",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all restaurant with Valet Service in Dallas Texas",
    "question_toks":[
      "Find",
      "all",
      "restaurant",
      "with",
      "Valet",
      "Service",
      "in",
      "Dallas",
      "Texas"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Dallas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Texas\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Valet Service\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Dallas\"\") && business(\"state\") === col(\"\"Texas\"\") && category(\"category_name\") === col(\"\"Valet Service\"\") && category(\"category_name\") === col(\"\"restaurant\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN category AS t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Meadowood\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t3",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t4",
      "ON",
      "t4.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "neighbourhood",
      "AS",
      "t2",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Madison",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "Italian",
      "''",
      "AND",
      "t4.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      "AND",
      "t2.neighbourhood_name",
      "=",
      "``",
      "Meadowood",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t3",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "neighbourhood",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "neighbourhood_name",
      "=",
      "value"
    ],
    "question":"Find all Italian restaurant in the Meadowood neighbourhood of Madison",
    "question_toks":[
      "Find",
      "all",
      "Italian",
      "restaurant",
      "in",
      "the",
      "Meadowood",
      "neighbourhood",
      "of",
      "Madison"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Madison\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Italian\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Meadowood\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).join(neighbourhood, neighbourhood(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Madison\"\") && category(\"category_name\") === col(\"\"Italian\"\") && category(\"category_name\") === col(\"\"restaurant\"\") && neighbourhood(\"neighbourhood_name\") === col(\"\"Meadowood\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  \"Bars\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "t1.rating",
      ">",
      "3",
      "AND",
      "t1.review_count",
      ">",
      "30",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "Bars",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value",
      "and",
      "t1",
      ".",
      "review_count",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"Find all Bars in \" Los Angeles \" with at least 30 reviews and average rating above 3 stars",
    "question_toks":[
      "Find",
      "all",
      "Bars",
      "in",
      "``",
      "Los",
      "Angeles",
      "``",
      "with",
      "at",
      "least",
      "30",
      "reviews",
      "and",
      "average",
      "rating",
      "above",
      "3",
      "stars"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          3.0,
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          30.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Bars\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Los Angeles\"\") && business(\"rating\") > 3 && business(\"review_count\") > 30 && category(\"category_name\") === col(\"\"Bars\"\")).select(business(\"name\"))"
  },
  {
    "db_id":"yelp",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Edinburgh\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Egyptian\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "category",
      "AS",
      "t2",
      "JOIN",
      "business",
      "AS",
      "t1",
      "ON",
      "t2.business_id",
      "=",
      "t1.business_id",
      "JOIN",
      "category",
      "AS",
      "t3",
      "ON",
      "t3.business_id",
      "=",
      "t1.business_id",
      "WHERE",
      "t1.city",
      "=",
      "``",
      "Edinburgh",
      "''",
      "AND",
      "t2.category_name",
      "=",
      "``",
      "restaurant",
      "''",
      "AND",
      "t3.category_name",
      "=",
      "``",
      "Egyptian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "category",
      "as",
      "t2",
      "join",
      "business",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "join",
      "category",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "business_id",
      "=",
      "t1",
      ".",
      "business_id",
      "where",
      "t1",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "category_name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "category_name",
      "=",
      "value"
    ],
    "question":"How many Egyptian restaurant are there in Edinburgh ?",
    "question_toks":[
      "How",
      "many",
      "Egyptian",
      "restaurant",
      "are",
      "there",
      "in",
      "Edinburgh",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Edinburgh\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"restaurant\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Egyptian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"category.join(business, category(\"business_id\") === business(\"business_id\"), inner).join(category, category(\"business_id\") === business(\"business_id\"), inner).filter(business(\"city\") === col(\"\"Edinburgh\"\") && category(\"category_name\") === col(\"\"restaurant\"\") && category(\"category_name\") === col(\"\"Egyptian\"\")).agg(COUNT(business(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT homepage FROM journal WHERE name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "homepage",
      "FROM",
      "journal",
      "WHERE",
      "name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "homepage",
      "from",
      "journal",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"return me the homepage of PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "homepage",
      "of",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"journal.filter(col(\"name\") === col(\"\"PVLDB\"\")).select(col(\"homepage\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT homepage FROM author WHERE name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "homepage",
      "FROM",
      "author",
      "WHERE",
      "name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "homepage",
      "from",
      "author",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"return me the homepage of \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "homepage",
      "of",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"author.filter(col(\"name\") === col(\"\"H. V. Jagadish\"\")).select(col(\"homepage\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT abstract FROM publication WHERE title  =  \"Making database systems usable\";",
    "query_toks":[
      "SELECT",
      "abstract",
      "FROM",
      "publication",
      "WHERE",
      "title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "abstract",
      "from",
      "publication",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"return me the abstract of \" Making database systems usable \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "abstract",
      "of",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.filter(col(\"title\") === col(\"\"Making database systems usable\"\")).select(col(\"abstract\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";",
    "query_toks":[
      "SELECT",
      "YEAR",
      "FROM",
      "publication",
      "WHERE",
      "title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "year",
      "from",
      "publication",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"return me the year of \" Making database systems usable \"",
    "question_toks":[
      "return",
      "me",
      "the",
      "year",
      "of",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.filter(col(\"title\") === col(\"\"Making database systems usable\"\")).select(col(\"YEAR\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";",
    "query_toks":[
      "SELECT",
      "YEAR",
      "FROM",
      "publication",
      "WHERE",
      "title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "year",
      "from",
      "publication",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"return me the year of \" Making database systems usable \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "year",
      "of",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.filter(col(\"title\") === col(\"\"Making database systems usable\"\")).select(col(\"YEAR\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT title FROM publication WHERE YEAR  >  2000;",
    "query_toks":[
      "SELECT",
      "title",
      "FROM",
      "publication",
      "WHERE",
      "YEAR",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "publication",
      "where",
      "year",
      ">",
      "value"
    ],
    "question":"return me the papers after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.filter(col(\"YEAR\") > 2000).select(col(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT homepage FROM conference WHERE name  =  \"VLDB\";",
    "query_toks":[
      "SELECT",
      "homepage",
      "FROM",
      "conference",
      "WHERE",
      "name",
      "=",
      "``",
      "VLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "homepage",
      "from",
      "conference",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"return me the homepage of the VLDB conference .",
    "question_toks":[
      "return",
      "me",
      "the",
      "homepage",
      "of",
      "the",
      "VLDB",
      "conference",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"conference.filter(col(\"name\") === col(\"\"VLDB\"\")).select(col(\"homepage\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT keyword FROM keyword;",
    "query_toks":[
      "SELECT",
      "keyword",
      "FROM",
      "keyword",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "keyword",
      "from",
      "keyword"
    ],
    "question":"return me all the keywords .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "keywords",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"keyword.select(col(\"keyword\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT name FROM organization;",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "organization",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "organization"
    ],
    "question":"return me all the organizations .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "organizations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"organization.select(col(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT name FROM organization WHERE continent  =  \"North America\";",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "organization",
      "WHERE",
      "continent",
      "=",
      "``",
      "North",
      "America",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "organization",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question":"return me all the organizations in \" North America \" .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "organizations",
      "in",
      "``",
      "North",
      "America",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          "\"North America\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.filter(col(\"continent\") === col(\"\"North America\"\")).select(col(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT homepage FROM organization WHERE name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "homepage",
      "FROM",
      "organization",
      "WHERE",
      "name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "homepage",
      "from",
      "organization",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"return me the homepage of \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "homepage",
      "of",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.filter(col(\"name\") === col(\"\"University of Michigan\"\")).select(col(\"homepage\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";",
    "query_toks":[
      "SELECT",
      "reference_num",
      "FROM",
      "publication",
      "WHERE",
      "title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "reference_num",
      "from",
      "publication",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"return me the number of references of \" Making database systems usable \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "references",
      "of",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.filter(col(\"title\") === col(\"\"Making database systems usable\"\")).select(col(\"reference_num\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";",
    "query_toks":[
      "SELECT",
      "reference_num",
      "FROM",
      "publication",
      "WHERE",
      "title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "reference_num",
      "from",
      "publication",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"return me the references of \" Making database systems usable \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "references",
      "of",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.filter(col(\"title\") === col(\"\"Making database systems usable\"\")).select(col(\"reference_num\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";",
    "query_toks":[
      "SELECT",
      "citation_num",
      "FROM",
      "publication",
      "WHERE",
      "title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "citation_num",
      "from",
      "publication",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"return me the number of citations of \" Making database systems usable \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "citations",
      "of",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.filter(col(\"title\") === col(\"\"Making database systems usable\"\")).select(col(\"citation_num\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";",
    "query_toks":[
      "SELECT",
      "citation_num",
      "FROM",
      "publication",
      "WHERE",
      "title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "citation_num",
      "from",
      "publication",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"return me the citations of \" Making database systems usable \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "citations",
      "of",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.filter(col(\"title\") === col(\"\"Making database systems usable\"\")).select(col(\"citation_num\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT title FROM publication WHERE citation_num  >  200;",
    "query_toks":[
      "SELECT",
      "title",
      "FROM",
      "publication",
      "WHERE",
      "citation_num",
      ">",
      "200",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "publication",
      "where",
      "citation_num",
      ">",
      "value"
    ],
    "question":"return me the paper with more than 200 citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "with",
      "more",
      "than",
      "200",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.filter(col(\"citation_num\") > 200).select(col(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  =  2010;",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t4.jid",
      "=",
      "t2.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t4.year",
      "=",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t2",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"return me the authors who have papers in PVLDB 2010 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "who",
      "have",
      "papers",
      "in",
      "PVLDB",
      "2010",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"year\") === 2010).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  >  2010;",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t4.jid",
      "=",
      "t2.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t4.year",
      ">",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t2",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the authors who have papers in PVLDB after 2010 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "who",
      "have",
      "papers",
      "in",
      "PVLDB",
      "after",
      "2010",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"year\") > 2010).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  =  2002;",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t4.year",
      "=",
      "2002",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"return me the authors who have papers in VLDB conference in 2002 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "who",
      "have",
      "papers",
      "in",
      "VLDB",
      "conference",
      "in",
      "2002",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2002.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && publication(\"year\") === 2002).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002;",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t4.year",
      "<",
      "2002",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"return me the authors who have papers in VLDB conference before 2002 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "who",
      "have",
      "papers",
      "in",
      "VLDB",
      "conference",
      "before",
      "2002",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2002.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && publication(\"year\") < 2002).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002 AND t4.year  >  1995;",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t4.year",
      "<",
      "2002",
      "AND",
      "t4.year",
      ">",
      "1995",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      "<",
      "value",
      "and",
      "t4",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the authors who have papers in VLDB conference before 2002 after 1995 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "who",
      "have",
      "papers",
      "in",
      "VLDB",
      "conference",
      "before",
      "2002",
      "after",
      "1995",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2002.0,
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          1995.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && publication(\"year\") < 2002 && publication(\"year\") > 1995).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did  =  t1.did JOIN journal AS t2 ON t2.jid  =  t1.jid WHERE t2.name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "t3.name",
      "FROM",
      "DOMAIN",
      "AS",
      "t3",
      "JOIN",
      "domain_journal",
      "AS",
      "t1",
      "ON",
      "t3.did",
      "=",
      "t1.did",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      "from",
      "domain",
      "as",
      "t3",
      "join",
      "domain_journal",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the area of PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "area",
      "of",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              17,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"DOMAIN.join(domain_journal, DOMAIN(\"did\") === domain_journal(\"did\"), inner).join(journal, journal(\"jid\") === domain_journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\")).select(DOMAIN(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t4.jid",
      "=",
      "t2.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t2",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the authors who have papers in PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "who",
      "have",
      "papers",
      "in",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\")).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t1.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "organization",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "organization",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the organization \" H. V. Jagadish \" is in .",
    "question_toks":[
      "return",
      "me",
      "the",
      "organization",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "is",
      "in",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).select(organization(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the conferences, which have papers by \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "conferences",
      ",",
      "which",
      "have",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).select(conference(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t4.jid",
      "=",
      "t2.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t2",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the journals, which have papers by \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "journals",
      ",",
      "which",
      "have",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).select(journal(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.name FROM domain_author AS t3 JOIN author AS t1 ON t3.aid  =  t1.aid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "domain_author",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "DOMAIN",
      "AS",
      "t2",
      "ON",
      "t2.did",
      "=",
      "t3.did",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "domain_author",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "domain",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t3",
      ".",
      "did",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the domain where \" H. V. Jagadish \" is focused .",
    "question_toks":[
      "return",
      "me",
      "the",
      "domain",
      "where",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "is",
      "focused",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"domain_author.join(author, domain_author(\"aid\") === author(\"aid\"), inner).join(DOMAIN, DOMAIN(\"did\") === domain_author(\"did\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).select(DOMAIN(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t2.pid",
      "=",
      "t3.pid",
      "WHERE",
      "t3.title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"return me the authors of \" Making database systems usable \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "of",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(publication(\"title\") === col(\"\"Making database systems usable\"\")).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t2.title  =  \"Making database systems usable\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t2.title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t2",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"return me the conference, which published \" Making database systems usable \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "conference",
      ",",
      "which",
      "published",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(publication(\"title\") === col(\"\"Making database systems usable\"\")).select(conference(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t2.pid",
      "=",
      "t3.pid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the papers by \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the papers on VLDB conference .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "on",
      "VLDB",
      "conference",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the papers on PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "on",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t2.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the papers on PVLDB after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "on",
      "PVLDB",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"year\") > 2000).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t2.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the papers on VLDB conference after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "on",
      "VLDB",
      "conference",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && publication(\"year\") > 2000).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t4.jid",
      "=",
      "t2.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t2",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the papers by \" H. V. Jagadish \" on PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "on",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && journal(\"name\") === col(\"\"PVLDB\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the papers by \" H. V. Jagadish \" on VLDB conference .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "on",
      "VLDB",
      "conference",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && conference(\"name\") === col(\"\"VLDB\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t2.pid",
      "=",
      "t3.pid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t3.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the papers by \" H. V. Jagadish \" after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && publication(\"year\") > 2000).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t4.jid",
      "=",
      "t2.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t4.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t2",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the papers by \" H. V. Jagadish \" on PVLDB after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "on",
      "PVLDB",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"year\") > 2000).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t4.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the papers by \" H. V. Jagadish \" on VLDB conference after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "on",
      "VLDB",
      "conference",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && conference(\"name\") === col(\"\"VLDB\"\") && publication(\"year\") > 2000).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid  =  t1.cid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"VLDB\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "domain_conference",
      "AS",
      "t3",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t3.cid",
      "=",
      "t1.cid",
      "JOIN",
      "DOMAIN",
      "AS",
      "t2",
      "ON",
      "t2.did",
      "=",
      "t3.did",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "domain_conference",
      "as",
      "t3",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "join",
      "domain",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t3",
      ".",
      "did",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the area of the VLDB conference .",
    "question_toks":[
      "return",
      "me",
      "the",
      "area",
      "of",
      "the",
      "VLDB",
      "conference",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"domain_conference.join(conference, domain_conference(\"cid\") === conference(\"cid\"), inner).join(DOMAIN, DOMAIN(\"did\") === domain_conference(\"did\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\")).select(DOMAIN(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the authors who have papers in the VLDB conference .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "who",
      "have",
      "papers",
      "in",
      "the",
      "VLDB",
      "conference",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\")).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";",
    "query_toks":[
      "SELECT",
      "t1.keyword",
      "FROM",
      "DOMAIN",
      "AS",
      "t3",
      "JOIN",
      "domain_keyword",
      "AS",
      "t2",
      "ON",
      "t3.did",
      "=",
      "t2.did",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t1.kid",
      "=",
      "t2.kid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "Databases",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "keyword",
      "from",
      "domain",
      "as",
      "t3",
      "join",
      "domain_keyword",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "kid",
      "=",
      "t2",
      ".",
      "kid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me all the keywords in Databases area .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "keywords",
      "in",
      "Databases",
      "area",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"DOMAIN.join(domain_keyword, DOMAIN(\"did\") === domain_keyword(\"did\"), inner).join(keyword, keyword(\"kid\") === domain_keyword(\"kid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\")).select(keyword(\"keyword\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "publication_keyword",
      "AS",
      "t2",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t2.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t2.pid",
      "WHERE",
      "t1.keyword",
      "=",
      "``",
      "Natural",
      "Language",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "publication_keyword",
      "as",
      "t2",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t2",
      ".",
      "pid",
      "where",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"return me all the papers, which contain the keyword \" Natural Language \" .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "papers",
      ",",
      "which",
      "contain",
      "the",
      "keyword",
      "``",
      "Natural",
      "Language",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Natural Language\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).filter(keyword(\"keyword\") === col(\"\"Natural Language\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";",
    "query_toks":[
      "SELECT",
      "t1.keyword",
      "FROM",
      "publication_keyword",
      "AS",
      "t3",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t3.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t2",
      "ON",
      "t2.pid",
      "=",
      "t3.pid",
      "WHERE",
      "t2.title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "keyword",
      "from",
      "publication_keyword",
      "as",
      "t3",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "where",
      "t2",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"return me the keywords of \" Making database systems usable \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "keywords",
      "of",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).filter(publication(\"title\") === col(\"\"Making database systems usable\"\")).select(keyword(\"keyword\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "t1.keyword",
      "FROM",
      "publication_keyword",
      "AS",
      "t5",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t5.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t3.pid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t4.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "keyword",
      "from",
      "publication_keyword",
      "as",
      "t5",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the keywords related to \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "keywords",
      "related",
      "to",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).select(keyword(\"keyword\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";",
    "query_toks":[
      "SELECT",
      "t1.keyword",
      "FROM",
      "publication_keyword",
      "AS",
      "t4",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t4.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t3.cid",
      "=",
      "t2.cid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "keyword",
      "from",
      "publication_keyword",
      "as",
      "t4",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the keywords in VLDB conference .",
    "question_toks":[
      "return",
      "me",
      "the",
      "keywords",
      "in",
      "VLDB",
      "conference",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\")).select(keyword(\"keyword\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "t1.keyword",
      "FROM",
      "publication_keyword",
      "AS",
      "t4",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t4.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t2",
      "ON",
      "t2.pid",
      "=",
      "t4.pid",
      "JOIN",
      "journal",
      "AS",
      "t3",
      "ON",
      "t2.jid",
      "=",
      "t3.jid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "keyword",
      "from",
      "publication_keyword",
      "as",
      "t4",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "journal",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t3",
      ".",
      "jid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the keywords in PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "keywords",
      "in",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\")).select(keyword(\"keyword\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "t1.keyword",
      "FROM",
      "organization",
      "AS",
      "t6",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t6.oid",
      "=",
      "t2.oid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "publication_keyword",
      "AS",
      "t3",
      "ON",
      "t5.pid",
      "=",
      "t3.pid",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t3.kid",
      "=",
      "t1.kid",
      "WHERE",
      "t6.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "keyword",
      "from",
      "organization",
      "as",
      "t6",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t6",
      ".",
      "oid",
      "=",
      "t2",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "publication_keyword",
      "as",
      "t3",
      "on",
      "t5",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "where",
      "t6",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the keywords in the papers of \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "keywords",
      "in",
      "the",
      "papers",
      "of",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(publication_keyword, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).filter(organization(\"name\") === col(\"\"University of Michigan\"\")).select(keyword(\"keyword\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";",
    "query_toks":[
      "SELECT",
      "t5.title",
      "FROM",
      "publication_keyword",
      "AS",
      "t3",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t3.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t5.pid",
      "=",
      "t3.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t4.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t1.keyword",
      "=",
      "``",
      "User",
      "Study",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t5",
      ".",
      "title",
      "from",
      "publication_keyword",
      "as",
      "t3",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"return me the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "of",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "containing",
      "keyword",
      "``",
      "User",
      "Study",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"User Study\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && keyword(\"keyword\") === col(\"\"User Study\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "publication_keyword",
      "AS",
      "t2",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t2.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t2.pid",
      "JOIN",
      "journal",
      "AS",
      "t3",
      "ON",
      "t4.jid",
      "=",
      "t3.jid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t1.keyword",
      "=",
      "``",
      "Keyword",
      "search",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "publication_keyword",
      "as",
      "t2",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t2",
      ".",
      "pid",
      "join",
      "journal",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t3",
      ".",
      "jid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"return me the papers in PVLDB containing keyword \" Keyword search \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "in",
      "PVLDB",
      "containing",
      "keyword",
      "``",
      "Keyword",
      "search",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Keyword search\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && keyword(\"keyword\") === col(\"\"Keyword search\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t4.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "publication_keyword",
      "AS",
      "t3",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t3.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t3.pid",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t1.keyword",
      "=",
      "``",
      "Information",
      "Retrieval",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "publication_keyword",
      "as",
      "t3",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"return me the papers in VLDB conference containing keyword \" Information Retrieval \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "in",
      "VLDB",
      "conference",
      "containing",
      "keyword",
      "``",
      "Information",
      "Retrieval",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Information Retrieval\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && keyword(\"keyword\") === col(\"\"Information Retrieval\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "publication_keyword",
      "AS",
      "t5",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t5.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t3.pid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t4.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t1.keyword",
      "=",
      "``",
      "Relational",
      "Database",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "publication_keyword",
      "as",
      "t5",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"return me the authors who have papers containing keyword \" Relational Database \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "who",
      "have",
      "papers",
      "containing",
      "keyword",
      "``",
      "Relational",
      "Database",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Relational Database\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(keyword(\"keyword\") === col(\"\"Relational Database\"\")).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "domain_author",
      "AS",
      "t4",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "DOMAIN",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t4.did",
      "JOIN",
      "organization",
      "AS",
      "t2",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "Databases",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "domain_author",
      "as",
      "t4",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "domain",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t4",
      ".",
      "did",
      "join",
      "organization",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me all the organizations in Databases area .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "organizations",
      "in",
      "Databases",
      "area",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"domain_author.join(author, domain_author(\"aid\") === author(\"aid\"), inner).join(DOMAIN, DOMAIN(\"did\") === domain_author(\"did\"), inner).join(organization, organization(\"oid\") === author(\"oid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\")).select(organization(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "domain_author",
      "AS",
      "t4",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "DOMAIN",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t4.did",
      "JOIN",
      "organization",
      "AS",
      "t2",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "Databases",
      "''",
      "AND",
      "t2.continent",
      "=",
      "``",
      "North",
      "America",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "domain_author",
      "as",
      "t4",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "domain",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t4",
      ".",
      "did",
      "join",
      "organization",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "continent",
      "=",
      "value"
    ],
    "question":"return me all the organizations in Databases area located in \" North America \" .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "organizations",
      "in",
      "Databases",
      "area",
      "located",
      "in",
      "``",
      "North",
      "America",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          "\"North America\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"domain_author.join(author, domain_author(\"aid\") === author(\"aid\"), inner).join(DOMAIN, DOMAIN(\"did\") === domain_author(\"did\"), inner).join(organization, organization(\"oid\") === author(\"oid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\") && organization(\"continent\") === col(\"\"North America\"\")).select(organization(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "organization",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "organization",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me all the researchers in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "researchers",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).filter(organization(\"name\") === col(\"\"University of Michigan\"\")).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "domain_author",
      "AS",
      "t4",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "DOMAIN",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t4.did",
      "JOIN",
      "organization",
      "AS",
      "t2",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "Databases",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "domain_author",
      "as",
      "t4",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "domain",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t4",
      ".",
      "did",
      "join",
      "organization",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me all the researchers in Databases area in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "researchers",
      "in",
      "Databases",
      "area",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"domain_author.join(author, domain_author(\"aid\") === author(\"aid\"), inner).join(DOMAIN, DOMAIN(\"did\") === domain_author(\"did\"), inner).join(organization, organization(\"oid\") === author(\"oid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\") && organization(\"name\") === col(\"\"University of Michigan\"\")).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "organization",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t4",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "organization",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me all the papers in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "papers",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(organization(\"name\") === col(\"\"University of Michigan\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "organization",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t4",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      "AND",
      "t4.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "organization",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me all the papers after 2000 in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "papers",
      "after",
      "2000",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(organization(\"name\") === col(\"\"University of Michigan\"\") && publication(\"year\") > 2000).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "t5.title",
      "FROM",
      "organization",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.oid",
      "=",
      "t1.oid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t5.cid",
      "=",
      "t2.cid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t3.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t5",
      ".",
      "title",
      "from",
      "organization",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t5",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me all the papers in VLDB conference in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "papers",
      "in",
      "VLDB",
      "conference",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && organization(\"name\") === col(\"\"University of Michigan\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "t5.title",
      "FROM",
      "organization",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "journal",
      "AS",
      "t3",
      "ON",
      "t5.jid",
      "=",
      "t3.jid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t5",
      ".",
      "title",
      "from",
      "organization",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "journal",
      "as",
      "t3",
      "on",
      "t5",
      ".",
      "jid",
      "=",
      "t3",
      ".",
      "jid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me all the papers in PVLDB in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "papers",
      "in",
      "PVLDB",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && organization(\"name\") === col(\"\"University of Michigan\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;",
    "query_toks":[
      "SELECT",
      "t5.title",
      "FROM",
      "organization",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "journal",
      "AS",
      "t3",
      "ON",
      "t5.jid",
      "=",
      "t3.jid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      "AND",
      "t5.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t5",
      ".",
      "title",
      "from",
      "organization",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "journal",
      "as",
      "t3",
      "on",
      "t5",
      ".",
      "jid",
      "=",
      "t3",
      ".",
      "jid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me all the papers in PVLDB after 2000 in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "all",
      "the",
      "papers",
      "in",
      "PVLDB",
      "after",
      "2000",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && organization(\"name\") === col(\"\"University of Michigan\"\") && publication(\"year\") > 2000).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200;",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "DOMAIN",
      "AS",
      "t2",
      "JOIN",
      "domain_publication",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t1.pid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Databases",
      "''",
      "AND",
      "t3.citation_num",
      ">",
      "200",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "domain",
      "as",
      "t2",
      "join",
      "domain_publication",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t1",
      ".",
      "pid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "citation_num",
      ">",
      "value"
    ],
    "question":"return me the paper in Databases area with more than 200 citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "in",
      "Databases",
      "area",
      "with",
      "more",
      "than",
      "200",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              31,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            10
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"DOMAIN.join(domain_publication, DOMAIN(\"did\") === domain_publication(\"did\"), inner).join(publication, publication(\"pid\") === domain_publication(\"pid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\") && publication(\"citation_num\") > 200).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200;",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t2.citation_num",
      ">",
      "200",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "citation_num",
      ">",
      "value"
    ],
    "question":"return me the paper in PVLDB with more than 200 citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "in",
      "PVLDB",
      "with",
      "more",
      "than",
      "200",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"citation_num\") > 200).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200;",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t2.citation_num",
      ">",
      "200",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "citation_num",
      ">",
      "value"
    ],
    "question":"return me the paper in VLDB conference with more than 200 citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "in",
      "VLDB",
      "conference",
      "with",
      "more",
      "than",
      "200",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && publication(\"citation_num\") > 200).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.citation_num  >  200;",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t2.pid",
      "=",
      "t3.pid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t3.citation_num",
      ">",
      "200",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "citation_num",
      ">",
      "value"
    ],
    "question":"return me the paper by \" H. V. Jagadish \" with more than 200 citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "with",
      "more",
      "than",
      "200",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && publication(\"citation_num\") > 200).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.citation_num  >  200;",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t4.jid",
      "=",
      "t2.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t4.citation_num",
      ">",
      "200",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t2",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "citation_num",
      ">",
      "value"
    ],
    "question":"return me the papers by \" H. V. Jagadish \" on PVLDB with more than 200 citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "on",
      "PVLDB",
      "with",
      "more",
      "than",
      "200",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"citation_num\") > 200).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.citation_num  >  200;",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t4.citation_num",
      ">",
      "200",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "citation_num",
      ">",
      "value"
    ],
    "question":"return me the papers by \" H. V. Jagadish \" on VLDB conference with more than 200 citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "on",
      "VLDB",
      "conference",
      "with",
      "more",
      "than",
      "200",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && conference(\"name\") === col(\"\"VLDB\"\") && publication(\"citation_num\") > 200).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT title FROM publication WHERE citation_num  >  200 AND YEAR  >  2000;",
    "query_toks":[
      "SELECT",
      "title",
      "FROM",
      "publication",
      "WHERE",
      "citation_num",
      ">",
      "200",
      "AND",
      "YEAR",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "publication",
      "where",
      "citation_num",
      ">",
      "value",
      "and",
      "year",
      ">",
      "value"
    ],
    "question":"return me the paper after 2000 with more than 200 citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "after",
      "2000",
      "with",
      "more",
      "than",
      "200",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          200.0,
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.filter(col(\"citation_num\") > 200 && col(\"YEAR\") > 2000).select(col(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200 AND t3.year  >  2000;",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "DOMAIN",
      "AS",
      "t2",
      "JOIN",
      "domain_publication",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t1.pid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Databases",
      "''",
      "AND",
      "t3.citation_num",
      ">",
      "200",
      "AND",
      "t3.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "domain",
      "as",
      "t2",
      "join",
      "domain_publication",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t1",
      ".",
      "pid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "citation_num",
      ">",
      "value",
      "and",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the paper after 2000 in Databases area with more than 200 citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "after",
      "2000",
      "in",
      "Databases",
      "area",
      "with",
      "more",
      "than",
      "200",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              31,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            10
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          200.0,
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"DOMAIN.join(domain_publication, DOMAIN(\"did\") === domain_publication(\"did\"), inner).join(publication, publication(\"pid\") === domain_publication(\"pid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\") && publication(\"citation_num\") > 200 && publication(\"year\") > 2000).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t2.citation_num",
      ">",
      "200",
      "AND",
      "t2.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "citation_num",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the paper after 2000 in PVLDB with more than 200 citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "after",
      "2000",
      "in",
      "PVLDB",
      "with",
      "more",
      "than",
      "200",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          200.0,
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"citation_num\") > 200 && publication(\"year\") > 2000).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t2.citation_num",
      ">",
      "200",
      "AND",
      "t2.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "citation_num",
      ">",
      "value",
      "and",
      "t2",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the paper after 2000 in VLDB conference with more than 200 citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "after",
      "2000",
      "in",
      "VLDB",
      "conference",
      "with",
      "more",
      "than",
      "200",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          200.0,
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && publication(\"citation_num\") > 200 && publication(\"year\") > 2000).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.name",
      ")",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "name",
      ")",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of conferences which have papers by \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "conferences",
      "which",
      "have",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).agg(COUNT(conference(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.name",
      ")",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t4.jid",
      "=",
      "t2.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "name",
      ")",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t2",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of journals which have papers by \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "journals",
      "which",
      "have",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                16,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).agg(COUNT(journal(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t2.pid",
      "=",
      "t3.pid",
      "WHERE",
      "t3.title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"return me the number of authors of \" Making database systems usable \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "authors",
      "of",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(publication(\"title\") === col(\"\"Making database systems usable\"\")).agg(COUNT(author(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid  =  t1.cited JOIN publication AS t2 ON t2.pid  =  t1.citing WHERE t3.title  =  \"Making database systems usable\" AND t2.year  <  2010;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "publication",
      "AS",
      "t3",
      "JOIN",
      "cite",
      "AS",
      "t1",
      "ON",
      "t3.pid",
      "=",
      "t1.cited",
      "JOIN",
      "publication",
      "AS",
      "t2",
      "ON",
      "t2.pid",
      "=",
      "t1.citing",
      "WHERE",
      "t3.title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      "AND",
      "t2.year",
      "<",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "publication",
      "as",
      "t3",
      "join",
      "cite",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t1",
      ".",
      "cited",
      "join",
      "publication",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t1",
      ".",
      "citing",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"return me the number of citations of \" Making database systems usable \" before 2010 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "citations",
      "of",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``",
      "before",
      "2010",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            14
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(cite, publication(\"pid\") === cite(\"cited\"), inner).join(publication, publication(\"pid\") === cite(\"citing\"), inner).filter(publication(\"title\") === col(\"\"Making database systems usable\"\") && publication(\"year\") < 2010).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.title",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t2.pid",
      "=",
      "t3.pid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "title",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of papers by \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of papers on VLDB conference .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "on",
      "VLDB",
      "conference",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of papers on PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "on",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT title ) FROM publication WHERE YEAR  >  2000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "title",
      ")",
      "FROM",
      "publication",
      "WHERE",
      "YEAR",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "title",
      ")",
      "from",
      "publication",
      "where",
      "year",
      ">",
      "value"
    ],
    "question":"return me the number of papers after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.filter(col(\"YEAR\") > 2000).agg(COUNT(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t2.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the number of papers on PVLDB after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "on",
      "PVLDB",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"year\") > 2000).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t2.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the number of papers on VLDB conference after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "on",
      "VLDB",
      "conference",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && publication(\"year\") > 2000).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.title",
      ")",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t4.jid",
      "=",
      "t2.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "title",
      ")",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t2",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of papers by \" H. V. Jagadish \" on PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "on",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && journal(\"name\") === col(\"\"PVLDB\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.title",
      ")",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "title",
      ")",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of papers by \" H. V. Jagadish \" on VLDB conference .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "on",
      "VLDB",
      "conference",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && conference(\"name\") === col(\"\"VLDB\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.title",
      ")",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t2.pid",
      "=",
      "t3.pid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t3.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "title",
      ")",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the number of papers by \" H. V. Jagadish \" after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && publication(\"year\") > 2000).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.title",
      ")",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t4.jid",
      "=",
      "t2.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t4.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "title",
      ")",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t2",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the number of papers by \" H. V. Jagadish \" on PVLDB after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "on",
      "PVLDB",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"year\") > 2000).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.title",
      ")",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t4.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "title",
      ")",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the number of papers by \" H. V. Jagadish \" on VLDB conference after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "on",
      "VLDB",
      "conference",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && conference(\"name\") === col(\"\"VLDB\"\") && publication(\"year\") > 2000).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "keyword",
      ")",
      "FROM",
      "keyword",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "keyword",
      ")",
      "from",
      "keyword"
    ],
    "question":"return me the number of keywords .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "keywords",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"keyword.agg(COUNT(\"keyword\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.keyword",
      ")",
      "FROM",
      "DOMAIN",
      "AS",
      "t3",
      "JOIN",
      "domain_keyword",
      "AS",
      "t2",
      "ON",
      "t3.did",
      "=",
      "t2.did",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t1.kid",
      "=",
      "t2.kid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "Databases",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "keyword",
      ")",
      "from",
      "domain",
      "as",
      "t3",
      "join",
      "domain_keyword",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "kid",
      "=",
      "t2",
      ".",
      "kid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of keywords in Databases area .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "keywords",
      "in",
      "Databases",
      "area",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"DOMAIN.join(domain_keyword, DOMAIN(\"did\") === domain_keyword(\"did\"), inner).join(keyword, keyword(\"kid\") === domain_keyword(\"kid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\")).agg(COUNT(keyword(\"keyword\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.title",
      ")",
      "FROM",
      "publication_keyword",
      "AS",
      "t2",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t2.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t2.pid",
      "WHERE",
      "t1.keyword",
      "=",
      "``",
      "Natural",
      "Language",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "title",
      ")",
      "from",
      "publication_keyword",
      "as",
      "t2",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t2",
      ".",
      "pid",
      "where",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"return me the number of papers which contain the keyword \" Natural Language \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "which",
      "contain",
      "the",
      "keyword",
      "``",
      "Natural",
      "Language",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Natural Language\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).filter(keyword(\"keyword\") === col(\"\"Natural Language\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.keyword",
      ")",
      "FROM",
      "publication_keyword",
      "AS",
      "t3",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t3.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t2",
      "ON",
      "t2.pid",
      "=",
      "t3.pid",
      "WHERE",
      "t2.title",
      "=",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "keyword",
      ")",
      "from",
      "publication_keyword",
      "as",
      "t3",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "where",
      "t2",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"return me the number of the keywords of \" Making database systems usable \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "the",
      "keywords",
      "of",
      "``",
      "Making",
      "database",
      "systems",
      "usable",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ],
          "\"Making database systems usable\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).filter(publication(\"title\") === col(\"\"Making database systems usable\"\")).agg(COUNT(keyword(\"keyword\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.keyword",
      ")",
      "FROM",
      "publication_keyword",
      "AS",
      "t5",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t5.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t3.pid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t4.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "keyword",
      ")",
      "from",
      "publication_keyword",
      "as",
      "t5",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of the keywords related to \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "the",
      "keywords",
      "related",
      "to",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).agg(COUNT(keyword(\"keyword\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.keyword",
      ")",
      "FROM",
      "publication_keyword",
      "AS",
      "t4",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t4.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t3.cid",
      "=",
      "t2.cid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "keyword",
      ")",
      "from",
      "publication_keyword",
      "as",
      "t4",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of keywords in VLDB conference .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "keywords",
      "in",
      "VLDB",
      "conference",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\")).agg(COUNT(keyword(\"keyword\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.keyword",
      ")",
      "FROM",
      "publication_keyword",
      "AS",
      "t4",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t4.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t2",
      "ON",
      "t2.pid",
      "=",
      "t4.pid",
      "JOIN",
      "journal",
      "AS",
      "t3",
      "ON",
      "t2.jid",
      "=",
      "t3.jid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "keyword",
      ")",
      "from",
      "publication_keyword",
      "as",
      "t4",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "journal",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t3",
      ".",
      "jid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of keywords in PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "keywords",
      "in",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\")).agg(COUNT(keyword(\"keyword\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.keyword",
      ")",
      "FROM",
      "organization",
      "AS",
      "t6",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t6.oid",
      "=",
      "t2.oid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "publication_keyword",
      "AS",
      "t3",
      "ON",
      "t5.pid",
      "=",
      "t3.pid",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t3.kid",
      "=",
      "t1.kid",
      "WHERE",
      "t6.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "keyword",
      ")",
      "from",
      "organization",
      "as",
      "t6",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t6",
      ".",
      "oid",
      "=",
      "t2",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "publication_keyword",
      "as",
      "t3",
      "on",
      "t5",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "where",
      "t6",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of keywords in the papers of \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "keywords",
      "in",
      "the",
      "papers",
      "of",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(publication_keyword, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).filter(organization(\"name\") === col(\"\"University of Michigan\"\")).agg(COUNT(keyword(\"keyword\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t5.title",
      ")",
      "FROM",
      "publication_keyword",
      "AS",
      "t3",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t3.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t5.pid",
      "=",
      "t3.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t4.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t1.keyword",
      "=",
      "``",
      "User",
      "Study",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t5",
      ".",
      "title",
      ")",
      "from",
      "publication_keyword",
      "as",
      "t3",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"return me the number of the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "the",
      "papers",
      "of",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "containing",
      "keyword",
      "``",
      "User",
      "Study",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"User Study\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && keyword(\"keyword\") === col(\"\"User Study\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.title",
      ")",
      "FROM",
      "publication_keyword",
      "AS",
      "t2",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t2.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t2.pid",
      "JOIN",
      "journal",
      "AS",
      "t3",
      "ON",
      "t4.jid",
      "=",
      "t3.jid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t1.keyword",
      "=",
      "``",
      "Keyword",
      "search",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "title",
      ")",
      "from",
      "publication_keyword",
      "as",
      "t2",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t2",
      ".",
      "pid",
      "join",
      "journal",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t3",
      ".",
      "jid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"return me the number of papers in PVLDB containing keyword \" Keyword search \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "in",
      "PVLDB",
      "containing",
      "keyword",
      "``",
      "Keyword",
      "search",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Keyword search\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && keyword(\"keyword\") === col(\"\"Keyword search\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.title",
      ")",
      "FROM",
      "publication_keyword",
      "AS",
      "t3",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t3.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t3.pid",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t1.keyword",
      "=",
      "``",
      "Information",
      "Retrieval",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "title",
      ")",
      "from",
      "publication_keyword",
      "as",
      "t3",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"return me the number of papers in VLDB conference containing keyword \" Information Retrieval \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "in",
      "VLDB",
      "conference",
      "containing",
      "keyword",
      "``",
      "Information",
      "Retrieval",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Information Retrieval\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && keyword(\"keyword\") === col(\"\"Information Retrieval\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.name",
      ")",
      "FROM",
      "publication_keyword",
      "AS",
      "t5",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t5.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t3.pid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t4.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t1.keyword",
      "=",
      "``",
      "Relational",
      "Database",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "name",
      ")",
      "from",
      "publication_keyword",
      "as",
      "t5",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"return me the number of authors who have papers containing keyword \" Relational Database \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "authors",
      "who",
      "have",
      "papers",
      "containing",
      "keyword",
      "``",
      "Relational",
      "Database",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Relational Database\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(keyword(\"keyword\") === col(\"\"Relational Database\"\")).agg(COUNT(author(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT SUM ( t3.citation_num ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t3.citation_num",
      ")",
      "FROM",
      "publication_keyword",
      "AS",
      "t2",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t2.kid",
      "=",
      "t1.kid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t2.pid",
      "WHERE",
      "t1.keyword",
      "=",
      "``",
      "Natural",
      "Language",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t3",
      ".",
      "citation_num",
      ")",
      "from",
      "publication_keyword",
      "as",
      "t2",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "kid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t2",
      ".",
      "pid",
      "where",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"return me the total citations of the papers containing keyword \" Natural Language \"",
    "question_toks":[
      "return",
      "me",
      "the",
      "total",
      "citations",
      "of",
      "the",
      "papers",
      "containing",
      "keyword",
      "``",
      "Natural",
      "Language",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Natural Language\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication_keyword.join(keyword, publication_keyword(\"kid\") === keyword(\"kid\"), inner).join(publication, publication(\"pid\") === publication_keyword(\"pid\"), inner).filter(keyword(\"keyword\") === col(\"\"Natural Language\"\")).agg(SUM(publication(\"citation_num\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT name ) FROM organization;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "name",
      ")",
      "FROM",
      "organization",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "name",
      ")",
      "from",
      "organization"
    ],
    "question":"return me the number of the organizations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "the",
      "organizations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                35,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"organization.agg(COUNT(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT name ) FROM organization WHERE continent  =  \"North America\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "name",
      ")",
      "FROM",
      "organization",
      "WHERE",
      "continent",
      "=",
      "``",
      "North",
      "America",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "name",
      ")",
      "from",
      "organization",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question":"return me the number of the organizations in \" North America \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "the",
      "organizations",
      "in",
      "``",
      "North",
      "America",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                35,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          "\"North America\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.filter(col(\"continent\") === col(\"\"North America\"\")).agg(COUNT(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.name",
      ")",
      "FROM",
      "domain_author",
      "AS",
      "t4",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "DOMAIN",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t4.did",
      "JOIN",
      "organization",
      "AS",
      "t2",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "Databases",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "name",
      ")",
      "from",
      "domain_author",
      "as",
      "t4",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "domain",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t4",
      ".",
      "did",
      "join",
      "organization",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of organizations in Databases area .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "organizations",
      "in",
      "Databases",
      "area",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                35,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"domain_author.join(author, domain_author(\"aid\") === author(\"aid\"), inner).join(DOMAIN, DOMAIN(\"did\") === domain_author(\"did\"), inner).join(organization, organization(\"oid\") === author(\"oid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\")).agg(COUNT(organization(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.name",
      ")",
      "FROM",
      "domain_author",
      "AS",
      "t4",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "DOMAIN",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t4.did",
      "JOIN",
      "organization",
      "AS",
      "t2",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "Databases",
      "''",
      "AND",
      "t2.continent",
      "=",
      "``",
      "North",
      "America",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "name",
      ")",
      "from",
      "domain_author",
      "as",
      "t4",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "domain",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t4",
      ".",
      "did",
      "join",
      "organization",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "continent",
      "=",
      "value"
    ],
    "question":"return me the number of organizations in Databases area located in \" North America \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "organizations",
      "in",
      "Databases",
      "area",
      "located",
      "in",
      "``",
      "North",
      "America",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                35,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          "\"North America\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"domain_author.join(author, domain_author(\"aid\") === author(\"aid\"), inner).join(DOMAIN, DOMAIN(\"did\") === domain_author(\"did\"), inner).join(organization, organization(\"oid\") === author(\"oid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\") && organization(\"continent\") === col(\"\"North America\"\")).agg(COUNT(organization(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.title",
      ")",
      "FROM",
      "organization",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t4",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "title",
      ")",
      "from",
      "organization",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of papers in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(organization(\"name\") === col(\"\"University of Michigan\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN domain_publication AS t2 ON t3.did  =  t2.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN publication AS t4 ON t4.pid  =  t2.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.title",
      ")",
      "FROM",
      "domain_author",
      "AS",
      "t6",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t6.aid",
      "=",
      "t1.aid",
      "JOIN",
      "DOMAIN",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t6.did",
      "JOIN",
      "domain_publication",
      "AS",
      "t2",
      "ON",
      "t3.did",
      "=",
      "t2.did",
      "JOIN",
      "organization",
      "AS",
      "t5",
      "ON",
      "t5.oid",
      "=",
      "t1.oid",
      "JOIN",
      "publication",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t2.pid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "Databases",
      "''",
      "AND",
      "t5.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "title",
      ")",
      "from",
      "domain_author",
      "as",
      "t6",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t6",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "domain",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t6",
      ".",
      "did",
      "join",
      "domain_publication",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "join",
      "organization",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "join",
      "publication",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t2",
      ".",
      "pid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of papers in \" University of Michigan \" in Databases area .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "in",
      "Databases",
      "area",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"domain_author.join(author, domain_author(\"aid\") === author(\"aid\"), inner).join(DOMAIN, DOMAIN(\"did\") === domain_author(\"did\"), inner).join(domain_publication, DOMAIN(\"did\") === domain_publication(\"did\"), inner).join(organization, organization(\"oid\") === author(\"oid\"), inner).join(publication, publication(\"pid\") === domain_publication(\"pid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\") && organization(\"name\") === col(\"\"University of Michigan\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.title",
      ")",
      "FROM",
      "organization",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t4",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      "AND",
      "t4.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "title",
      ")",
      "from",
      "organization",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the number of papers after 2000 in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "after",
      "2000",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(organization(\"name\") === col(\"\"University of Michigan\"\") && publication(\"year\") > 2000).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t5.title",
      ")",
      "FROM",
      "organization",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.oid",
      "=",
      "t1.oid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t5.cid",
      "=",
      "t2.cid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t3.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t5",
      ".",
      "title",
      ")",
      "from",
      "organization",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t5",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of papers in VLDB conference in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "in",
      "VLDB",
      "conference",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && organization(\"name\") === col(\"\"University of Michigan\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t5.title",
      ")",
      "FROM",
      "organization",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "journal",
      "AS",
      "t3",
      "ON",
      "t5.jid",
      "=",
      "t3.jid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t5",
      ".",
      "title",
      ")",
      "from",
      "organization",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "journal",
      "as",
      "t3",
      "on",
      "t5",
      ".",
      "jid",
      "=",
      "t3",
      ".",
      "jid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of papers in PVLDB in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "in",
      "PVLDB",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && organization(\"name\") === col(\"\"University of Michigan\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t5.title",
      ")",
      "FROM",
      "organization",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "journal",
      "AS",
      "t3",
      "ON",
      "t5.jid",
      "=",
      "t3.jid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      "AND",
      "t5.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t5",
      ".",
      "title",
      ")",
      "from",
      "organization",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "journal",
      "as",
      "t3",
      "on",
      "t5",
      ".",
      "jid",
      "=",
      "t3",
      ".",
      "jid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the number of papers in PVLDB after 2000 in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "in",
      "PVLDB",
      "after",
      "2000",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && organization(\"name\") === col(\"\"University of Michigan\"\") && publication(\"year\") > 2000).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT SUM ( t4.citation_num ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t4.citation_num",
      ")",
      "FROM",
      "organization",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t4",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t4",
      ".",
      "citation_num",
      ")",
      "from",
      "organization",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the total citations of the papers in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "total",
      "citations",
      "of",
      "the",
      "papers",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).join(writes, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(organization(\"name\") === col(\"\"University of Michigan\"\")).agg(SUM(publication(\"citation_num\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "organization",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "organization",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of researchers in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "researchers",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"organization.join(author, organization(\"oid\") === author(\"oid\"), inner).filter(organization(\"name\") === col(\"\"University of Michigan\"\")).agg(COUNT(author(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "domain_author",
      "AS",
      "t4",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "DOMAIN",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t4.did",
      "JOIN",
      "organization",
      "AS",
      "t2",
      "ON",
      "t2.oid",
      "=",
      "t1.oid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "Databases",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "University",
      "of",
      "Michigan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "domain_author",
      "as",
      "t4",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "domain",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t4",
      ".",
      "did",
      "join",
      "organization",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "oid",
      "=",
      "t1",
      ".",
      "oid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of researchers in Databases area in \" University of Michigan \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "researchers",
      "in",
      "Databases",
      "area",
      "in",
      "``",
      "University",
      "of",
      "Michigan",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"University of Michigan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"domain_author.join(author, domain_author(\"aid\") === author(\"aid\"), inner).join(DOMAIN, DOMAIN(\"did\") === domain_author(\"did\"), inner).join(organization, organization(\"oid\") === author(\"oid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\") && organization(\"name\") === col(\"\"University of Michigan\"\")).agg(COUNT(author(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "journal",
      "AS",
      "t2",
      "ON",
      "t4.jid",
      "=",
      "t2.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "journal",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "jid",
      "=",
      "t2",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of authors who have papers in PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "authors",
      "who",
      "have",
      "papers",
      "in",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\")).agg(COUNT(author(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "publication",
      "AS",
      "t4",
      "JOIN",
      "conference",
      "AS",
      "t2",
      "ON",
      "t4.cid",
      "=",
      "t2.cid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t4.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "VLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "publication",
      "as",
      "t4",
      "join",
      "conference",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "cid",
      "=",
      "t2",
      ".",
      "cid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of authors who have papers in the VLDB conference .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "authors",
      "who",
      "have",
      "papers",
      "in",
      "the",
      "VLDB",
      "conference",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\")).agg(COUNT(author(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t2.year",
      "<",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"return me the number of papers published on PVLDB before 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "published",
      "on",
      "PVLDB",
      "before",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"year\") < 2000).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t2.year",
      "<",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"return me the number of papers published in the VLDB conference before 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "published",
      "in",
      "the",
      "VLDB",
      "conference",
      "before",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && publication(\"year\") < 2000).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t2.citation_num",
      ")",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t2",
      ".",
      "citation_num",
      ")",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the total citations of all the papers in PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "total",
      "citations",
      "of",
      "all",
      "the",
      "papers",
      "in",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\")).agg(SUM(publication(\"citation_num\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "t2.citation_num",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "citation_num",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the citations of each paper in PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "citations",
      "of",
      "each",
      "paper",
      "in",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\")).select(publication(\"citation_num\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  =  2005;",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t2.citation_num",
      ")",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t2.year",
      "=",
      "2005",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t2",
      ".",
      "citation_num",
      ")",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"return me the total citations of papers in PVLDB in 2005 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "total",
      "citations",
      "of",
      "papers",
      "in",
      "PVLDB",
      "in",
      "2005",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2005.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"year\") === 2005).agg(SUM(publication(\"citation_num\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2005;",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t2.citation_num",
      ")",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t2.year",
      "<",
      "2005",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t2",
      ".",
      "citation_num",
      ")",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"return me the total citations of papers in PVLDB before 2005 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "total",
      "citations",
      "of",
      "papers",
      "in",
      "PVLDB",
      "before",
      "2005",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2005.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"year\") < 2005).agg(SUM(publication(\"citation_num\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t2.citation_num",
      ")",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t2",
      ".",
      "citation_num",
      ")",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the total citations of all the papers in the VLDB conference .",
    "question_toks":[
      "return",
      "me",
      "the",
      "total",
      "citations",
      "of",
      "all",
      "the",
      "papers",
      "in",
      "the",
      "VLDB",
      "conference",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\")).agg(SUM(publication(\"citation_num\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
    "query_toks":[
      "SELECT",
      "t2.citation_num",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "citation_num",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the citations of each paper in the VLDB conference .",
    "question_toks":[
      "return",
      "me",
      "the",
      "citations",
      "of",
      "each",
      "paper",
      "in",
      "the",
      "VLDB",
      "conference",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\")).select(publication(\"citation_num\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  =  2005;",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t2.citation_num",
      ")",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t2.year",
      "=",
      "2005",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t2",
      ".",
      "citation_num",
      ")",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "=",
      "value"
    ],
    "question":"return me the total citations of papers in the VLDB conference in 2005 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "total",
      "citations",
      "of",
      "papers",
      "in",
      "the",
      "VLDB",
      "conference",
      "in",
      "2005",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2005.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && publication(\"year\") === 2005).agg(SUM(publication(\"citation_num\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2005;",
    "query_toks":[
      "SELECT",
      "SUM",
      "(",
      "t2.citation_num",
      ")",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t2.year",
      "<",
      "2005",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "sum",
      "(",
      "t2",
      ".",
      "citation_num",
      ")",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"return me the total citations of papers in the VLDB conference before 2005 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "total",
      "citations",
      "of",
      "papers",
      "in",
      "the",
      "VLDB",
      "conference",
      "before",
      "2005",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2005.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && publication(\"year\") < 2005).agg(SUM(publication(\"citation_num\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Divesh Srivastava\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "writes",
      "AS",
      "t4",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t4.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t7",
      "ON",
      "t4.pid",
      "=",
      "t7.pid",
      "JOIN",
      "writes",
      "AS",
      "t5",
      "ON",
      "t5.pid",
      "=",
      "t7.pid",
      "JOIN",
      "writes",
      "AS",
      "t6",
      "ON",
      "t6.pid",
      "=",
      "t7.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t5.aid",
      "=",
      "t1.aid",
      "JOIN",
      "author",
      "AS",
      "t3",
      "ON",
      "t6.aid",
      "=",
      "t3.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t3.name",
      "=",
      "``",
      "Divesh",
      "Srivastava",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "writes",
      "as",
      "t4",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t7",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t7",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "pid",
      "=",
      "t7",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t6",
      "on",
      "t6",
      ".",
      "pid",
      "=",
      "t7",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "author",
      "as",
      "t3",
      "on",
      "t6",
      ".",
      "aid",
      "=",
      "t3",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the authors who have cooperated both with \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "who",
      "have",
      "cooperated",
      "both",
      "with",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "and",
      "``",
      "Divesh",
      "Srivastava",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Divesh Srivastava\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && author(\"name\") === col(\"\"Divesh Srivastava\"\")).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t5.year  >  2000;",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t5.year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the authors who have cooperated with \" H. V. Jagadish \" after 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "who",
      "have",
      "cooperated",
      "with",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "after",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && publication(\"year\") > 2000).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";",
    "query_toks":[
      "SELECT",
      "t5.title",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "Divesh",
      "Srivastava",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t5",
      ".",
      "title",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "written",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "and",
      "``",
      "Divesh",
      "Srivastava",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Divesh Srivastava\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && author(\"name\") === col(\"\"Divesh Srivastava\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t5.year  >  2005;",
    "query_toks":[
      "SELECT",
      "t5.title",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "Yunyao",
      "Li",
      "''",
      "AND",
      "t5.year",
      ">",
      "2005",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t5",
      ".",
      "title",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" after 2005 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "written",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "and",
      "``",
      "Yunyao",
      "Li",
      "``",
      "after",
      "2005",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Yunyao Li\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2005.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && author(\"name\") === col(\"\"Yunyao Li\"\") && publication(\"year\") > 2005).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\";",
    "query_toks":[
      "SELECT",
      "t6.title",
      "FROM",
      "publication",
      "AS",
      "t6",
      "JOIN",
      "journal",
      "AS",
      "t4",
      "ON",
      "t6.jid",
      "=",
      "t4.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t6.pid",
      "JOIN",
      "writes",
      "AS",
      "t5",
      "ON",
      "t5.pid",
      "=",
      "t6.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t5.aid",
      "=",
      "t1.aid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "Yunyao",
      "Li",
      "''",
      "AND",
      "t4.name",
      "=",
      "``",
      "PVLDB",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t6",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t6",
      "join",
      "journal",
      "as",
      "t4",
      "on",
      "t6",
      ".",
      "jid",
      "=",
      "t4",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t6",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "pid",
      "=",
      "t6",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "written",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "and",
      "``",
      "Yunyao",
      "Li",
      "``",
      "on",
      "PVLDB",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Yunyao Li\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && author(\"name\") === col(\"\"Yunyao Li\"\") && journal(\"name\") === col(\"\"PVLDB\"\")).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\" AND t6.year  >  2005;",
    "query_toks":[
      "SELECT",
      "t6.title",
      "FROM",
      "publication",
      "AS",
      "t6",
      "JOIN",
      "journal",
      "AS",
      "t4",
      "ON",
      "t6.jid",
      "=",
      "t4.jid",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t6.pid",
      "JOIN",
      "writes",
      "AS",
      "t5",
      "ON",
      "t5.pid",
      "=",
      "t6.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t5.aid",
      "=",
      "t1.aid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "Yunyao",
      "Li",
      "''",
      "AND",
      "t4.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t6.year",
      ">",
      "2005",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t6",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t6",
      "join",
      "journal",
      "as",
      "t4",
      "on",
      "t6",
      ".",
      "jid",
      "=",
      "t4",
      ".",
      "jid",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t6",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "pid",
      "=",
      "t6",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t6",
      ".",
      "year",
      ">",
      "value"
    ],
    "question":"return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB after 2005 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "written",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "and",
      "``",
      "Yunyao",
      "Li",
      "``",
      "on",
      "PVLDB",
      "after",
      "2005",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Yunyao Li\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2005.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && author(\"name\") === col(\"\"Yunyao Li\"\") && journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"year\") > 2005).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the authors who have cooperated with \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "who",
      "have",
      "cooperated",
      "with",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;",
    "query_toks":[
      "SELECT",
      "t5.title",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "Divesh",
      "Srivastava",
      "''",
      "AND",
      "t5.year",
      "<",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t5",
      ".",
      "title",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "written",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "and",
      "``",
      "Divesh",
      "Srivastava",
      "``",
      "before",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Divesh Srivastava\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && author(\"name\") === col(\"\"Divesh Srivastava\"\") && publication(\"year\") < 2000).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "publication",
      "AS",
      "t7",
      "JOIN",
      "cite",
      "AS",
      "t5",
      "ON",
      "t7.pid",
      "=",
      "t5.citing",
      "JOIN",
      "publication",
      "AS",
      "t6",
      "ON",
      "t6.pid",
      "=",
      "t5.cited",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t7.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t6.pid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "publication",
      "as",
      "t7",
      "join",
      "cite",
      "as",
      "t5",
      "on",
      "t7",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "citing",
      "join",
      "publication",
      "as",
      "t6",
      "on",
      "t6",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "cited",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t7",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t6",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the authors who have cited the papers by \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "authors",
      "who",
      "have",
      "cited",
      "the",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ],
            [
              0,
              42,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            14
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(cite, publication(\"pid\") === cite(\"citing\"), inner).join(publication, publication(\"pid\") === cite(\"cited\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).select(author(\"name\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t5.title",
      ")",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "Divesh",
      "Srivastava",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t5",
      ".",
      "title",
      ")",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "written",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "and",
      "``",
      "Divesh",
      "Srivastava",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Divesh Srivastava\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && author(\"name\") === col(\"\"Divesh Srivastava\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t5.title",
      ")",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "Divesh",
      "Srivastava",
      "''",
      "AND",
      "t5.year",
      "<",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t5",
      ".",
      "title",
      ")",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "year",
      "<",
      "value"
    ],
    "question":"return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "written",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "and",
      "``",
      "Divesh",
      "Srivastava",
      "``",
      "before",
      "2000",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Divesh Srivastava\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && author(\"name\") === col(\"\"Divesh Srivastava\"\") && publication(\"year\") < 2000).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t2.name  =  \"Cong Yu\" AND t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Yunyao Li\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t7.title",
      ")",
      "FROM",
      "writes",
      "AS",
      "t4",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t4.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t7",
      "ON",
      "t4.pid",
      "=",
      "t7.pid",
      "JOIN",
      "writes",
      "AS",
      "t5",
      "ON",
      "t5.pid",
      "=",
      "t7.pid",
      "JOIN",
      "writes",
      "AS",
      "t6",
      "ON",
      "t6.pid",
      "=",
      "t7.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t5.aid",
      "=",
      "t1.aid",
      "JOIN",
      "author",
      "AS",
      "t3",
      "ON",
      "t6.aid",
      "=",
      "t3.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Cong",
      "Yu",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t3.name",
      "=",
      "``",
      "Yunyao",
      "Li",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t7",
      ".",
      "title",
      ")",
      "from",
      "writes",
      "as",
      "t4",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t7",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t7",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "pid",
      "=",
      "t7",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t6",
      "on",
      "t6",
      ".",
      "pid",
      "=",
      "t7",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "author",
      "as",
      "t3",
      "on",
      "t6",
      ".",
      "aid",
      "=",
      "t3",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of papers written by \" H. V. Jagadish \" , \" Yunyao Li \" , and \" Cong Yu \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "papers",
      "written",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      ",",
      "``",
      "Yunyao",
      "Li",
      "``",
      ",",
      "and",
      "``",
      "Cong",
      "Yu",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                29,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Cong Yu\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Yunyao Li\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"Cong Yu\"\") && author(\"name\") === col(\"\"H. V. Jagadish\"\") && author(\"name\") === col(\"\"Yunyao Li\"\")).agg(COUNT(publication(\"title\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.name",
      ")",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "name",
      ")",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of authors who have cooperated with \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "authors",
      "who",
      "have",
      "cooperated",
      "with",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).agg(COUNT(author(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.name",
      ")",
      "FROM",
      "publication",
      "AS",
      "t7",
      "JOIN",
      "cite",
      "AS",
      "t5",
      "ON",
      "t7.pid",
      "=",
      "t5.citing",
      "JOIN",
      "publication",
      "AS",
      "t6",
      "ON",
      "t6.pid",
      "=",
      "t5.cited",
      "JOIN",
      "writes",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t7.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t6.pid",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "name",
      ")",
      "from",
      "publication",
      "as",
      "t7",
      "join",
      "cite",
      "as",
      "t5",
      "on",
      "t7",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "citing",
      "join",
      "publication",
      "as",
      "t6",
      "on",
      "t6",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "cited",
      "join",
      "writes",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t7",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t6",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"return me the number of authors who have cited the papers by \" H. V. Jagadish \" .",
    "question_toks":[
      "return",
      "me",
      "the",
      "number",
      "of",
      "authors",
      "who",
      "have",
      "cited",
      "the",
      "papers",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ],
            [
              0,
              42,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            14
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(cite, publication(\"pid\") === cite(\"citing\"), inner).join(publication, publication(\"pid\") === cite(\"cited\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).agg(COUNT(author(\"name\")))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.citation_num  >  200;",
    "query_toks":[
      "SELECT",
      "t5.title",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "Divesh",
      "Srivastava",
      "''",
      "AND",
      "t5.citation_num",
      ">",
      "200",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t5",
      ".",
      "title",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t5",
      ".",
      "citation_num",
      ">",
      "value"
    ],
    "question":"return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with more than 200 citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "written",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "and",
      "``",
      "Divesh",
      "Srivastava",
      "``",
      "with",
      "more",
      "than",
      "200",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Divesh Srivastava\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\") && author(\"name\") === col(\"\"Divesh Srivastava\"\") && publication(\"citation_num\") > 200).select(publication(\"title\"))"
  },
  {
    "db_id":"academic",
    "query":"SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"Divesh Srivastava\" AND t1.name  =  \"H. V. Jagadish\" ORDER BY t5.citation_num DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "t5.title",
      "FROM",
      "writes",
      "AS",
      "t3",
      "JOIN",
      "author",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "publication",
      "AS",
      "t5",
      "ON",
      "t3.pid",
      "=",
      "t5.pid",
      "JOIN",
      "writes",
      "AS",
      "t4",
      "ON",
      "t4.pid",
      "=",
      "t5.pid",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Divesh",
      "Srivastava",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "ORDER",
      "BY",
      "t5.citation_num",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t5",
      ".",
      "title",
      "from",
      "writes",
      "as",
      "t3",
      "join",
      "author",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t5",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "writes",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "t5",
      ".",
      "citation_num",
      "desc",
      "limit",
      "value"
    ],
    "question":"return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with the most number of citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "papers",
      "written",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "and",
      "``",
      "Divesh",
      "Srivastava",
      "``",
      "with",
      "the",
      "most",
      "number",
      "of",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Divesh Srivastava\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).join(writes, writes(\"pid\") === publication(\"pid\"), inner).join(author, writes(\"aid\") === author(\"aid\"), inner).filter(author(\"name\") === col(\"\"Divesh Srivastava\"\") && author(\"name\") === col(\"\"H. V. Jagadish\"\")).select(publication(\"title\")).orderBy(desc(\"citation_num\")).limit(1)"
  },
  {
    "db_id":"academic",
    "query":"SELECT title FROM publication ORDER BY citation_num DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "title",
      "FROM",
      "publication",
      "ORDER",
      "BY",
      "citation_num",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "publication",
      "order",
      "by",
      "citation_num",
      "desc",
      "limit",
      "value"
    ],
    "question":"return me the paper with the most citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "with",
      "the",
      "most",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        
      ]
    },
    "SparkDataFrame":"publication.select(col(\"title\")).orderBy(desc(\"citation_num\")).limit(1)"
  },
  {
    "db_id":"academic",
    "query":"SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "DOMAIN",
      "AS",
      "t2",
      "JOIN",
      "domain_publication",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t1.pid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Databases",
      "''",
      "ORDER",
      "BY",
      "t3.citation_num",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "domain",
      "as",
      "t2",
      "join",
      "domain_publication",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t1",
      ".",
      "pid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "citation_num",
      "desc",
      "limit",
      "value"
    ],
    "question":"return me the paper in Databases area with the most citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "in",
      "Databases",
      "area",
      "with",
      "the",
      "most",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              31,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            10
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"DOMAIN.join(domain_publication, DOMAIN(\"did\") === domain_publication(\"did\"), inner).join(publication, publication(\"pid\") === domain_publication(\"pid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\")).select(publication(\"title\")).orderBy(desc(\"citation_num\")).limit(1)"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "ORDER",
      "BY",
      "t2.citation_num",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "citation_num",
      "desc",
      "limit",
      "value"
    ],
    "question":"return me the paper in PVLDB with the most citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "in",
      "PVLDB",
      "with",
      "the",
      "most",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\")).select(publication(\"title\")).orderBy(desc(\"citation_num\")).limit(1)"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      "ORDER",
      "BY",
      "t2.citation_num",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "citation_num",
      "desc",
      "limit",
      "value"
    ],
    "question":"return me the paper in VLDB conference with the most citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "in",
      "VLDB",
      "conference",
      "with",
      "the",
      "most",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\")).select(publication(\"title\")).orderBy(desc(\"citation_num\")).limit(1)"
  },
  {
    "db_id":"academic",
    "query":"SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "writes",
      "AS",
      "t2",
      "JOIN",
      "author",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t2.pid",
      "=",
      "t3.pid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "''",
      "ORDER",
      "BY",
      "t3.citation_num",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "writes",
      "as",
      "t2",
      "join",
      "author",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "citation_num",
      "desc",
      "limit",
      "value"
    ],
    "question":"return me the paper by \" H. V. Jagadish \" with the most citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "by",
      "``",
      "H.",
      "V.",
      "Jagadish",
      "``",
      "with",
      "the",
      "most",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"H. V. Jagadish\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"writes.join(author, writes(\"aid\") === author(\"aid\"), inner).join(publication, writes(\"pid\") === publication(\"pid\"), inner).filter(author(\"name\") === col(\"\"H. V. Jagadish\"\")).select(publication(\"title\")).orderBy(desc(\"citation_num\")).limit(1)"
  },
  {
    "db_id":"academic",
    "query":"SELECT title FROM publication WHERE YEAR  >  2000 ORDER BY citation_num DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "title",
      "FROM",
      "publication",
      "WHERE",
      "YEAR",
      ">",
      "2000",
      "ORDER",
      "BY",
      "citation_num",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "publication",
      "where",
      "year",
      ">",
      "value",
      "order",
      "by",
      "citation_num",
      "desc",
      "limit",
      "value"
    ],
    "question":"return me the paper after 2000 with the most citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "after",
      "2000",
      "with",
      "the",
      "most",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.filter(col(\"YEAR\") > 2000).select(col(\"title\")).orderBy(desc(\"citation_num\")).limit(1)"
  },
  {
    "db_id":"academic",
    "query":"SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.year  >  2000 ORDER BY t3.citation_num DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "DOMAIN",
      "AS",
      "t2",
      "JOIN",
      "domain_publication",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "publication",
      "AS",
      "t3",
      "ON",
      "t3.pid",
      "=",
      "t1.pid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Databases",
      "''",
      "AND",
      "t3.year",
      ">",
      "2000",
      "ORDER",
      "BY",
      "t3.citation_num",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "domain",
      "as",
      "t2",
      "join",
      "domain_publication",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "publication",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "pid",
      "=",
      "t1",
      ".",
      "pid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "year",
      ">",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "citation_num",
      "desc",
      "limit",
      "value"
    ],
    "question":"return me the paper after 2000 in Databases area with the most citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "after",
      "2000",
      "in",
      "Databases",
      "area",
      "with",
      "the",
      "most",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              31,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            10
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Databases\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"DOMAIN.join(domain_publication, DOMAIN(\"did\") === domain_publication(\"did\"), inner).join(publication, publication(\"pid\") === domain_publication(\"pid\"), inner).filter(DOMAIN(\"name\") === col(\"\"Databases\"\") && publication(\"year\") > 2000).select(publication(\"title\")).orderBy(desc(\"citation_num\")).limit(1)"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "journal",
      "AS",
      "t1",
      "ON",
      "t2.jid",
      "=",
      "t1.jid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "PVLDB",
      "''",
      "AND",
      "t2.year",
      ">",
      "2000",
      "ORDER",
      "BY",
      "t2.citation_num",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "journal",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "jid",
      "=",
      "t1",
      ".",
      "jid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      ">",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "citation_num",
      "desc",
      "limit",
      "value"
    ],
    "question":"return me the paper after 2000 in PVLDB with the most citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "after",
      "2000",
      "in",
      "PVLDB",
      "with",
      "the",
      "most",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"PVLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(journal, publication(\"jid\") === journal(\"jid\"), inner).filter(journal(\"name\") === col(\"\"PVLDB\"\") && publication(\"year\") > 2000).select(publication(\"title\")).orderBy(desc(\"citation_num\")).limit(1)"
  },
  {
    "db_id":"academic",
    "query":"SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "publication",
      "AS",
      "t2",
      "JOIN",
      "conference",
      "AS",
      "t1",
      "ON",
      "t2.cid",
      "=",
      "t1.cid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "VLDB",
      "''",
      "AND",
      "t2.year",
      ">",
      "2000",
      "ORDER",
      "BY",
      "t2.citation_num",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "publication",
      "as",
      "t2",
      "join",
      "conference",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "cid",
      "=",
      "t1",
      ".",
      "cid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "year",
      ">",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "citation_num",
      "desc",
      "limit",
      "value"
    ],
    "question":"return me the paper after 2000 in VLDB conference with the most citations .",
    "question_toks":[
      "return",
      "me",
      "the",
      "paper",
      "after",
      "2000",
      "in",
      "VLDB",
      "conference",
      "with",
      "the",
      "most",
      "citations",
      "."
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            9
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"VLDB\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"publication.join(conference, publication(\"cid\") === conference(\"cid\"), inner).filter(conference(\"name\") === col(\"\"VLDB\"\") && publication(\"year\") > 2000).select(publication(\"title\")).orderBy(desc(\"citation_num\")).limit(1)"
  },
  {
    "db_id":"imdb",
    "query":"SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";",
    "query_toks":[
      "SELECT",
      "release_year",
      "FROM",
      "movie",
      "WHERE",
      "title",
      "=",
      "``",
      "The",
      "Imitation",
      "Game",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "release_year",
      "from",
      "movie",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"What year is the movie \" The Imitation Game \" from ?",
    "question_toks":[
      "What",
      "year",
      "is",
      "the",
      "movie",
      "``",
      "The",
      "Imitation",
      "Game",
      "``",
      "from",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"The Imitation Game\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"movie.filter(col(\"title\") === col(\"\"The Imitation Game\"\")).select(col(\"release_year\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";",
    "query_toks":[
      "SELECT",
      "release_year",
      "FROM",
      "movie",
      "WHERE",
      "title",
      "=",
      "``",
      "The",
      "Imitation",
      "Game",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "release_year",
      "from",
      "movie",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"What year was the movie \" The Imitation Game \" produced",
    "question_toks":[
      "What",
      "year",
      "was",
      "the",
      "movie",
      "``",
      "The",
      "Imitation",
      "Game",
      "``",
      "produced"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"The Imitation Game\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"movie.filter(col(\"title\") === col(\"\"The Imitation Game\"\")).select(col(\"release_year\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";",
    "query_toks":[
      "SELECT",
      "birth_year",
      "FROM",
      "actor",
      "WHERE",
      "name",
      "=",
      "``",
      "Benedict",
      "Cumberbatch",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "birth_year",
      "from",
      "actor",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"What year was \" Benedict Cumberbatch \" born ?",
    "question_toks":[
      "What",
      "year",
      "was",
      "``",
      "Benedict",
      "Cumberbatch",
      "``",
      "born",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Benedict Cumberbatch\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"name\") === col(\"\"Benedict Cumberbatch\"\")).select(col(\"birth_year\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";",
    "query_toks":[
      "SELECT",
      "birth_year",
      "FROM",
      "actor",
      "WHERE",
      "name",
      "=",
      "``",
      "Benedict",
      "Cumberbatch",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "birth_year",
      "from",
      "actor",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"In what year was \" Benedict Cumberbatch \" born",
    "question_toks":[
      "In",
      "what",
      "year",
      "was",
      "``",
      "Benedict",
      "Cumberbatch",
      "``",
      "born"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Benedict Cumberbatch\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"name\") === col(\"\"Benedict Cumberbatch\"\")).select(col(\"birth_year\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";",
    "query_toks":[
      "SELECT",
      "nationality",
      "FROM",
      "actor",
      "WHERE",
      "name",
      "=",
      "``",
      "Christoph",
      "Waltz",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "nationality",
      "from",
      "actor",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"What is the nationality of the actress \" Christoph Waltz \" ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "nationality",
      "of",
      "the",
      "actress",
      "``",
      "Christoph",
      "Waltz",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Christoph Waltz\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"name\") === col(\"\"Christoph Waltz\"\")).select(col(\"nationality\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";",
    "query_toks":[
      "SELECT",
      "nationality",
      "FROM",
      "actor",
      "WHERE",
      "name",
      "=",
      "``",
      "Christoph",
      "Waltz",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "nationality",
      "from",
      "actor",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"What is the nationality of the actor \" Christoph Waltz \" ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "nationality",
      "of",
      "the",
      "actor",
      "``",
      "Christoph",
      "Waltz",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Christoph Waltz\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"name\") === col(\"\"Christoph Waltz\"\")).select(col(\"nationality\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT title FROM movie WHERE release_year  =  2015;",
    "query_toks":[
      "SELECT",
      "title",
      "FROM",
      "movie",
      "WHERE",
      "release_year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "title",
      "from",
      "movie",
      "where",
      "release_year",
      "=",
      "value"
    ],
    "question":"Find all movies produced in 2015",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "produced",
      "in",
      "2015"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"movie.filter(col(\"release_year\") === 2015).select(col(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE birth_city  =  \"Tehran\";",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "birth_city",
      "=",
      "``",
      "Tehran",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "birth_city",
      "=",
      "value"
    ],
    "question":"Find all actors born in \" Tehran \"",
    "question_toks":[
      "Find",
      "all",
      "actors",
      "born",
      "in",
      "``",
      "Tehran",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Tehran\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_city\") === col(\"\"Tehran\"\")).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE birth_city  =  \"Tehran\";",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "birth_city",
      "=",
      "``",
      "Tehran",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "birth_city",
      "=",
      "value"
    ],
    "question":"Find all actors born in Tehran",
    "question_toks":[
      "Find",
      "all",
      "actors",
      "born",
      "in",
      "Tehran"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Tehran\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_city\") === col(\"\"Tehran\"\")).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE birth_city  =  \"Tehran\";",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "birth_city",
      "=",
      "``",
      "Tehran",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "birth_city",
      "=",
      "value"
    ],
    "question":"Which actors were born in Tehran",
    "question_toks":[
      "Which",
      "actors",
      "were",
      "born",
      "in",
      "Tehran"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Tehran\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_city\") === col(\"\"Tehran\"\")).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "nationality",
      "=",
      "``",
      "Afghanistan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "nationality",
      "=",
      "value"
    ],
    "question":"Find all actors who are from Afghanistan",
    "question_toks":[
      "Find",
      "all",
      "actors",
      "who",
      "are",
      "from",
      "Afghanistan"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Afghanistan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"nationality\") === col(\"\"Afghanistan\"\")).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "nationality",
      "=",
      "``",
      "Afghanistan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "nationality",
      "=",
      "value"
    ],
    "question":"Find all actors from Afghanistan",
    "question_toks":[
      "Find",
      "all",
      "actors",
      "from",
      "Afghanistan"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Afghanistan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"nationality\") === col(\"\"Afghanistan\"\")).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "nationality",
      "=",
      "``",
      "Afghanistan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "nationality",
      "=",
      "value"
    ],
    "question":"Give me the name of all the actors from Afghanistan",
    "question_toks":[
      "Give",
      "me",
      "the",
      "name",
      "of",
      "all",
      "the",
      "actors",
      "from",
      "Afghanistan"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Afghanistan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"nationality\") === col(\"\"Afghanistan\"\")).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE birth_year  =  1984;",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "birth_year",
      "=",
      "1984",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "birth_year",
      "=",
      "value"
    ],
    "question":"Find all actors who were born in 1984",
    "question_toks":[
      "Find",
      "all",
      "actors",
      "who",
      "were",
      "born",
      "in",
      "1984"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          1984.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_year\") === 1984).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";",
    "query_toks":[
      "SELECT",
      "birth_year",
      "FROM",
      "actor",
      "WHERE",
      "name",
      "=",
      "``",
      "actor_name0",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "birth_year",
      "from",
      "actor",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"When was \" Kevin Spacey \" born ?",
    "question_toks":[
      "When",
      "was",
      "``",
      "Kevin",
      "Spacey",
      "``",
      "born",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"actor_name0\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"name\") === col(\"\"actor_name0\"\")).select(col(\"birth_year\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";",
    "query_toks":[
      "SELECT",
      "birth_year",
      "FROM",
      "actor",
      "WHERE",
      "name",
      "=",
      "``",
      "actor_name0",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "birth_year",
      "from",
      "actor",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"In what year was \" Kevin Spacey \" born ?",
    "question_toks":[
      "In",
      "what",
      "year",
      "was",
      "``",
      "Kevin",
      "Spacey",
      "``",
      "born",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"actor_name0\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"name\") === col(\"\"actor_name0\"\")).select(col(\"birth_year\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT birth_city FROM director WHERE name  =  \"director_name0\";",
    "query_toks":[
      "SELECT",
      "birth_city",
      "FROM",
      "director",
      "WHERE",
      "name",
      "=",
      "``",
      "director_name0",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "birth_city",
      "from",
      "director",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"Where is the birth place of \" Kevin Spacey \"",
    "question_toks":[
      "Where",
      "is",
      "the",
      "birth",
      "place",
      "of",
      "``",
      "Kevin",
      "Spacey",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"director_name0\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.filter(col(\"name\") === col(\"\"director_name0\"\")).select(col(\"birth_city\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT birth_city FROM director WHERE name  =  \"director_name0\";",
    "query_toks":[
      "SELECT",
      "birth_city",
      "FROM",
      "director",
      "WHERE",
      "name",
      "=",
      "``",
      "director_name0",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "birth_city",
      "from",
      "director",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"In what city was \" Kevin Spacey \" born ?",
    "question_toks":[
      "In",
      "what",
      "city",
      "was",
      "``",
      "Kevin",
      "Spacey",
      "``",
      "born",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"director_name0\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.filter(col(\"name\") === col(\"\"director_name0\"\")).select(col(\"birth_city\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT nationality FROM director WHERE name  =  \"director_name0\";",
    "query_toks":[
      "SELECT",
      "nationality",
      "FROM",
      "director",
      "WHERE",
      "name",
      "=",
      "``",
      "director_name0",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "nationality",
      "from",
      "director",
      "where",
      "name",
      "=",
      "value"
    ],
    "question":"What is the nationality of \" Kevin Spacey \" ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "nationality",
      "of",
      "``",
      "Kevin",
      "Spacey",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"director_name0\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.filter(col(\"name\") === col(\"\"director_name0\"\")).select(col(\"nationality\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT budget FROM movie WHERE title  =  \"Finding Nemo\";",
    "query_toks":[
      "SELECT",
      "budget",
      "FROM",
      "movie",
      "WHERE",
      "title",
      "=",
      "``",
      "Finding",
      "Nemo",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "budget",
      "from",
      "movie",
      "where",
      "title",
      "=",
      "value"
    ],
    "question":"How much was the budget of \" Finding Nemo \"",
    "question_toks":[
      "How",
      "much",
      "was",
      "the",
      "budget",
      "of",
      "``",
      "Finding",
      "Nemo",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"Finding Nemo\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"movie.filter(col(\"title\") === col(\"\"Finding Nemo\"\")).select(col(\"budget\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\" AND t3.release_year  >  2006;",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Steven",
      "Spielberg",
      "''",
      "AND",
      "t3.release_year",
      ">",
      "2006",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "release_year",
      ">",
      "value"
    ],
    "question":"Find all movies directed by \" Steven Spielberg \" after 2006",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "directed",
      "by",
      "``",
      "Steven",
      "Spielberg",
      "``",
      "after",
      "2006"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Steven Spielberg\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2006.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(director(\"name\") === col(\"\"Steven Spielberg\"\") && movie(\"release_year\") > 2006).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t3.title",
      "=",
      "``",
      "James",
      "Bond",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Who is the director of the movie \" James Bond \" ?",
    "question_toks":[
      "Who",
      "is",
      "the",
      "director",
      "of",
      "the",
      "movie",
      "``",
      "James",
      "Bond",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"James Bond\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(movie(\"title\") === col(\"\"James Bond\"\")).select(director(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t3.title",
      "=",
      "``",
      "James",
      "Bond",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Who directed the movie \" James Bond \" ?",
    "question_toks":[
      "Who",
      "directed",
      "the",
      "movie",
      "``",
      "James",
      "Bond",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"James Bond\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(movie(\"title\") === col(\"\"James Bond\"\")).select(director(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t3.title",
      "=",
      "``",
      "James",
      "Bond",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"List \" James Bond \" directors",
    "question_toks":[
      "List",
      "``",
      "James",
      "Bond",
      "``",
      "directors"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"James Bond\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(movie(\"title\") === col(\"\"James Bond\"\")).select(director(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t2.role",
      "=",
      "``",
      "Alan",
      "Turing",
      "''",
      "AND",
      "t3.title",
      "=",
      "``",
      "The",
      "Imitation",
      "Game",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "role",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Find the actor who played \" Alan Turing \" in the movie \" The Imitation Game \"",
    "question_toks":[
      "Find",
      "the",
      "actor",
      "who",
      "played",
      "``",
      "Alan",
      "Turing",
      "``",
      "in",
      "the",
      "movie",
      "``",
      "The",
      "Imitation",
      "Game",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Alan Turing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"The Imitation Game\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(CAST(\"role\") === col(\"\"Alan Turing\"\") && movie(\"title\") === col(\"\"The Imitation Game\"\")).select(actor(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t2.role",
      "=",
      "``",
      "Alan",
      "Turing",
      "''",
      "AND",
      "t3.title",
      "=",
      "``",
      "The",
      "Imitation",
      "Game",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "role",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Who acted \" Alan Turing \" in the movie \" The Imitation Game \" ?",
    "question_toks":[
      "Who",
      "acted",
      "``",
      "Alan",
      "Turing",
      "``",
      "in",
      "the",
      "movie",
      "``",
      "The",
      "Imitation",
      "Game",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Alan Turing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"The Imitation Game\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(CAST(\"role\") === col(\"\"Alan Turing\"\") && movie(\"title\") === col(\"\"The Imitation Game\"\")).select(actor(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t2.role",
      "=",
      "``",
      "Alan",
      "Turing",
      "''",
      "AND",
      "t3.title",
      "=",
      "``",
      "The",
      "Imitation",
      "Game",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "role",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Who was the actor that played \" Alan Turing \" in the movie \" The Imitation Game \" ?",
    "question_toks":[
      "Who",
      "was",
      "the",
      "actor",
      "that",
      "played",
      "``",
      "Alan",
      "Turing",
      "``",
      "in",
      "the",
      "movie",
      "``",
      "The",
      "Imitation",
      "Game",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Alan Turing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"The Imitation Game\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(CAST(\"role\") === col(\"\"Alan Turing\"\") && movie(\"title\") === col(\"\"The Imitation Game\"\")).select(actor(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t2.role",
      "=",
      "``",
      "Alan",
      "Turing",
      "''",
      "AND",
      "t3.title",
      "=",
      "``",
      "The",
      "Imitation",
      "Game",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "role",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?",
    "question_toks":[
      "Who",
      "acts",
      "as",
      "``",
      "Alan",
      "Turing",
      "``",
      "in",
      "the",
      "movie",
      "``",
      "The",
      "Imitation",
      "Game",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Alan Turing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"The Imitation Game\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(CAST(\"role\") === col(\"\"Alan Turing\"\") && movie(\"title\") === col(\"\"The Imitation Game\"\")).select(actor(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t2.role",
      "=",
      "``",
      "Alan",
      "Turing",
      "''",
      "AND",
      "t3.title",
      "=",
      "``",
      "The",
      "Imitation",
      "Game",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "role",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?",
    "question_toks":[
      "Who",
      "is",
      "the",
      "actor",
      "playing",
      "``",
      "Alan",
      "Turing",
      "``",
      "in",
      "``",
      "The",
      "Imitation",
      "Game",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Alan Turing\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"The Imitation Game\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(CAST(\"role\") === col(\"\"Alan Turing\"\") && movie(\"title\") === col(\"\"The Imitation Game\"\")).select(actor(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"Jurassic Park\";",
    "query_toks":[
      "SELECT",
      "t2.genre",
      "FROM",
      "genre",
      "AS",
      "t2",
      "JOIN",
      "classification",
      "AS",
      "t1",
      "ON",
      "t2.gid",
      "=",
      "t1.gid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t3.title",
      "=",
      "``",
      "Jurassic",
      "Park",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "genre",
      "from",
      "genre",
      "as",
      "t2",
      "join",
      "classification",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "gid",
      "=",
      "t1",
      ".",
      "gid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"What is the genre of the movie \" Jurassic Park \" ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "genre",
      "of",
      "the",
      "movie",
      "``",
      "Jurassic",
      "Park",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"Jurassic Park\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"genre.join(classification, genre(\"gid\") === classification(\"gid\"), inner).join(movie, movie(\"mid\") === classification(\"msid\"), inner).filter(movie(\"title\") === col(\"\"Jurassic Park\"\")).select(genre(\"genre\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t3.release_year",
      "=",
      "2015",
      "AND",
      "t3.title",
      "=",
      "``",
      "Joy",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t3",
      ".",
      "release_year",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Who was the director of the movie Joy from 2015 ?",
    "question_toks":[
      "Who",
      "was",
      "the",
      "director",
      "of",
      "the",
      "movie",
      "Joy",
      "from",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2015.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"Joy\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(movie(\"release_year\") === 2015 && movie(\"title\") === col(\"\"Joy\"\")).select(director(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\";",
    "query_toks":[
      "SELECT",
      "t1.title",
      "FROM",
      "written_by",
      "AS",
      "t3",
      "JOIN",
      "movie",
      "AS",
      "t1",
      "ON",
      "t3.msid",
      "=",
      "t1.mid",
      "JOIN",
      "writer",
      "AS",
      "t2",
      "ON",
      "t3.wid",
      "=",
      "t2.wid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Matt",
      "Damon",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "title",
      "from",
      "written_by",
      "as",
      "t3",
      "join",
      "movie",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "msid",
      "=",
      "t1",
      ".",
      "mid",
      "join",
      "writer",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "wid",
      "=",
      "t2",
      ".",
      "wid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all movies written by \" Matt Damon \"",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "written",
      "by",
      "``",
      "Matt",
      "Damon",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                65,
                false
              ],
              null
            ],
            [
              0,
              42,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            15
          ],
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              59,
              false
            ],
            null
          ],
          "\"Matt Damon\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"written_by.join(movie, written_by(\"msid\") === movie(\"mid\"), inner).join(writer, written_by(\"wid\") === writer(\"wid\"), inner).filter(writer(\"name\") === col(\"\"Matt Damon\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\";",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "movie",
      "AS",
      "t2",
      "JOIN",
      "made_by",
      "AS",
      "t3",
      "ON",
      "t2.mid",
      "=",
      "t3.msid",
      "JOIN",
      "producer",
      "AS",
      "t1",
      "ON",
      "t1.pid",
      "=",
      "t3.pid",
      "JOIN",
      "written_by",
      "AS",
      "t5",
      "ON",
      "t5.msid",
      "=",
      "t2.mid",
      "JOIN",
      "writer",
      "AS",
      "t4",
      "ON",
      "t5.wid",
      "=",
      "t4.wid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Woody",
      "Allen",
      "''",
      "AND",
      "t4.name",
      "=",
      "``",
      "Woody",
      "Allen",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "movie",
      "as",
      "t2",
      "join",
      "made_by",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "join",
      "producer",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "join",
      "written_by",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "msid",
      "=",
      "t2",
      ".",
      "mid",
      "join",
      "writer",
      "as",
      "t4",
      "on",
      "t5",
      ".",
      "wid",
      "=",
      "t4",
      ".",
      "wid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all movies written and produced by \" Woody Allen \"",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "written",
      "and",
      "produced",
      "by",
      "``",
      "Woody",
      "Allen",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ],
            [
              0,
              40,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            10
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          "\"Woody Allen\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              59,
              false
            ],
            null
          ],
          "\"Woody Allen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"movie.join(made_by, movie(\"mid\") === made_by(\"msid\"), inner).join(producer, producer(\"pid\") === made_by(\"pid\"), inner).join(written_by, written_by(\"msid\") === movie(\"mid\"), inner).join(writer, written_by(\"wid\") === writer(\"wid\"), inner).filter(producer(\"name\") === col(\"\"Woody Allen\"\") && writer(\"name\") === col(\"\"Woody Allen\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t2",
      "ON",
      "t2.mid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Robin",
      "Wright",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all movies featuring \" Robin Wright \"",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "featuring",
      "``",
      "Robin",
      "Wright",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Robin Wright\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Robin Wright\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t2",
      "ON",
      "t2.mid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Robin",
      "Wright",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"What are all the movies featuring \" Robin Wright \" ?",
    "question_toks":[
      "What",
      "are",
      "all",
      "the",
      "movies",
      "featuring",
      "``",
      "Robin",
      "Wright",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Robin Wright\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Robin Wright\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t2",
      "ON",
      "t2.mid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Robin",
      "Wright",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all movies in which \" Robin Wright \" appears",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "in",
      "which",
      "``",
      "Robin",
      "Wright",
      "``",
      "appears"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Robin Wright\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Robin Wright\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";",
    "query_toks":[
      "SELECT",
      "budget",
      "FROM",
      "movie",
      "WHERE",
      "release_year",
      "=",
      "2007",
      "AND",
      "title",
      "=",
      "``",
      "Juno",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "budget",
      "from",
      "movie",
      "where",
      "release_year",
      "=",
      "value",
      "and",
      "title",
      "=",
      "value"
    ],
    "question":"What was the budget of the movie Juno from 2007 ?",
    "question_toks":[
      "What",
      "was",
      "the",
      "budget",
      "of",
      "the",
      "movie",
      "Juno",
      "from",
      "2007",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2007.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"Juno\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"movie.filter(col(\"release_year\") === 2007 && col(\"title\") === col(\"\"Juno\"\")).select(col(\"budget\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "genre",
      "AS",
      "t2",
      "JOIN",
      "classification",
      "AS",
      "t1",
      "ON",
      "t2.gid",
      "=",
      "t1.gid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t2.genre",
      "=",
      "``",
      "Sci-Fi",
      "''",
      "AND",
      "t3.release_year",
      "=",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "genre",
      "as",
      "t2",
      "join",
      "classification",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "gid",
      "=",
      "t1",
      ".",
      "gid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "genre",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "release_year",
      "=",
      "value"
    ],
    "question":"Find all Sci-Fi produced in year 2010",
    "question_toks":[
      "Find",
      "all",
      "Sci-Fi",
      "produced",
      "in",
      "year",
      "2010"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"Sci-Fi\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"genre.join(classification, genre(\"gid\") === classification(\"gid\"), inner).join(movie, movie(\"mid\") === classification(\"msid\"), inner).filter(genre(\"genre\") === col(\"\"Sci-Fi\"\") && movie(\"release_year\") === 2010).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "genre",
      "AS",
      "t2",
      "JOIN",
      "classification",
      "AS",
      "t1",
      "ON",
      "t2.gid",
      "=",
      "t1.gid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t2.genre",
      "=",
      "``",
      "Sci-Fi",
      "''",
      "AND",
      "t3.release_year",
      "=",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "genre",
      "as",
      "t2",
      "join",
      "classification",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "gid",
      "=",
      "t1",
      ".",
      "gid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "genre",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "release_year",
      "=",
      "value"
    ],
    "question":"List all the Sci-Fi movies which released in 2010",
    "question_toks":[
      "List",
      "all",
      "the",
      "Sci-Fi",
      "movies",
      "which",
      "released",
      "in",
      "2010"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"Sci-Fi\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"genre.join(classification, genre(\"gid\") === classification(\"gid\"), inner).join(movie, movie(\"mid\") === classification(\"msid\"), inner).filter(genre(\"genre\") === col(\"\"Sci-Fi\"\") && movie(\"release_year\") === 2010).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "birth_city",
      "=",
      "``",
      "Austin",
      "''",
      "AND",
      "birth_year",
      ">",
      "1980",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "birth_city",
      "=",
      "value",
      "and",
      "birth_year",
      ">",
      "value"
    ],
    "question":"Find all actors born in \" Austin \" after 1980",
    "question_toks":[
      "Find",
      "all",
      "actors",
      "born",
      "in",
      "``",
      "Austin",
      "``",
      "after",
      "1980"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Austin\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_city\") === col(\"\"Austin\"\") && col(\"birth_year\") > 1980).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "birth_city",
      "=",
      "``",
      "Austin",
      "''",
      "AND",
      "birth_year",
      ">",
      "1980",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "birth_city",
      "=",
      "value",
      "and",
      "birth_year",
      ">",
      "value"
    ],
    "question":"Who are the actors born in \" Austin \" after 1980 ?",
    "question_toks":[
      "Who",
      "are",
      "the",
      "actors",
      "born",
      "in",
      "``",
      "Austin",
      "``",
      "after",
      "1980",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Austin\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_city\") === col(\"\"Austin\"\") && col(\"birth_year\") > 1980).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "birth_city",
      "=",
      "``",
      "Austin",
      "''",
      "AND",
      "birth_year",
      ">",
      "1980",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "birth_city",
      "=",
      "value",
      "and",
      "birth_year",
      ">",
      "value"
    ],
    "question":"Find all actors from Austin born after 1980",
    "question_toks":[
      "Find",
      "all",
      "actors",
      "from",
      "Austin",
      "born",
      "after",
      "1980"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Austin\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_city\") === col(\"\"Austin\"\") && col(\"birth_year\") > 1980).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.birth_city  =  \"Los Angeles\";",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t2.birth_city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "birth_city",
      "=",
      "value"
    ],
    "question":"Find all movies by directors born in \" Los Angeles \"",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "by",
      "directors",
      "born",
      "in",
      "``",
      "Los",
      "Angeles",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(director(\"birth_city\") === col(\"\"Los Angeles\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "birth_city",
      "=",
      "``",
      "New",
      "York",
      "City",
      "''",
      "AND",
      "birth_year",
      "=",
      "1984",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "birth_city",
      "=",
      "value",
      "and",
      "birth_year",
      "=",
      "value"
    ],
    "question":"Find all actors who were born in \" New York City \" in 1984",
    "question_toks":[
      "Find",
      "all",
      "actors",
      "who",
      "were",
      "born",
      "in",
      "``",
      "New",
      "York",
      "City",
      "``",
      "in",
      "1984"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"New York City\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          1984.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_city\") === col(\"\"New York City\"\") && col(\"birth_year\") === 1984).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "tags",
      "AS",
      "t2",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t2.kid",
      "=",
      "t1.id",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t2.msid",
      "=",
      "t3.mid",
      "WHERE",
      "t1.keyword",
      "=",
      "``",
      "nuclear",
      "weapons",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "tags",
      "as",
      "t2",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "id",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "msid",
      "=",
      "t3",
      ".",
      "mid",
      "where",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"Find all movies about nuclear weapons",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "about",
      "nuclear",
      "weapons"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ],
            [
              0,
              37,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"nuclear weapons\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"tags.join(keyword, tags(\"kid\") === keyword(\"id\"), inner).join(movie, tags(\"msid\") === movie(\"mid\"), inner).filter(keyword(\"keyword\") === col(\"\"nuclear weapons\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "tags",
      "AS",
      "t2",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t2.kid",
      "=",
      "t1.id",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t2.msid",
      "=",
      "t3.mid",
      "WHERE",
      "t1.keyword",
      "=",
      "``",
      "nuclear",
      "weapons",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "tags",
      "as",
      "t2",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "id",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "msid",
      "=",
      "t3",
      ".",
      "mid",
      "where",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"What are the movies related to nuclear weapons",
    "question_toks":[
      "What",
      "are",
      "the",
      "movies",
      "related",
      "to",
      "nuclear",
      "weapons"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ],
            [
              0,
              37,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"nuclear weapons\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"tags.join(keyword, tags(\"kid\") === keyword(\"id\"), inner).join(movie, tags(\"msid\") === movie(\"mid\"), inner).filter(keyword(\"keyword\") === col(\"\"nuclear weapons\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Alfred Hitchcock\";",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Alfred",
      "Hitchcock",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Which movies did \" Alfred Hitchcock \" direct ?",
    "question_toks":[
      "Which",
      "movies",
      "did",
      "``",
      "Alfred",
      "Hitchcock",
      "``",
      "direct",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Alfred Hitchcock\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(director(\"name\") === col(\"\"Alfred Hitchcock\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "CAST",
      "AS",
      "t5",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t5.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t4",
      "ON",
      "t4.mid",
      "=",
      "t5.msid",
      "JOIN",
      "directed_by",
      "AS",
      "t2",
      "ON",
      "t4.mid",
      "=",
      "t2.msid",
      "JOIN",
      "director",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t2.did",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Taraneh",
      "Alidoosti",
      "''",
      "AND",
      "t3.name",
      "=",
      "``",
      "Asghar",
      "Farhadi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t5",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t5",
      ".",
      "msid",
      "join",
      "directed_by",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "join",
      "director",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "directed",
      "by",
      "``",
      "Asghar",
      "Farhadi",
      "``",
      "and",
      "featuring",
      "``",
      "Taraneh",
      "Alidoosti",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Taraneh Alidoosti\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Asghar Farhadi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(directed_by, movie(\"mid\") === directed_by(\"msid\"), inner).join(director, director(\"did\") === directed_by(\"did\"), inner).filter(actor(\"name\") === col(\"\"Taraneh Alidoosti\"\") && director(\"name\") === col(\"\"Asghar Farhadi\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "CAST",
      "AS",
      "t5",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t5.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t4",
      "ON",
      "t4.mid",
      "=",
      "t5.msid",
      "JOIN",
      "directed_by",
      "AS",
      "t2",
      "ON",
      "t4.mid",
      "=",
      "t2.msid",
      "JOIN",
      "director",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t2.did",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Taraneh",
      "Alidoosti",
      "''",
      "AND",
      "t3.name",
      "=",
      "``",
      "Asghar",
      "Farhadi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t5",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t5",
      ".",
      "msid",
      "join",
      "directed_by",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "join",
      "director",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?",
    "question_toks":[
      "What",
      "are",
      "all",
      "the",
      "movies",
      "directed",
      "by",
      "``",
      "Asghar",
      "Farhadi",
      "``",
      "featuring",
      "``",
      "Taraneh",
      "Alidoosti",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Taraneh Alidoosti\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Asghar Farhadi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(directed_by, movie(\"mid\") === directed_by(\"msid\"), inner).join(director, director(\"did\") === directed_by(\"did\"), inner).filter(actor(\"name\") === col(\"\"Taraneh Alidoosti\"\") && director(\"name\") === col(\"\"Asghar Farhadi\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "CAST",
      "AS",
      "t5",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t5.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t4",
      "ON",
      "t4.mid",
      "=",
      "t5.msid",
      "JOIN",
      "directed_by",
      "AS",
      "t2",
      "ON",
      "t4.mid",
      "=",
      "t2.msid",
      "JOIN",
      "director",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t2.did",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Taraneh",
      "Alidoosti",
      "''",
      "AND",
      "t3.name",
      "=",
      "``",
      "Asghar",
      "Farhadi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t5",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t5",
      ".",
      "msid",
      "join",
      "directed_by",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "join",
      "director",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many movies are there that are directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \" ?",
    "question_toks":[
      "How",
      "many",
      "movies",
      "are",
      "there",
      "that",
      "are",
      "directed",
      "by",
      "``",
      "Asghar",
      "Farhadi",
      "``",
      "and",
      "featuring",
      "``",
      "Taraneh",
      "Alidoosti",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Taraneh Alidoosti\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Asghar Farhadi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(directed_by, movie(\"mid\") === directed_by(\"msid\"), inner).join(director, director(\"did\") === directed_by(\"did\"), inner).filter(actor(\"name\") === col(\"\"Taraneh Alidoosti\"\") && director(\"name\") === col(\"\"Asghar Farhadi\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "CAST",
      "AS",
      "t5",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t5.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t4",
      "ON",
      "t4.mid",
      "=",
      "t5.msid",
      "JOIN",
      "directed_by",
      "AS",
      "t2",
      "ON",
      "t4.mid",
      "=",
      "t2.msid",
      "JOIN",
      "director",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t2.did",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Taraneh",
      "Alidoosti",
      "''",
      "AND",
      "t3.name",
      "=",
      "``",
      "Asghar",
      "Farhadi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t5",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t5",
      ".",
      "msid",
      "join",
      "directed_by",
      "as",
      "t2",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "join",
      "director",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played",
    "question_toks":[
      "List",
      "all",
      "the",
      "movies",
      "directed",
      "by",
      "``",
      "Asghar",
      "Farhadi",
      "``",
      "in",
      "which",
      "``",
      "Taraneh",
      "Alidoosti",
      "``",
      "played"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Taraneh Alidoosti\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Asghar Farhadi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(directed_by, movie(\"mid\") === directed_by(\"msid\"), inner).join(director, director(\"did\") === directed_by(\"did\"), inner).filter(actor(\"name\") === col(\"\"Taraneh Alidoosti\"\") && director(\"name\") === col(\"\"Asghar Farhadi\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Shonda Rhimes\";",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "producer",
      "AS",
      "t1",
      "JOIN",
      "made_by",
      "AS",
      "t3",
      "ON",
      "t1.pid",
      "=",
      "t3.pid",
      "JOIN",
      "tv_series",
      "AS",
      "t2",
      "ON",
      "t2.sid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Shonda",
      "Rhimes",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "producer",
      "as",
      "t1",
      "join",
      "made_by",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "pid",
      "=",
      "t3",
      ".",
      "pid",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "sid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"What are all the tv series created by \" Shonda Rhimes \" ?",
    "question_toks":[
      "What",
      "are",
      "all",
      "the",
      "tv",
      "series",
      "created",
      "by",
      "``",
      "Shonda",
      "Rhimes",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            10
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                51,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          "\"Shonda Rhimes\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"producer.join(made_by, producer(\"pid\") === made_by(\"pid\"), inner).join(tv_series, tv_series(\"sid\") === made_by(\"msid\"), inner).filter(producer(\"name\") === col(\"\"Shonda Rhimes\"\")).select(tv_series(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  \"Olivia Pope\" AND t2.title  =  \"Scandal\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "tv_series",
      "AS",
      "t2",
      "ON",
      "t2.sid",
      "=",
      "t3.msid",
      "WHERE",
      "t3.role",
      "=",
      "``",
      "Olivia",
      "Pope",
      "''",
      "AND",
      "t2.title",
      "=",
      "``",
      "Scandal",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "sid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t3",
      ".",
      "role",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Who acts \" Olivia Pope \" in the series Scandal ?",
    "question_toks":[
      "Who",
      "acts",
      "``",
      "Olivia",
      "Pope",
      "``",
      "in",
      "the",
      "series",
      "Scandal",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Olivia Pope\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              51,
              false
            ],
            null
          ],
          "\"Scandal\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(tv_series, tv_series(\"sid\") === CAST(\"msid\"), inner).filter(CAST(\"role\") === col(\"\"Olivia Pope\"\") && tv_series(\"title\") === col(\"\"Scandal\"\")).select(actor(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "written_by",
      "AS",
      "t3",
      "JOIN",
      "movie",
      "AS",
      "t1",
      "ON",
      "t3.msid",
      "=",
      "t1.mid",
      "JOIN",
      "writer",
      "AS",
      "t2",
      "ON",
      "t3.wid",
      "=",
      "t2.wid",
      "WHERE",
      "t1.title",
      "=",
      "``",
      "The",
      "Truman",
      "Show",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "written_by",
      "as",
      "t3",
      "join",
      "movie",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "msid",
      "=",
      "t1",
      ".",
      "mid",
      "join",
      "writer",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "wid",
      "=",
      "t2",
      ".",
      "wid",
      "where",
      "t1",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Who is the writer of the movie \" The Truman Show \"",
    "question_toks":[
      "Who",
      "is",
      "the",
      "writer",
      "of",
      "the",
      "movie",
      "``",
      "The",
      "Truman",
      "Show",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                65,
                false
              ],
              null
            ],
            [
              0,
              42,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            15
          ],
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"The Truman Show\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"written_by.join(movie, written_by(\"msid\") === movie(\"mid\"), inner).join(writer, written_by(\"wid\") === writer(\"wid\"), inner).filter(movie(\"title\") === col(\"\"The Truman Show\"\")).select(writer(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "written_by",
      "AS",
      "t3",
      "JOIN",
      "movie",
      "AS",
      "t1",
      "ON",
      "t3.msid",
      "=",
      "t1.mid",
      "JOIN",
      "writer",
      "AS",
      "t2",
      "ON",
      "t3.wid",
      "=",
      "t2.wid",
      "WHERE",
      "t1.title",
      "=",
      "``",
      "The",
      "Truman",
      "Show",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "written_by",
      "as",
      "t3",
      "join",
      "movie",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "msid",
      "=",
      "t1",
      ".",
      "mid",
      "join",
      "writer",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "wid",
      "=",
      "t2",
      ".",
      "wid",
      "where",
      "t1",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Who is the writer of \" The Truman Show \"",
    "question_toks":[
      "Who",
      "is",
      "the",
      "writer",
      "of",
      "``",
      "The",
      "Truman",
      "Show",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                65,
                false
              ],
              null
            ],
            [
              0,
              42,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            15
          ],
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"The Truman Show\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"written_by.join(movie, written_by(\"msid\") === movie(\"mid\"), inner).join(writer, written_by(\"wid\") === writer(\"wid\"), inner).filter(movie(\"title\") === col(\"\"The Truman Show\"\")).select(writer(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "tv_series",
      "AS",
      "t2",
      "ON",
      "t2.sid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Scott",
      "Foley",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "sid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"What are the series featuring \" Scott Foley \" ?",
    "question_toks":[
      "What",
      "are",
      "the",
      "series",
      "featuring",
      "``",
      "Scott",
      "Foley",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                51,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Scott Foley\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(tv_series, tv_series(\"sid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Scott Foley\"\")).select(tv_series(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "tv_series",
      "AS",
      "t2",
      "ON",
      "t2.sid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Scott",
      "Foley",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "sid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"What are the series in which \" Scott Foley \" is an actor ?",
    "question_toks":[
      "What",
      "are",
      "the",
      "series",
      "in",
      "which",
      "``",
      "Scott",
      "Foley",
      "``",
      "is",
      "an",
      "actor",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                51,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Scott Foley\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(tv_series, tv_series(\"sid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Scott Foley\"\")).select(tv_series(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Kate Winslet\";",
    "query_toks":[
      "SELECT",
      "t3.name",
      "FROM",
      "CAST",
      "AS",
      "t4",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t5",
      "ON",
      "t5.mid",
      "=",
      "t4.msid",
      "JOIN",
      "directed_by",
      "AS",
      "t2",
      "ON",
      "t5.mid",
      "=",
      "t2.msid",
      "JOIN",
      "director",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t2.did",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Kate",
      "Winslet",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t4",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "mid",
      "=",
      "t4",
      ".",
      "msid",
      "join",
      "directed_by",
      "as",
      "t2",
      "on",
      "t5",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "join",
      "director",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find the directors of all movies featuring \" Kate Winslet \"",
    "question_toks":[
      "Find",
      "the",
      "directors",
      "of",
      "all",
      "movies",
      "featuring",
      "``",
      "Kate",
      "Winslet",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Kate Winslet\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(directed_by, movie(\"mid\") === directed_by(\"msid\"), inner).join(director, director(\"did\") === directed_by(\"did\"), inner).filter(actor(\"name\") === col(\"\"Kate Winslet\"\")).select(director(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid  =  t2.aid JOIN movie AS t5 ON t5.mid  =  t3.msid JOIN made_by AS t4 ON t5.mid  =  t4.msid JOIN producer AS t1 ON t1.pid  =  t4.pid WHERE t2.name  =  \"Kate Winslet\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "JOIN",
      "movie",
      "AS",
      "t5",
      "ON",
      "t5.mid",
      "=",
      "t3.msid",
      "JOIN",
      "made_by",
      "AS",
      "t4",
      "ON",
      "t5.mid",
      "=",
      "t4.msid",
      "JOIN",
      "producer",
      "AS",
      "t1",
      "ON",
      "t1.pid",
      "=",
      "t4.pid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Kate",
      "Winslet",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "join",
      "made_by",
      "as",
      "t4",
      "on",
      "t5",
      ".",
      "mid",
      "=",
      "t4",
      ".",
      "msid",
      "join",
      "producer",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "pid",
      "=",
      "t4",
      ".",
      "pid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find the producers of all movies in which \" Kate Winslet \" is an actor",
    "question_toks":[
      "Find",
      "the",
      "producers",
      "of",
      "all",
      "movies",
      "in",
      "which",
      "``",
      "Kate",
      "Winslet",
      "``",
      "is",
      "an",
      "actor"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Kate Winslet\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(made_by, movie(\"mid\") === made_by(\"msid\"), inner).join(producer, producer(\"pid\") === made_by(\"pid\"), inner).filter(actor(\"name\") === col(\"\"Kate Winslet\"\")).select(producer(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";",
    "query_toks":[
      "SELECT",
      "t2.name",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "tv_series",
      "AS",
      "t3",
      "ON",
      "t3.sid",
      "=",
      "t1.msid",
      "WHERE",
      "t3.release_year",
      "=",
      "2013",
      "AND",
      "t3.title",
      "=",
      "``",
      "House",
      "of",
      "Cards",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "name",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "tv_series",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "sid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t3",
      ".",
      "release_year",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Who is the director of the tv series \" House of Cards \" from 2013 ?",
    "question_toks":[
      "Who",
      "is",
      "the",
      "director",
      "of",
      "the",
      "tv",
      "series",
      "``",
      "House",
      "of",
      "Cards",
      "``",
      "from",
      "2013",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              52,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              51,
              false
            ],
            null
          ],
          "\"House of Cards\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(tv_series, tv_series(\"sid\") === directed_by(\"msid\"), inner).filter(tv_series(\"release_year\") === 2013 && tv_series(\"title\") === col(\"\"House of Cards\"\")).select(director(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND gender  =  \"female\";",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "birth_city",
      "=",
      "``",
      "Austin",
      "''",
      "AND",
      "gender",
      "=",
      "``",
      "female",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "birth_city",
      "=",
      "value",
      "and",
      "gender",
      "=",
      "value"
    ],
    "question":"Find all the female actors from Austin",
    "question_toks":[
      "Find",
      "all",
      "the",
      "female",
      "actors",
      "from",
      "Austin"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Austin\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"female\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_city\") === col(\"\"Austin\"\") && col(\"gender\") === col(\"\"female\"\")).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  \"Italy\";",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "birth_year",
      ">",
      "1980",
      "AND",
      "nationality",
      "=",
      "``",
      "Italy",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "birth_year",
      ">",
      "value",
      "and",
      "nationality",
      "=",
      "value"
    ],
    "question":"Find all actors from Italy born after 1980",
    "question_toks":[
      "Find",
      "all",
      "actors",
      "from",
      "Italy",
      "born",
      "after",
      "1980"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          1980.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Italy\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_year\") > 1980 && col(\"nationality\") === col(\"\"Italy\"\")).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "actor",
      "WHERE",
      "birth_city",
      "=",
      "``",
      "New",
      "York",
      "City",
      "''",
      "AND",
      "birth_year",
      ">",
      "1980",
      "AND",
      "gender",
      "=",
      "``",
      "female",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "actor",
      "where",
      "birth_city",
      "=",
      "value",
      "and",
      "birth_year",
      ">",
      "value",
      "and",
      "gender",
      "=",
      "value"
    ],
    "question":"Find all the female actors born in \" New York City \" after 1980",
    "question_toks":[
      "Find",
      "all",
      "the",
      "female",
      "actors",
      "born",
      "in",
      "``",
      "New",
      "York",
      "City",
      "``",
      "after",
      "1980"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"New York City\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          1980.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"female\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_city\") === col(\"\"New York City\"\") && col(\"birth_year\") > 1980 && col(\"gender\") === col(\"\"female\"\")).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  \"female\" AND t3.title  =  \"Saving Private Ryan\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t1.gender",
      "=",
      "``",
      "female",
      "''",
      "AND",
      "t3.title",
      "=",
      "``",
      "Saving",
      "Private",
      "Ryan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "gender",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Find all the female actors in the movie \" Saving Private Ryan \"",
    "question_toks":[
      "Find",
      "all",
      "the",
      "female",
      "actors",
      "in",
      "the",
      "movie",
      "``",
      "Saving",
      "Private",
      "Ryan",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"female\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"Saving Private Ryan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"gender\") === col(\"\"female\"\") && movie(\"title\") === col(\"\"Saving Private Ryan\"\")).select(actor(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT name FROM director WHERE nationality  =  \"Afghanistan\";",
    "query_toks":[
      "SELECT",
      "name",
      "FROM",
      "director",
      "WHERE",
      "nationality",
      "=",
      "``",
      "Afghanistan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "name",
      "from",
      "director",
      "where",
      "nationality",
      "=",
      "value"
    ],
    "question":"Find all the directors who are from Afghanistan",
    "question_toks":[
      "Find",
      "all",
      "the",
      "directors",
      "who",
      "are",
      "from",
      "Afghanistan"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"Afghanistan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.filter(col(\"nationality\") === col(\"\"Afghanistan\"\")).select(col(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Camp X-Ray\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t3.title",
      "=",
      "``",
      "Camp",
      "X-Ray",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Find the actors who played in the movie \" Camp X-Ray \"",
    "question_toks":[
      "Find",
      "the",
      "actors",
      "who",
      "played",
      "in",
      "the",
      "movie",
      "``",
      "Camp",
      "X-Ray",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"Camp X-Ray\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(movie(\"title\") === col(\"\"Camp X-Ray\"\")).select(actor(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"Canada\" AND t3.title  =  \"James Bond\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t1.nationality",
      "=",
      "``",
      "Canada",
      "''",
      "AND",
      "t3.title",
      "=",
      "``",
      "James",
      "Bond",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "nationality",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"Find all actors from Canada who acted in \" James Bond \" movies",
    "question_toks":[
      "Find",
      "all",
      "actors",
      "from",
      "Canada",
      "who",
      "acted",
      "in",
      "``",
      "James",
      "Bond",
      "``",
      "movies"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Canada\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"James Bond\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"nationality\") === col(\"\"Canada\"\") && movie(\"title\") === col(\"\"James Bond\"\")).select(actor(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Rowan Atkinson\" AND t3.role  =  \"Mr. Bean\";",
    "query_toks":[
      "SELECT",
      "t2.title",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t2",
      "ON",
      "t2.mid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Rowan",
      "Atkinson",
      "''",
      "AND",
      "t3.role",
      "=",
      "``",
      "Mr.",
      "Bean",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "role",
      "=",
      "value"
    ],
    "question":"find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"",
    "question_toks":[
      "find",
      "all",
      "films",
      "in",
      "which",
      "``",
      "Rowan",
      "Atkinson",
      "``",
      "acted",
      "as",
      "``",
      "Mr.",
      "Bean",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Rowan Atkinson\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Mr. Bean\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Rowan Atkinson\"\") && CAST(\"role\") === col(\"\"Mr. Bean\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"The Past\";",
    "query_toks":[
      "SELECT",
      "t2.birth_city",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t3.title",
      "=",
      "``",
      "The",
      "Past",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "birth_city",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"where is the director of \" The Past \" from",
    "question_toks":[
      "where",
      "is",
      "the",
      "director",
      "of",
      "``",
      "The",
      "Past",
      "``",
      "from"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"The Past\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(movie(\"title\") === col(\"\"The Past\"\")).select(director(\"birth_city\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  \"Mr. Bean\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "WHERE",
      "t2.role",
      "=",
      "``",
      "Mr.",
      "Bean",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "role",
      "=",
      "value"
    ],
    "question":"who acted the role of \" Mr. Bean \"",
    "question_toks":[
      "who",
      "acted",
      "the",
      "role",
      "of",
      "``",
      "Mr.",
      "Bean",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Mr. Bean\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).filter(CAST(\"role\") === col(\"\"Mr. Bean\"\")).select(actor(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN classification AS t1 ON t4.mid  =  t1.msid JOIN genre AS t3 ON t3.gid  =  t1.gid WHERE t5.name  =  \"Asghar Farhadi\";",
    "query_toks":[
      "SELECT",
      "t3.genre",
      "FROM",
      "director",
      "AS",
      "t5",
      "JOIN",
      "directed_by",
      "AS",
      "t2",
      "ON",
      "t5.did",
      "=",
      "t2.did",
      "JOIN",
      "movie",
      "AS",
      "t4",
      "ON",
      "t4.mid",
      "=",
      "t2.msid",
      "JOIN",
      "classification",
      "AS",
      "t1",
      "ON",
      "t4.mid",
      "=",
      "t1.msid",
      "JOIN",
      "genre",
      "AS",
      "t3",
      "ON",
      "t3.gid",
      "=",
      "t1.gid",
      "WHERE",
      "t5.name",
      "=",
      "``",
      "Asghar",
      "Farhadi",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "genre",
      "from",
      "director",
      "as",
      "t5",
      "join",
      "directed_by",
      "as",
      "t2",
      "on",
      "t5",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "join",
      "classification",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "join",
      "genre",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "gid",
      "=",
      "t1",
      ".",
      "gid",
      "where",
      "t5",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"what are the genres of movies directed by \" Asghar Farhadi \"",
    "question_toks":[
      "what",
      "are",
      "the",
      "genres",
      "of",
      "movies",
      "directed",
      "by",
      "``",
      "Asghar",
      "Farhadi",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Asghar Farhadi\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).join(classification, movie(\"mid\") === classification(\"msid\"), inner).join(genre, genre(\"gid\") === classification(\"gid\"), inner).filter(director(\"name\") === col(\"\"Asghar Farhadi\"\")).select(genre(\"genre\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"Daffy Duck\";",
    "query_toks":[
      "SELECT",
      "t1.title",
      "FROM",
      "movie",
      "AS",
      "t1",
      "JOIN",
      "CAST",
      "AS",
      "t2",
      "ON",
      "t1.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t2.role",
      "=",
      "``",
      "Daffy",
      "Duck",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "title",
      "from",
      "movie",
      "as",
      "t1",
      "join",
      "cast",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "role",
      "=",
      "value"
    ],
    "question":"Which movie had the character \" Daffy Duck \"",
    "question_toks":[
      "Which",
      "movie",
      "had",
      "the",
      "character",
      "``",
      "Daffy",
      "Duck",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            11
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Daffy Duck\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"movie.join(CAST, movie(\"mid\") === CAST(\"msid\"), inner).filter(CAST(\"role\") === col(\"\"Daffy Duck\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Daddy Long Legs\";",
    "query_toks":[
      "SELECT",
      "t2.role",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t3.title",
      "=",
      "``",
      "Daddy",
      "Long",
      "Legs",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "role",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"What are the major roles in the movie \" Daddy Long Legs \"",
    "question_toks":[
      "What",
      "are",
      "the",
      "major",
      "roles",
      "in",
      "the",
      "movie",
      "``",
      "Daddy",
      "Long",
      "Legs",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"Daddy Long Legs\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(movie(\"title\") === col(\"\"Daddy Long Legs\"\")).select(CAST(\"role\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  \"nuclear weapons\";",
    "query_toks":[
      "SELECT",
      "t3.name",
      "FROM",
      "director",
      "AS",
      "t3",
      "JOIN",
      "directed_by",
      "AS",
      "t2",
      "ON",
      "t3.did",
      "=",
      "t2.did",
      "JOIN",
      "movie",
      "AS",
      "t4",
      "ON",
      "t4.mid",
      "=",
      "t2.msid",
      "JOIN",
      "tags",
      "AS",
      "t5",
      "ON",
      "t5.msid",
      "=",
      "t4.mid",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t5.kid",
      "=",
      "t1.id",
      "WHERE",
      "t1.keyword",
      "=",
      "``",
      "nuclear",
      "weapons",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "name",
      "from",
      "director",
      "as",
      "t3",
      "join",
      "directed_by",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "join",
      "tags",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "msid",
      "=",
      "t4",
      ".",
      "mid",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "id",
      "where",
      "t1",
      ".",
      "keyword",
      "=",
      "value"
    ],
    "question":"List all the directors of movies about nuclear weapons",
    "question_toks":[
      "List",
      "all",
      "the",
      "directors",
      "of",
      "movies",
      "about",
      "nuclear",
      "weapons"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"nuclear weapons\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).join(tags, tags(\"msid\") === movie(\"mid\"), inner).join(keyword, tags(\"kid\") === keyword(\"id\"), inner).filter(keyword(\"keyword\") === col(\"\"nuclear weapons\"\")).select(director(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Jennifer Aniston\" AND t2.release_year  >  2010;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t2",
      "ON",
      "t2.mid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Jennifer",
      "Aniston",
      "''",
      "AND",
      "t2.release_year",
      ">",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "release_year",
      ">",
      "value"
    ],
    "question":"What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "movies",
      "in",
      "which",
      "``",
      "Jennifer",
      "Aniston",
      "``",
      "acted",
      "after",
      "2010",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Jennifer Aniston\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Jennifer Aniston\"\") && movie(\"release_year\") > 2010).agg(COUNT(movie(\"title\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t3.title",
      "=",
      "``",
      "Saving",
      "Private",
      "Ryan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"What is the number of actors in the movie \" Saving Private Ryan \" ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "actors",
      "in",
      "the",
      "movie",
      "``",
      "Saving",
      "Private",
      "Ryan",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"Saving Private Ryan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(movie(\"title\") === col(\"\"Saving Private Ryan\"\")).agg(COUNT(actor(\"name\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t3.title",
      "=",
      "``",
      "Saving",
      "Private",
      "Ryan",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"How many actors are in the movie \" Saving Private Ryan \" ?",
    "question_toks":[
      "How",
      "many",
      "actors",
      "are",
      "in",
      "the",
      "movie",
      "``",
      "Saving",
      "Private",
      "Ryan",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"Saving Private Ryan\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(movie(\"title\") === col(\"\"Saving Private Ryan\"\")).agg(COUNT(actor(\"name\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.title",
      ")",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Steven",
      "Spielberg",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "title",
      ")",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many movies did \" Steven Spielberg \" direct ?",
    "question_toks":[
      "How",
      "many",
      "movies",
      "did",
      "``",
      "Steven",
      "Spielberg",
      "``",
      "direct",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Steven Spielberg\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(director(\"name\") === col(\"\"Steven Spielberg\"\")).agg(COUNT(movie(\"title\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "title",
      ")",
      "FROM",
      "movie",
      "WHERE",
      "release_year",
      "=",
      "2013",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "title",
      ")",
      "from",
      "movie",
      "where",
      "release_year",
      "=",
      "value"
    ],
    "question":"How many movies were produced in the year 2013 ?",
    "question_toks":[
      "How",
      "many",
      "movies",
      "were",
      "produced",
      "in",
      "the",
      "year",
      "2013",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2013.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"movie.filter(col(\"release_year\") === 2013).agg(COUNT(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "title",
      ")",
      "FROM",
      "movie",
      "WHERE",
      "release_year",
      "=",
      "2013",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "title",
      ")",
      "from",
      "movie",
      "where",
      "release_year",
      "=",
      "value"
    ],
    "question":"What is the number of movies produced in 2013 ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "movies",
      "produced",
      "in",
      "2013",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            11
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2013.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"movie.filter(col(\"release_year\") === 2013).agg(COUNT(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t2",
      "ON",
      "t2.mid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Shahab",
      "Hosseini",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many movies did \" Shahab Hosseini \" act in ?",
    "question_toks":[
      "How",
      "many",
      "movies",
      "did",
      "``",
      "Shahab",
      "Hosseini",
      "``",
      "act",
      "in",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Shahab Hosseini\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Shahab Hosseini\"\")).agg(COUNT(movie(\"title\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t2",
      "ON",
      "t2.mid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Shahab",
      "Hosseini",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"What is the number of movies in which \" Shahab Hosseini \" acted ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "movies",
      "in",
      "which",
      "``",
      "Shahab",
      "Hosseini",
      "``",
      "acted",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Shahab Hosseini\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Shahab Hosseini\"\")).agg(COUNT(movie(\"title\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t2",
      "ON",
      "t2.mid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Shahab",
      "Hosseini",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"What is the number of movies featuring \" Shahab Hosseini \" ?",
    "question_toks":[
      "What",
      "is",
      "the",
      "number",
      "of",
      "movies",
      "featuring",
      "``",
      "Shahab",
      "Hosseini",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Shahab Hosseini\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Shahab Hosseini\"\")).agg(COUNT(movie(\"title\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t2",
      "ON",
      "t2.mid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Shahab",
      "Hosseini",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"How many movies did \" Shahab Hosseini \" act in",
    "question_toks":[
      "How",
      "many",
      "movies",
      "did",
      "``",
      "Shahab",
      "Hosseini",
      "``",
      "act",
      "in"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Shahab Hosseini\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Shahab Hosseini\"\")).agg(COUNT(movie(\"title\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"Los Angeles\" AND birth_year  >  2000;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "name",
      ")",
      "FROM",
      "actor",
      "WHERE",
      "birth_city",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "birth_year",
      ">",
      "2000",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "name",
      ")",
      "from",
      "actor",
      "where",
      "birth_city",
      "=",
      "value",
      "and",
      "birth_year",
      ">",
      "value"
    ],
    "question":"How many actors were born in \" Los Angeles \" after 2000 ?",
    "question_toks":[
      "How",
      "many",
      "actors",
      "were",
      "born",
      "in",
      "``",
      "Los",
      "Angeles",
      "``",
      "after",
      "2000",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Los Angeles\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_city\") === col(\"\"Los Angeles\"\") && col(\"birth_year\") > 2000).agg(COUNT(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Humphrey Bogart\" AND t2.release_year  <  1942;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t2.title",
      ")",
      "FROM",
      "CAST",
      "AS",
      "t3",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t3.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t2",
      "ON",
      "t2.mid",
      "=",
      "t3.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Humphrey",
      "Bogart",
      "''",
      "AND",
      "t2.release_year",
      "<",
      "1942",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "title",
      ")",
      "from",
      "cast",
      "as",
      "t3",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "release_year",
      "<",
      "value"
    ],
    "question":"How many movies did \" Humphrey Bogart \" act in before 1942 ?",
    "question_toks":[
      "How",
      "many",
      "movies",
      "did",
      "``",
      "Humphrey",
      "Bogart",
      "``",
      "act",
      "in",
      "before",
      "1942",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Humphrey Bogart\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          1942.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Humphrey Bogart\"\") && movie(\"release_year\") < 1942).agg(COUNT(movie(\"title\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Iraq war\" AND t3.release_year  =  2015;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.title",
      ")",
      "FROM",
      "tags",
      "AS",
      "t2",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t2.kid",
      "=",
      "t1.id",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t2.msid",
      "=",
      "t3.mid",
      "WHERE",
      "t1.keyword",
      "=",
      "``",
      "Iraq",
      "war",
      "''",
      "AND",
      "t3.release_year",
      "=",
      "2015",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "title",
      ")",
      "from",
      "tags",
      "as",
      "t2",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "id",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "msid",
      "=",
      "t3",
      ".",
      "mid",
      "where",
      "t1",
      ".",
      "keyword",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "release_year",
      "=",
      "value"
    ],
    "question":"How many movies about Iraq war were produced in 2015 ?",
    "question_toks":[
      "How",
      "many",
      "movies",
      "about",
      "Iraq",
      "war",
      "were",
      "produced",
      "in",
      "2015",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ],
            [
              0,
              37,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Iraq war\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"tags.join(keyword, tags(\"kid\") === keyword(\"id\"), inner).join(movie, tags(\"msid\") === movie(\"mid\"), inner).filter(keyword(\"keyword\") === col(\"\"Iraq war\"\") && movie(\"release_year\") === 2015).agg(COUNT(movie(\"title\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Persians\" AND t3.release_year  >  1990;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.title",
      ")",
      "FROM",
      "tags",
      "AS",
      "t2",
      "JOIN",
      "keyword",
      "AS",
      "t1",
      "ON",
      "t2.kid",
      "=",
      "t1.id",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t2.msid",
      "=",
      "t3.mid",
      "WHERE",
      "t1.keyword",
      "=",
      "``",
      "Persians",
      "''",
      "AND",
      "t3.release_year",
      ">",
      "1990",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "title",
      ")",
      "from",
      "tags",
      "as",
      "t2",
      "join",
      "keyword",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "kid",
      "=",
      "t1",
      ".",
      "id",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "msid",
      "=",
      "t3",
      ".",
      "mid",
      "where",
      "t1",
      ".",
      "keyword",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "release_year",
      ">",
      "value"
    ],
    "question":"How many movies about Persians were released after 1990 ?",
    "question_toks":[
      "How",
      "many",
      "movies",
      "about",
      "Persians",
      "were",
      "released",
      "after",
      "1990",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ],
            [
              0,
              37,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            12
          ],
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Persians\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          1990.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"tags.join(keyword, tags(\"kid\") === keyword(\"id\"), inner).join(movie, tags(\"msid\") === movie(\"mid\"), inner).filter(keyword(\"keyword\") === col(\"\"Persians\"\") && movie(\"release_year\") > 1990).agg(COUNT(movie(\"title\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  >  2010;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.title",
      ")",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Quentin",
      "Tarantino",
      "''",
      "AND",
      "t3.release_year",
      ">",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "title",
      ")",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "release_year",
      ">",
      "value"
    ],
    "question":"How many movies did \" Quentin Tarantino \" direct after 2010 ?",
    "question_toks":[
      "How",
      "many",
      "movies",
      "did",
      "``",
      "Quentin",
      "Tarantino",
      "``",
      "direct",
      "after",
      "2010",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Quentin Tarantino\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(director(\"name\") === col(\"\"Quentin Tarantino\"\") && movie(\"release_year\") > 2010).agg(COUNT(movie(\"title\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  <  2010;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t3.title",
      ")",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Quentin",
      "Tarantino",
      "''",
      "AND",
      "t3.release_year",
      "<",
      "2010",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t3",
      ".",
      "title",
      ")",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "release_year",
      "<",
      "value"
    ],
    "question":"How many movies did \" Quentin Tarantino \" direct before 2010 ?",
    "question_toks":[
      "How",
      "many",
      "movies",
      "did",
      "``",
      "Quentin",
      "Tarantino",
      "``",
      "direct",
      "before",
      "2010",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Quentin Tarantino\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2010.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(director(\"name\") === col(\"\"Quentin Tarantino\"\") && movie(\"release_year\") < 2010).agg(COUNT(movie(\"title\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t4.title",
      ")",
      "FROM",
      "director",
      "AS",
      "t3",
      "JOIN",
      "directed_by",
      "AS",
      "t2",
      "ON",
      "t3.did",
      "=",
      "t2.did",
      "JOIN",
      "movie",
      "AS",
      "t4",
      "ON",
      "t4.mid",
      "=",
      "t2.msid",
      "JOIN",
      "made_by",
      "AS",
      "t5",
      "ON",
      "t4.mid",
      "=",
      "t5.msid",
      "JOIN",
      "producer",
      "AS",
      "t1",
      "ON",
      "t1.pid",
      "=",
      "t5.pid",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "Quentin",
      "Tarantino",
      "''",
      "AND",
      "t4.release_year",
      "<",
      "2010",
      "AND",
      "t4.release_year",
      ">",
      "2002",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t4",
      ".",
      "title",
      ")",
      "from",
      "director",
      "as",
      "t3",
      "join",
      "directed_by",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "join",
      "made_by",
      "as",
      "t5",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t5",
      ".",
      "msid",
      "join",
      "producer",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "pid",
      "=",
      "t5",
      ".",
      "pid",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "release_year",
      "<",
      "value",
      "and",
      "t4",
      ".",
      "release_year",
      ">",
      "value"
    ],
    "question":"How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?",
    "question_toks":[
      "How",
      "many",
      "movies",
      "did",
      "``",
      "Quentin",
      "Tarantino",
      "``",
      "direct",
      "before",
      "2002",
      "and",
      "after",
      "2010",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                43,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Quentin Tarantino\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2010.0,
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          2002.0,
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).join(made_by, movie(\"mid\") === made_by(\"msid\"), inner).join(producer, producer(\"pid\") === made_by(\"pid\"), inner).filter(director(\"name\") === col(\"\"Quentin Tarantino\"\") && movie(\"release_year\") < 2010 && movie(\"release_year\") > 2002).agg(COUNT(movie(\"title\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "name",
      ")",
      "FROM",
      "actor",
      "WHERE",
      "birth_city",
      "=",
      "``",
      "New",
      "York",
      "City",
      "''",
      "AND",
      "birth_year",
      ">",
      "1980",
      "AND",
      "gender",
      "=",
      "``",
      "female",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "name",
      ")",
      "from",
      "actor",
      "where",
      "birth_city",
      "=",
      "value",
      "and",
      "birth_year",
      ">",
      "value",
      "and",
      "gender",
      "=",
      "value"
    ],
    "question":"How many female actors were born in \" New York City \" after 1980 ?",
    "question_toks":[
      "How",
      "many",
      "female",
      "actors",
      "were",
      "born",
      "in",
      "``",
      "New",
      "York",
      "City",
      "``",
      "after",
      "1980",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          
        ],
        "table_units":[
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"New York City\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          1980.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"female\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"actor.filter(col(\"birth_city\") === col(\"\"New York City\"\") && col(\"birth_year\") > 1980 && col(\"gender\") === col(\"\"female\"\")).agg(COUNT(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "CAST",
      "AS",
      "t4",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t5",
      "ON",
      "t5.mid",
      "=",
      "t4.msid",
      "JOIN",
      "directed_by",
      "AS",
      "t2",
      "ON",
      "t5.mid",
      "=",
      "t2.msid",
      "JOIN",
      "director",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t2.did",
      "WHERE",
      "t1.nationality",
      "=",
      "``",
      "Iran",
      "''",
      "AND",
      "t3.name",
      "=",
      "``",
      "Jim",
      "Jarmusch",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "cast",
      "as",
      "t4",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "mid",
      "=",
      "t4",
      ".",
      "msid",
      "join",
      "directed_by",
      "as",
      "t2",
      "on",
      "t5",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "join",
      "director",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "where",
      "t1",
      ".",
      "nationality",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"find the number of actors from Iran who played in \" Jim Jarmusch \" movies",
    "question_toks":[
      "find",
      "the",
      "number",
      "of",
      "actors",
      "from",
      "Iran",
      "who",
      "played",
      "in",
      "``",
      "Jim",
      "Jarmusch",
      "``",
      "movies"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Iran\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Jim Jarmusch\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(directed_by, movie(\"mid\") === directed_by(\"msid\"), inner).join(director, director(\"did\") === directed_by(\"did\"), inner).filter(actor(\"nationality\") === col(\"\"Iran\"\") && director(\"name\") === col(\"\"Jim Jarmusch\"\")).agg(COUNT(actor(\"name\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"China\" AND t3.title  =  \"Rush Hour 3\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "t1.name",
      ")",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t1.nationality",
      "=",
      "``",
      "China",
      "''",
      "AND",
      "t3.title",
      "=",
      "``",
      "Rush",
      "Hour",
      "3",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "name",
      ")",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "nationality",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"How many actors from China have acted in \" Rush Hour 3 \"",
    "question_toks":[
      "How",
      "many",
      "actors",
      "from",
      "China",
      "have",
      "acted",
      "in",
      "``",
      "Rush",
      "Hour",
      "3",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                3,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"China\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"Rush Hour 3\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"nationality\") === col(\"\"China\"\") && movie(\"title\") === col(\"\"Rush Hour 3\"\")).agg(COUNT(actor(\"name\")))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "CAST",
      "AS",
      "t5",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t5.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t4",
      "ON",
      "t4.mid",
      "=",
      "t5.msid",
      "JOIN",
      "CAST",
      "AS",
      "t3",
      "ON",
      "t4.mid",
      "=",
      "t3.msid",
      "JOIN",
      "actor",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Woody",
      "Strode",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "Jason",
      "Robards",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t5",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t5",
      ".",
      "msid",
      "join",
      "cast",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "join",
      "actor",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all movies that star both \" Woody Strode \" and \" Jason Robards \"",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "that",
      "star",
      "both",
      "``",
      "Woody",
      "Strode",
      "``",
      "and",
      "``",
      "Jason",
      "Robards",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Woody Strode\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Jason Robards\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(CAST, movie(\"mid\") === CAST(\"msid\"), inner).join(actor, CAST(\"aid\") === actor(\"aid\"), inner).filter(actor(\"name\") === col(\"\"Woody Strode\"\") && actor(\"name\") === col(\"\"Jason Robards\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "CAST",
      "AS",
      "t5",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t5.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t4",
      "ON",
      "t4.mid",
      "=",
      "t5.msid",
      "JOIN",
      "CAST",
      "AS",
      "t3",
      "ON",
      "t4.mid",
      "=",
      "t3.msid",
      "JOIN",
      "actor",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Woody",
      "Strode",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "Jason",
      "Robards",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t5",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t5",
      ".",
      "msid",
      "join",
      "cast",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "join",
      "actor",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all movies featuring \" Woody Strode \" and \" Jason Robards \"",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "featuring",
      "``",
      "Woody",
      "Strode",
      "``",
      "and",
      "``",
      "Jason",
      "Robards",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Woody Strode\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Jason Robards\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(CAST, movie(\"mid\") === CAST(\"msid\"), inner).join(actor, CAST(\"aid\") === actor(\"aid\"), inner).filter(actor(\"name\") === col(\"\"Woody Strode\"\") && actor(\"name\") === col(\"\"Jason Robards\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "CAST",
      "AS",
      "t5",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t5.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t4",
      "ON",
      "t4.mid",
      "=",
      "t5.msid",
      "JOIN",
      "CAST",
      "AS",
      "t3",
      "ON",
      "t4.mid",
      "=",
      "t3.msid",
      "JOIN",
      "actor",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Woody",
      "Strode",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "Jason",
      "Robards",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t5",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t5",
      ".",
      "msid",
      "join",
      "cast",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "join",
      "actor",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all movies featuring both \" Woody Strode \" and \" Jason Robards \"",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "featuring",
      "both",
      "``",
      "Woody",
      "Strode",
      "``",
      "and",
      "``",
      "Jason",
      "Robards",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Woody Strode\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Jason Robards\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(CAST, movie(\"mid\") === CAST(\"msid\"), inner).join(actor, CAST(\"aid\") === actor(\"aid\"), inner).filter(actor(\"name\") === col(\"\"Woody Strode\"\") && actor(\"name\") === col(\"\"Jason Robards\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
    "query_toks":[
      "SELECT",
      "t4.title",
      "FROM",
      "CAST",
      "AS",
      "t5",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t5.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t4",
      "ON",
      "t4.mid",
      "=",
      "t5.msid",
      "JOIN",
      "CAST",
      "AS",
      "t3",
      "ON",
      "t4.mid",
      "=",
      "t3.msid",
      "JOIN",
      "actor",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Woody",
      "Strode",
      "''",
      "AND",
      "t2.name",
      "=",
      "``",
      "Jason",
      "Robards",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t4",
      ".",
      "title",
      "from",
      "cast",
      "as",
      "t5",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t5",
      ".",
      "msid",
      "join",
      "cast",
      "as",
      "t3",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "join",
      "actor",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all movies featuring \" Jason Robards \" and \" Woody Strode \"",
    "question_toks":[
      "Find",
      "all",
      "movies",
      "featuring",
      "``",
      "Jason",
      "Robards",
      "``",
      "and",
      "``",
      "Woody",
      "Strode",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Woody Strode\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Jason Robards\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(CAST, movie(\"mid\") === CAST(\"msid\"), inner).join(actor, CAST(\"aid\") === actor(\"aid\"), inner).filter(actor(\"name\") === col(\"\"Woody Strode\"\") && actor(\"name\") === col(\"\"Jason Robards\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"Tom Hanks\";",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t4",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t5",
      "ON",
      "t5.mid",
      "=",
      "t4.msid",
      "JOIN",
      "CAST",
      "AS",
      "t3",
      "ON",
      "t5.mid",
      "=",
      "t3.msid",
      "JOIN",
      "actor",
      "AS",
      "t2",
      "ON",
      "t3.aid",
      "=",
      "t2.aid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Tom",
      "Hanks",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t4",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "mid",
      "=",
      "t4",
      ".",
      "msid",
      "join",
      "cast",
      "as",
      "t3",
      "on",
      "t5",
      ".",
      "mid",
      "=",
      "t3",
      ".",
      "msid",
      "join",
      "actor",
      "as",
      "t2",
      "on",
      "t3",
      ".",
      "aid",
      "=",
      "t2",
      ".",
      "aid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"Find all actors who acted in the same movie as \" Tom Hanks \"",
    "question_toks":[
      "Find",
      "all",
      "actors",
      "who",
      "acted",
      "in",
      "the",
      "same",
      "movie",
      "as",
      "``",
      "Tom",
      "Hanks",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Tom Hanks\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(CAST, movie(\"mid\") === CAST(\"msid\"), inner).join(actor, CAST(\"aid\") === actor(\"aid\"), inner).filter(actor(\"name\") === col(\"\"Tom Hanks\"\")).select(actor(\"name\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  \"Revolutionary Road\";",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "director",
      "AS",
      "t5",
      "JOIN",
      "directed_by",
      "AS",
      "t2",
      "ON",
      "t5.did",
      "=",
      "t2.did",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t5.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t4",
      "ON",
      "t4.mid",
      "=",
      "t2.msid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t4.title",
      "=",
      "``",
      "Revolutionary",
      "Road",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "director",
      "as",
      "t5",
      "join",
      "directed_by",
      "as",
      "t2",
      "on",
      "t5",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t5",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t4",
      ".",
      "title",
      "=",
      "value"
    ],
    "question":"What movies have the same director as the movie \" Revolutionary Road \" ?",
    "question_toks":[
      "What",
      "movies",
      "have",
      "the",
      "same",
      "director",
      "as",
      "the",
      "movie",
      "``",
      "Revolutionary",
      "Road",
      "``",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"Revolutionary Road\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(movie(\"title\") === col(\"\"Revolutionary Road\"\")).select(movie(\"title\"))"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t4",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t4.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t5",
      "ON",
      "t5.mid",
      "=",
      "t4.msid",
      "JOIN",
      "directed_by",
      "AS",
      "t2",
      "ON",
      "t5.mid",
      "=",
      "t2.msid",
      "JOIN",
      "director",
      "AS",
      "t3",
      "ON",
      "t3.did",
      "=",
      "t2.did",
      "WHERE",
      "t3.name",
      "=",
      "``",
      "Quentin",
      "Tarantino",
      "''",
      "ORDER",
      "BY",
      "t5.release_year",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t4",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t4",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t5",
      "on",
      "t5",
      ".",
      "mid",
      "=",
      "t4",
      ".",
      "msid",
      "join",
      "directed_by",
      "as",
      "t2",
      "on",
      "t5",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "join",
      "director",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "did",
      "=",
      "t2",
      ".",
      "did",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "t5",
      ".",
      "release_year",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the actors who played in the latest movie by \" Quentin Tarantino \"",
    "question_toks":[
      "Find",
      "the",
      "actors",
      "who",
      "played",
      "in",
      "the",
      "latest",
      "movie",
      "by",
      "``",
      "Quentin",
      "Tarantino",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Quentin Tarantino\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).join(directed_by, movie(\"mid\") === directed_by(\"msid\"), inner).join(director, director(\"did\") === directed_by(\"did\"), inner).filter(director(\"name\") === col(\"\"Quentin Tarantino\"\")).select(actor(\"name\")).orderBy(desc(\"release_year\")).limit(1)"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "t3.budget",
      ",",
      "t3.title",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Quentin",
      "Tarantino",
      "''",
      "ORDER",
      "BY",
      "t3.release_year",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "budget",
      ",",
      "t3",
      ".",
      "title",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "release_year",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the name and budget of the latest movie by \" Quentin Tarantino \"",
    "question_toks":[
      "Find",
      "the",
      "name",
      "and",
      "budget",
      "of",
      "the",
      "latest",
      "movie",
      "by",
      "``",
      "Quentin",
      "Tarantino",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Quentin Tarantino\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(director(\"name\") === col(\"\"Quentin Tarantino\"\")).select(movie(\"budget\"),movie(\"title\")).orderBy(desc(\"release_year\")).limit(1)"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "t3.title",
      "FROM",
      "director",
      "AS",
      "t2",
      "JOIN",
      "directed_by",
      "AS",
      "t1",
      "ON",
      "t2.did",
      "=",
      "t1.did",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t1.msid",
      "WHERE",
      "t2.name",
      "=",
      "``",
      "Jim",
      "Jarmusch",
      "''",
      "ORDER",
      "BY",
      "t3.release_year",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "title",
      "from",
      "director",
      "as",
      "t2",
      "join",
      "directed_by",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "did",
      "=",
      "t1",
      ".",
      "did",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t1",
      ".",
      "msid",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "release_year",
      "desc",
      "limit",
      "value"
    ],
    "question":"What is the latest movie by \" Jim Jarmusch \"",
    "question_toks":[
      "What",
      "is",
      "the",
      "latest",
      "movie",
      "by",
      "``",
      "Jim",
      "Jarmusch",
      "``"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              36,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Jim Jarmusch\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"director.join(directed_by, director(\"did\") === directed_by(\"did\"), inner).join(movie, movie(\"mid\") === directed_by(\"msid\"), inner).filter(director(\"name\") === col(\"\"Jim Jarmusch\"\")).select(movie(\"title\")).orderBy(desc(\"release_year\")).limit(1)"
  },
  {
    "db_id":"imdb",
    "query":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;",
    "query_toks":[
      "SELECT",
      "t1.name",
      "FROM",
      "CAST",
      "AS",
      "t2",
      "JOIN",
      "actor",
      "AS",
      "t1",
      "ON",
      "t2.aid",
      "=",
      "t1.aid",
      "JOIN",
      "movie",
      "AS",
      "t3",
      "ON",
      "t3.mid",
      "=",
      "t2.msid",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "Gabriele",
      "Ferzetti",
      "''",
      "ORDER",
      "BY",
      "t3.release_year",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t1",
      ".",
      "name",
      "from",
      "cast",
      "as",
      "t2",
      "join",
      "actor",
      "as",
      "t1",
      "on",
      "t2",
      ".",
      "aid",
      "=",
      "t1",
      ".",
      "aid",
      "join",
      "movie",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "mid",
      "=",
      "t2",
      ".",
      "msid",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "t3",
      ".",
      "release_year",
      "desc",
      "limit",
      "value"
    ],
    "question":"Find the latest movie which \" Gabriele Ferzetti \" acted in",
    "question_toks":[
      "Find",
      "the",
      "latest",
      "movie",
      "which",
      "``",
      "Gabriele",
      "Ferzetti",
      "``",
      "acted",
      "in"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":1,
      "orderBy":[
        "desc",
        [
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ]
        ]
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Gabriele Ferzetti\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"CAST.join(actor, CAST(\"aid\") === actor(\"aid\"), inner).join(movie, movie(\"mid\") === CAST(\"msid\"), inner).filter(actor(\"name\") === col(\"\"Gabriele Ferzetti\"\")).select(actor(\"name\")).orderBy(desc(\"release_year\")).limit(1)"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"buttercup kitchen\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "buttercup",
      "kitchen",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"how many buttercup kitchen are there in san francisco ?",
    "question_toks":[
      "how",
      "many",
      "buttercup",
      "kitchen",
      "are",
      "there",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"buttercup kitchen\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && restaurant(\"name\") === col(\"\"buttercup kitchen\"\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "bay",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "chinese",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value"
    ],
    "question":"how many chinese restaurants are there in the bay area ?",
    "question_toks":[
      "how",
      "many",
      "chinese",
      "restaurants",
      "are",
      "there",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"bay area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"chinese\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).filter(geographic(\"region\") === col(\"\"bay area\"\") && restaurant(\"food_type\") === col(\"\"chinese\"\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "bay",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "chinese",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value"
    ],
    "question":"how many places for chinese food are there in the bay area ?",
    "question_toks":[
      "how",
      "many",
      "places",
      "for",
      "chinese",
      "food",
      "are",
      "there",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"bay area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"chinese\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).filter(geographic(\"region\") === col(\"\"bay area\"\") && restaurant(\"food_type\") === col(\"\"chinese\"\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "bay",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "chinese",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value"
    ],
    "question":"how many chinese places are there in the bay area ?",
    "question_toks":[
      "how",
      "many",
      "chinese",
      "places",
      "are",
      "there",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"bay area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"chinese\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).filter(geographic(\"region\") === col(\"\"bay area\"\") && restaurant(\"food_type\") === col(\"\"chinese\"\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "bay",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "chinese",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value"
    ],
    "question":"how many places for chinese are there in the bay area ?",
    "question_toks":[
      "how",
      "many",
      "places",
      "for",
      "chinese",
      "are",
      "there",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"bay area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"chinese\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).filter(geographic(\"region\") === col(\"\"bay area\"\") && restaurant(\"food_type\") === col(\"\"chinese\"\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"santa cruz county\" AND t1.name  =  \"jamerican cuisine\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "WHERE",
      "t2.county",
      "=",
      "``",
      "santa",
      "cruz",
      "county",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "jamerican",
      "cuisine",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "where",
      "t2",
      ".",
      "county",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"how many jamerican cuisine are there in santa cruz county ?",
    "question_toks":[
      "how",
      "many",
      "jamerican",
      "cuisine",
      "are",
      "there",
      "in",
      "santa",
      "cruz",
      "county",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"santa cruz county\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"jamerican cuisine\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).filter(geographic(\"county\") === col(\"\"santa cruz county\"\") && restaurant(\"name\") === col(\"\"jamerican cuisine\"\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  \"jamerican cuisine\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t1.name",
      "=",
      "``",
      "jamerican",
      "cuisine",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"where is jamerican cuisine ?",
    "question_toks":[
      "where",
      "is",
      "jamerican",
      "cuisine",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"jamerican cuisine\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(restaurant(\"name\") === col(\"\"jamerican cuisine\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "bay",
      "area",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "denny",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"where is denny in the bay area ?",
    "question_toks":[
      "where",
      "is",
      "denny",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"bay area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"denny\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"bay area\"\") && restaurant(\"name\") === col(\"\"denny\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "bethel",
      "island",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "bethel",
      "island",
      "rd",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"what are some good restaurants on bethel island rd in bethel island ?",
    "question_toks":[
      "what",
      "are",
      "some",
      "good",
      "restaurants",
      "on",
      "bethel",
      "island",
      "rd",
      "in",
      "bethel",
      "island",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"bethel island\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"bethel island rd\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"bethel island\"\") && LOCATION(\"street_name\") === col(\"\"bethel island rd\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "bethel",
      "island",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "bethel",
      "island",
      "rd",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some good restaurants on bethel island rd in bethel island ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "good",
      "restaurants",
      "on",
      "bethel",
      "island",
      "rd",
      "in",
      "bethel",
      "island",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"bethel island\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"bethel island rd\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"bethel island\"\") && LOCATION(\"street_name\") === col(\"\"bethel island rd\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "bethel",
      "island",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "bethel",
      "island",
      "rd",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good restaurant on bethel island rd in bethel island ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "restaurant",
      "on",
      "bethel",
      "island",
      "rd",
      "in",
      "bethel",
      "island",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"bethel island\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"bethel island rd\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"bethel island\"\") && LOCATION(\"street_name\") === col(\"\"bethel island rd\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "bethel",
      "island",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "bethel",
      "island",
      "rd",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"what is a good restaurant on bethel island rd in bethel island ?",
    "question_toks":[
      "what",
      "is",
      "a",
      "good",
      "restaurant",
      "on",
      "bethel",
      "island",
      "rd",
      "in",
      "bethel",
      "island",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"bethel island\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"bethel island rd\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"bethel island\"\") && LOCATION(\"street_name\") === col(\"\"bethel island rd\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "alameda",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value"
    ],
    "question":"where can we find a restaurant in alameda ?",
    "question_toks":[
      "where",
      "can",
      "we",
      "find",
      "a",
      "restaurant",
      "in",
      "alameda",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"alameda\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"alameda\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "alameda",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value"
    ],
    "question":"give me a restaurant in alameda ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "restaurant",
      "in",
      "alameda",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"alameda\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"alameda\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "alameda",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value"
    ],
    "question":"where can we find some restaurants in alameda ?",
    "question_toks":[
      "where",
      "can",
      "we",
      "find",
      "some",
      "restaurants",
      "in",
      "alameda",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"alameda\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"alameda\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "alameda",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value"
    ],
    "question":"where is a restaurant in alameda ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "restaurant",
      "in",
      "alameda",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"alameda\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"alameda\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "alameda",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value"
    ],
    "question":"give me some restaurants in alameda ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "restaurants",
      "in",
      "alameda",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"alameda\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"alameda\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some restaurants good for french food ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "restaurants",
      "good",
      "for",
      "french",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where are some restaurants good for french food ?",
    "question_toks":[
      "where",
      "are",
      "some",
      "restaurants",
      "good",
      "for",
      "french",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "palo",
      "alto",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value"
    ],
    "question":"how many places for french food are there in palo alto ?",
    "question_toks":[
      "how",
      "many",
      "places",
      "for",
      "french",
      "food",
      "are",
      "there",
      "in",
      "palo",
      "alto",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"palo alto\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"palo alto\"\") && restaurant(\"food_type\") === col(\"\"french\"\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "palo",
      "alto",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value"
    ],
    "question":"how many french restaurants are there in palo alto ?",
    "question_toks":[
      "how",
      "many",
      "french",
      "restaurants",
      "are",
      "there",
      "in",
      "palo",
      "alto",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"palo alto\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"palo alto\"\") && restaurant(\"food_type\") === col(\"\"french\"\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "palo",
      "alto",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value"
    ],
    "question":"how many french restaurant are there in palo alto ?",
    "question_toks":[
      "how",
      "many",
      "french",
      "restaurant",
      "are",
      "there",
      "in",
      "palo",
      "alto",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"palo alto\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"palo alto\"\") && restaurant(\"food_type\") === col(\"\"french\"\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "palo",
      "alto",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value"
    ],
    "question":"how many places for french are there in palo alto ?",
    "question_toks":[
      "how",
      "many",
      "places",
      "for",
      "french",
      "are",
      "there",
      "in",
      "palo",
      "alto",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"palo alto\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"palo alto\"\") && restaurant(\"food_type\") === col(\"\"french\"\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"yolo county\" AND t1.food_type  =  \"italian\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "WHERE",
      "t2.county",
      "=",
      "``",
      "yolo",
      "county",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "italian",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "where",
      "t2",
      ".",
      "county",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value"
    ],
    "question":"how many italian restaurants are in the yolo county ?",
    "question_toks":[
      "how",
      "many",
      "italian",
      "restaurants",
      "are",
      "in",
      "the",
      "yolo",
      "county",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"yolo county\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"italian\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).filter(geographic(\"county\") === col(\"\"yolo county\"\") && restaurant(\"food_type\") === col(\"\"italian\"\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"french\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value"
    ],
    "question":"where can i eat french food in mountain view ?",
    "question_toks":[
      "where",
      "can",
      "i",
      "eat",
      "french",
      "food",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"french\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";",
    "query_toks":[
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "bay",
      "area",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "denny",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"how many denny are there in the bay area ?",
    "question_toks":[
      "how",
      "many",
      "denny",
      "are",
      "there",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"bay area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"denny\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).filter(geographic(\"region\") === col(\"\"bay area\"\") && restaurant(\"name\") === col(\"\"denny\"\")).agg(COUNT(\"*\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "alameda",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good restaurant in alameda ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "restaurant",
      "in",
      "alameda",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"alameda\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"alameda\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "alameda",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"what are some good restaurants in alameda ?",
    "question_toks":[
      "what",
      "are",
      "some",
      "good",
      "restaurants",
      "in",
      "alameda",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"alameda\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"alameda\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "alameda",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"what is a good restaurant in alameda ?",
    "question_toks":[
      "what",
      "is",
      "a",
      "good",
      "restaurant",
      "in",
      "alameda",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"alameda\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"alameda\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "alameda",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some good restaurants in alameda ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "good",
      "restaurants",
      "in",
      "alameda",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"alameda\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"alameda\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a good restaurant on buchanan in san francisco for arabic food ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "good",
      "restaurant",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "for",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where are some good arabics on buchanan in san francisco ?",
    "question_toks":[
      "where",
      "are",
      "some",
      "good",
      "arabics",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a good arabic restaurant on buchanan in san francisco ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "good",
      "arabic",
      "restaurant",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"what are some good places for arabic on buchanan in san francisco ?",
    "question_toks":[
      "what",
      "are",
      "some",
      "good",
      "places",
      "for",
      "arabic",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good arabic on buchanan in san francisco ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "arabic",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some restaurants good for arabic food on buchanan in san francisco ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "restaurants",
      "good",
      "for",
      "arabic",
      "food",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good place on buchanan in san francisco for arabic food ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "place",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "for",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a good place on buchanan in san francisco for arabic food ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "good",
      "place",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "for",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where can i eat arabic food on buchanan in san francisco ?",
    "question_toks":[
      "where",
      "can",
      "i",
      "eat",
      "arabic",
      "food",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some good places on buchanan in san francisco for arabic food ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "good",
      "places",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "for",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a arabic restaurant on buchanan in san francisco ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "arabic",
      "restaurant",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a restaurant on buchanan in san francisco that serves good arabic food ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "restaurant",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "that",
      "serves",
      "good",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good restaurant on buchanan in san francisco for arabic food ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "restaurant",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "for",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a restaurant on buchanan in san francisco that serves good arabic food ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "restaurant",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "that",
      "serves",
      "good",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some good restaurants on buchanan in san francisco for arabic food ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "good",
      "restaurants",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "for",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some good places for arabic on buchanan in san francisco ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "good",
      "places",
      "for",
      "arabic",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where can i eat some good arabic food on buchanan in san francisco ?",
    "question_toks":[
      "where",
      "can",
      "i",
      "eat",
      "some",
      "good",
      "arabic",
      "food",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a good arabic on buchanan in san francisco ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "good",
      "arabic",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where are some restaurants good for arabic food on buchanan in san francisco ?",
    "question_toks":[
      "where",
      "are",
      "some",
      "restaurants",
      "good",
      "for",
      "arabic",
      "food",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where are some good places for arabic on buchanan in san francisco ?",
    "question_toks":[
      "where",
      "are",
      "some",
      "good",
      "places",
      "for",
      "arabic",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good arabic restaurant on buchanan in san francisco ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "arabic",
      "restaurant",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "buchanan",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some good arabics on buchanan in san francisco ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "good",
      "arabics",
      "on",
      "buchanan",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"buchanan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && LOCATION(\"street_name\") === col(\"\"buchanan\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"french\";",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "bay",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value"
    ],
    "question":"where can i eat french food in the bay area ?",
    "question_toks":[
      "where",
      "can",
      "i",
      "eat",
      "french",
      "food",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"bay area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"bay area\"\") && restaurant(\"food_type\") === col(\"\"french\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "bethel",
      "island",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "bethel",
      "island",
      "rd",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value"
    ],
    "question":"give me some restaurants on bethel island rd in bethel island ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "restaurants",
      "on",
      "bethel",
      "island",
      "rd",
      "in",
      "bethel",
      "island",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"bethel island\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"bethel island rd\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"bethel island\"\") && LOCATION(\"street_name\") === col(\"\"bethel island rd\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "bethel",
      "island",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "bethel",
      "island",
      "rd",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value"
    ],
    "question":"give me a restaurant on bethel island rd in bethel island ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "restaurant",
      "on",
      "bethel",
      "island",
      "rd",
      "in",
      "bethel",
      "island",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"bethel island\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"bethel island rd\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"bethel island\"\") && LOCATION(\"street_name\") === col(\"\"bethel island rd\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "bethel",
      "island",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "bethel",
      "island",
      "rd",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value"
    ],
    "question":"where can we find a restaurant on bethel island rd in bethel island ?",
    "question_toks":[
      "where",
      "can",
      "we",
      "find",
      "a",
      "restaurant",
      "on",
      "bethel",
      "island",
      "rd",
      "in",
      "bethel",
      "island",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"bethel island\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"bethel island rd\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"bethel island\"\") && LOCATION(\"street_name\") === col(\"\"bethel island rd\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "bethel",
      "island",
      "''",
      "AND",
      "t2.street_name",
      "=",
      "``",
      "bethel",
      "island",
      "rd",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "street_name",
      "=",
      "value"
    ],
    "question":"where can we find some restaurants on bethel island rd in bethel island ?",
    "question_toks":[
      "where",
      "can",
      "we",
      "find",
      "some",
      "restaurants",
      "on",
      "bethel",
      "island",
      "rd",
      "in",
      "bethel",
      "island",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"bethel island\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"bethel island rd\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"bethel island\"\") && LOCATION(\"street_name\") === col(\"\"bethel island rd\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some restaurants good for french food in the yosemite and mono lake area ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "restaurants",
      "good",
      "for",
      "french",
      "food",
      "in",
      "the",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"yosemite and mono lake area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"yosemite and mono lake area\"\") && restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"what are some good places in the yosemite and mono lake area for french food ?",
    "question_toks":[
      "what",
      "are",
      "some",
      "good",
      "places",
      "in",
      "the",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "for",
      "french",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"yosemite and mono lake area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"yosemite and mono lake area\"\") && restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good restaurant in the yosemite and mono lake area for french food ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "restaurant",
      "in",
      "the",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "for",
      "french",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"yosemite and mono lake area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"yosemite and mono lake area\"\") && restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good french restaurant in the yosemite and mono lake area ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "french",
      "restaurant",
      "in",
      "the",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"yosemite and mono lake area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"yosemite and mono lake area\"\") && restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a good place in the yosemite and mono lake area for french food ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "good",
      "place",
      "in",
      "the",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "for",
      "french",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"yosemite and mono lake area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"yosemite and mono lake area\"\") && restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where are some restaurants good for french food in the yosemite and mono lake area ?",
    "question_toks":[
      "where",
      "are",
      "some",
      "restaurants",
      "good",
      "for",
      "french",
      "food",
      "in",
      "the",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"yosemite and mono lake area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"yosemite and mono lake area\"\") && restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good place in the yosemite and mono lake area for french food ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "place",
      "in",
      "the",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "for",
      "french",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"yosemite and mono lake area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"yosemite and mono lake area\"\") && restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a good restaurant in the yosemite and mono lake area for french food ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "good",
      "restaurant",
      "in",
      "the",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "for",
      "french",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"yosemite and mono lake area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"yosemite and mono lake area\"\") && restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"what are some good restaurants in the yosemite and mono lake area for french food ?",
    "question_toks":[
      "what",
      "are",
      "some",
      "good",
      "restaurants",
      "in",
      "the",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "for",
      "french",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"yosemite and mono lake area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"yosemite and mono lake area\"\") && restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a good french restaurant in the yosemite and mono lake area ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "good",
      "french",
      "restaurant",
      "in",
      "the",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"yosemite and mono lake area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"yosemite and mono lake area\"\") && restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t3.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "geographic",
      "AS",
      "t2",
      "ON",
      "t1.city_name",
      "=",
      "t2.city_name",
      "JOIN",
      "LOCATION",
      "AS",
      "t3",
      "ON",
      "t1.id",
      "=",
      "t3.restaurant_id",
      "WHERE",
      "t2.region",
      "=",
      "``",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "french",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t3",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "geographic",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_name",
      "=",
      "t2",
      ".",
      "city_name",
      "join",
      "location",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "region",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where can i eat some good french food in the yosemite and mono lake area ?",
    "question_toks":[
      "where",
      "can",
      "i",
      "eat",
      "some",
      "good",
      "french",
      "food",
      "in",
      "the",
      "yosemite",
      "and",
      "mono",
      "lake",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"yosemite and mono lake area\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"french\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(geographic, restaurant(\"city_name\") === geographic(\"city_name\"), inner).join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(geographic(\"region\") === col(\"\"yosemite and mono lake area\"\") && restaurant(\"food_type\") === col(\"\"french\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where are some restaurants good for arabic food in mountain view ?",
    "question_toks":[
      "where",
      "are",
      "some",
      "restaurants",
      "good",
      "for",
      "arabic",
      "food",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"what are some good places in mountain view for arabic food ?",
    "question_toks":[
      "what",
      "are",
      "some",
      "good",
      "places",
      "in",
      "mountain",
      "view",
      "for",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where are some good arabic restaurants in mountain view ?",
    "question_toks":[
      "where",
      "are",
      "some",
      "good",
      "arabic",
      "restaurants",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"show me a good arabic restaurant in mountain view ?",
    "question_toks":[
      "show",
      "me",
      "a",
      "good",
      "arabic",
      "restaurant",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good arabic in mountain view ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "arabic",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good arabic restaurant in mountain view ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "arabic",
      "restaurant",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good place in mountain view for arabic food ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "place",
      "in",
      "mountain",
      "view",
      "for",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where are some good arabics in mountain view ?",
    "question_toks":[
      "where",
      "are",
      "some",
      "good",
      "arabics",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a restaurant in mountain view that serves good arabic food ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "restaurant",
      "in",
      "mountain",
      "view",
      "that",
      "serves",
      "good",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"what are some good restaurants in mountain view for arabic food ?",
    "question_toks":[
      "what",
      "are",
      "some",
      "good",
      "restaurants",
      "in",
      "mountain",
      "view",
      "for",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some restaurants good for arabic food in mountain view ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "restaurants",
      "good",
      "for",
      "arabic",
      "food",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where can i eat some good arabic food in mountain view ?",
    "question_toks":[
      "where",
      "can",
      "i",
      "eat",
      "some",
      "good",
      "arabic",
      "food",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some good places for arabic in mountain view ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "good",
      "places",
      "for",
      "arabic",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a good arabic in mountain view ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "good",
      "arabic",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a restaurant in mountain view that serves good arabic food ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "restaurant",
      "in",
      "mountain",
      "view",
      "that",
      "serves",
      "good",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some good arabic restaurants in mountain view ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "good",
      "arabic",
      "restaurants",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where are some good places for arabic in mountain view ?",
    "question_toks":[
      "where",
      "are",
      "some",
      "good",
      "places",
      "for",
      "arabic",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some good arabics in mountain view ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "good",
      "arabics",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good restaurant in mountain view for arabic food ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "restaurant",
      "in",
      "mountain",
      "view",
      "for",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a good arabic restaurant in mountain view ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "good",
      "arabic",
      "restaurant",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"what are some good places for arabic in mountain view ?",
    "question_toks":[
      "what",
      "are",
      "some",
      "good",
      "places",
      "for",
      "arabic",
      "in",
      "mountain",
      "view",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a good restaurant in mountain view for arabic food ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "good",
      "restaurant",
      "in",
      "mountain",
      "view",
      "for",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "mountain",
      "view",
      "''",
      "AND",
      "t1.food_type",
      "=",
      "``",
      "arabic",
      "''",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "food_type",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"where is a good place in mountain view for arabic food ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "good",
      "place",
      "in",
      "mountain",
      "view",
      "for",
      "arabic",
      "food",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"mountain view\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"arabic\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"mountain view\"\") && restaurant(\"food_type\") === col(\"\"arabic\"\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "jamerican",
      "cuisine",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"where can i find a jamerican cuisine in san francisco ?",
    "question_toks":[
      "where",
      "can",
      "i",
      "find",
      "a",
      "jamerican",
      "cuisine",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"jamerican cuisine\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && restaurant(\"name\") === col(\"\"jamerican cuisine\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "jamerican",
      "cuisine",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"where is jamerican cuisine in san francisco ?",
    "question_toks":[
      "where",
      "is",
      "jamerican",
      "cuisine",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"jamerican cuisine\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && restaurant(\"name\") === col(\"\"jamerican cuisine\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "restaurant",
      "AS",
      "t1",
      "JOIN",
      "LOCATION",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t2.city_name",
      "=",
      "``",
      "san",
      "francisco",
      "''",
      "AND",
      "t1.name",
      "=",
      "``",
      "jamerican",
      "cuisine",
      "''",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "restaurant",
      "as",
      "t1",
      "join",
      "location",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t2",
      ".",
      "city_name",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question":"where is a jamerican cuisine in san francisco ?",
    "question_toks":[
      "where",
      "is",
      "a",
      "jamerican",
      "cuisine",
      "in",
      "san",
      "francisco",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"san francisco\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"jamerican cuisine\"",
          null
        ]
      ]
    },
    "SparkDataFrame":"restaurant.join(LOCATION, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(LOCATION(\"city_name\") === col(\"\"san francisco\"\") && restaurant(\"name\") === col(\"\"jamerican cuisine\"\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "LOCATION",
      "AS",
      "t2",
      "JOIN",
      "restaurant",
      "AS",
      "t1",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t1.city_name",
      "IN",
      "(",
      "SELECT",
      "city_name",
      "FROM",
      "geographic",
      "WHERE",
      "region",
      "=",
      "``",
      "bay",
      "area",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "location",
      "as",
      "t2",
      "join",
      "restaurant",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t1",
      ".",
      "city_name",
      "in",
      "(",
      "select",
      "city_name",
      "from",
      "geographic",
      "where",
      "region",
      "=",
      "value",
      ")"
    ],
    "question":"where can we find some restaurants in the bay area ?",
    "question_toks":[
      "where",
      "can",
      "we",
      "find",
      "some",
      "restaurants",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ],
                "\"bay area\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"LOCATION.join(restaurant, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(t1.city_name IN (SELECT city_name FROM geographic WHERE region = \"bay area\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "LOCATION",
      "AS",
      "t2",
      "JOIN",
      "restaurant",
      "AS",
      "t1",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t1.city_name",
      "IN",
      "(",
      "SELECT",
      "city_name",
      "FROM",
      "geographic",
      "WHERE",
      "region",
      "=",
      "``",
      "bay",
      "area",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "location",
      "as",
      "t2",
      "join",
      "restaurant",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t1",
      ".",
      "city_name",
      "in",
      "(",
      "select",
      "city_name",
      "from",
      "geographic",
      "where",
      "region",
      "=",
      "value",
      ")"
    ],
    "question":"give me some restaurants in the bay area ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "restaurants",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ],
                "\"bay area\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"LOCATION.join(restaurant, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(t1.city_name IN (SELECT city_name FROM geographic WHERE region = \"bay area\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "LOCATION",
      "AS",
      "t2",
      "JOIN",
      "restaurant",
      "AS",
      "t1",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t1.city_name",
      "IN",
      "(",
      "SELECT",
      "city_name",
      "FROM",
      "geographic",
      "WHERE",
      "region",
      "=",
      "``",
      "bay",
      "area",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "location",
      "as",
      "t2",
      "join",
      "restaurant",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t1",
      ".",
      "city_name",
      "in",
      "(",
      "select",
      "city_name",
      "from",
      "geographic",
      "where",
      "region",
      "=",
      "value",
      ")"
    ],
    "question":"give me a restaurant in the bay area ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "restaurant",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ],
                "\"bay area\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"LOCATION.join(restaurant, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(t1.city_name IN (SELECT city_name FROM geographic WHERE region = \"bay area\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "LOCATION",
      "AS",
      "t2",
      "JOIN",
      "restaurant",
      "AS",
      "t1",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t1.city_name",
      "IN",
      "(",
      "SELECT",
      "city_name",
      "FROM",
      "geographic",
      "WHERE",
      "region",
      "=",
      "``",
      "bay",
      "area",
      "''",
      ")",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "location",
      "as",
      "t2",
      "join",
      "restaurant",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t1",
      ".",
      "city_name",
      "in",
      "(",
      "select",
      "city_name",
      "from",
      "geographic",
      "where",
      "region",
      "=",
      "value",
      ")"
    ],
    "question":"where can i find a restaurant in the bay area ?",
    "question_toks":[
      "where",
      "can",
      "i",
      "find",
      "a",
      "restaurant",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ],
                "\"bay area\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    },
    "SparkDataFrame":"LOCATION.join(restaurant, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(t1.city_name IN (SELECT city_name FROM geographic WHERE region = \"bay area\")).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "LOCATION",
      "AS",
      "t2",
      "JOIN",
      "restaurant",
      "AS",
      "t1",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t1.city_name",
      "IN",
      "(",
      "SELECT",
      "city_name",
      "FROM",
      "geographic",
      "WHERE",
      "region",
      "=",
      "``",
      "region0",
      "''",
      ")",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "location",
      "as",
      "t2",
      "join",
      "restaurant",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t1",
      ".",
      "city_name",
      "in",
      "(",
      "select",
      "city_name",
      "from",
      "geographic",
      "where",
      "region",
      "=",
      "value",
      ")",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me a good restaurant in the bay area ?",
    "question_toks":[
      "give",
      "me",
      "a",
      "good",
      "restaurant",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ],
                "\"region0\"",
                null
              ]
            ]
          },
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"LOCATION.join(restaurant, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(t1.city_name IN (SELECT city_name FROM geographic WHERE region = \"region0\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "LOCATION",
      "AS",
      "t2",
      "JOIN",
      "restaurant",
      "AS",
      "t1",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t1.city_name",
      "IN",
      "(",
      "SELECT",
      "city_name",
      "FROM",
      "geographic",
      "WHERE",
      "region",
      "=",
      "``",
      "region0",
      "''",
      ")",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "location",
      "as",
      "t2",
      "join",
      "restaurant",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t1",
      ".",
      "city_name",
      "in",
      "(",
      "select",
      "city_name",
      "from",
      "geographic",
      "where",
      "region",
      "=",
      "value",
      ")",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"what are some good restaurants in the bay area ?",
    "question_toks":[
      "what",
      "are",
      "some",
      "good",
      "restaurants",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ],
                "\"region0\"",
                null
              ]
            ]
          },
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"LOCATION.join(restaurant, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(t1.city_name IN (SELECT city_name FROM geographic WHERE region = \"region0\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "LOCATION",
      "AS",
      "t2",
      "JOIN",
      "restaurant",
      "AS",
      "t1",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t1.city_name",
      "IN",
      "(",
      "SELECT",
      "city_name",
      "FROM",
      "geographic",
      "WHERE",
      "region",
      "=",
      "``",
      "region0",
      "''",
      ")",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "location",
      "as",
      "t2",
      "join",
      "restaurant",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t1",
      ".",
      "city_name",
      "in",
      "(",
      "select",
      "city_name",
      "from",
      "geographic",
      "where",
      "region",
      "=",
      "value",
      ")",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"give me some good restaurants in the bay area ?",
    "question_toks":[
      "give",
      "me",
      "some",
      "good",
      "restaurants",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ],
                "\"region0\"",
                null
              ]
            ]
          },
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"LOCATION.join(restaurant, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(t1.city_name IN (SELECT city_name FROM geographic WHERE region = \"region0\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  },
  {
    "db_id":"restaurants",
    "query":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
    "query_toks":[
      "SELECT",
      "t2.house_number",
      ",",
      "t1.name",
      "FROM",
      "LOCATION",
      "AS",
      "t2",
      "JOIN",
      "restaurant",
      "AS",
      "t1",
      "ON",
      "t1.id",
      "=",
      "t2.restaurant_id",
      "WHERE",
      "t1.city_name",
      "IN",
      "(",
      "SELECT",
      "city_name",
      "FROM",
      "geographic",
      "WHERE",
      "region",
      "=",
      "``",
      "region0",
      "''",
      ")",
      "AND",
      "t1.rating",
      ">",
      "2.5",
      ";"
    ],
    "query_toks_no_value":[
      "select",
      "t2",
      ".",
      "house_number",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "location",
      "as",
      "t2",
      "join",
      "restaurant",
      "as",
      "t1",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "restaurant_id",
      "where",
      "t1",
      ".",
      "city_name",
      "in",
      "(",
      "select",
      "city_name",
      "from",
      "geographic",
      "where",
      "region",
      "=",
      "value",
      ")",
      "and",
      "t1",
      ".",
      "rating",
      ">",
      "value"
    ],
    "question":"what is a good restaurant in the bay area ?",
    "question_toks":[
      "what",
      "is",
      "a",
      "good",
      "restaurant",
      "in",
      "the",
      "bay",
      "area",
      "?"
    ],
    "sql":{
      "except":null,
      "from":{
        "conds":[
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units":[
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy":[
        
      ],
      "having":[
        
      ],
      "intersect":null,
      "limit":null,
      "orderBy":[
        
      ],
      "select":[
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union":null,
      "where":[
        [
          false,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "except":null,
            "from":{
              "conds":[
                
              ],
              "table_units":[
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy":[
              
            ],
            "having":[
              
            ],
            "intersect":null,
            "limit":null,
            "orderBy":[
              
            ],
            "select":[
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union":null,
            "where":[
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    3,
                    false
                  ],
                  null
                ],
                "\"region0\"",
                null
              ]
            ]
          },
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          2.5,
          null
        ]
      ]
    },
    "SparkDataFrame":"LOCATION.join(restaurant, restaurant(\"id\") === LOCATION(\"restaurant_id\"), inner).filter(t1.city_name IN (SELECT city_name FROM geographic WHERE region = \"region0\") && restaurant(\"rating\") > 2.5).select(LOCATION(\"house_number\"),restaurant(\"name\"))"
  }
]
